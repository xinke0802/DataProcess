<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lava.WPF</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:Hallucination.Expressions.LambdaParser.Compile``1(System.String,System.String[])" -->
        <member name="T:Hallucination.Expressions.Helper.CodeParser">
            <summary>
            解析代码
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.ReadString">
            <summary>
            往下读取字符串。(此方法是Read()方法的封装)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.ReadString(System.Boolean)">
            <summary>
            往下读取字符串。(此方法是Read()方法的封装)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.PeekString">
            <summary>
            获取下一个字符串而不改变当前位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.Read(System.Boolean,System.Boolean)">
            <summary>
            往下读取。通过Index和Length指示当前位置。
            </summary>
            <param name="isBuildDefineString">遇到代码中的字符串常量时是否将字符串常量解析到DefineString成员。</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.GetStringIndex(System.String,System.Int32)">
            <summary>
            在this.Content获取指定字符串，返回-1表示没找到
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.TryGetNextChar(System.Boolean,System.Char@)">
            <summary>
            尝试获取下个字符，若已到结尾没有下个字符则返回false
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.SavePosition">
            <summary>
            保存当前位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.RevertPosition(Hallucination.Expressions.Helper.CodeParserPosition)">
            <summary>
            恢复指定的位置
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.CodeParser.RevertPosition">
            <summary>
            恢复到初始状态
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.Helper.CodeParser.DefineString">
            <summary>
            分析".."或@".."所定义的字符串
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.Helper.CodeParserPosition">
            <summary>
            CodeParser保存的位置点，用来还原
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.Helper.ExpressionParser">
            <summary>
            Lambda表达式的解析器
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Parse(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Parse(System.String,System.Type,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Parse(System.String,System.Type,System.Type[],System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Parse(System.Type,System.String,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="firstTypeIsDefaultInstance">是否第一个类型是默认实例</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Parse(System.Type,System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="firstTypeIsDefaultInstance">是否第一个类型是默认实例</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Parse``1(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Parse``1(System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Compile(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Compile(System.String,System.Type,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Compile(System.Type,System.String,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Compile(System.Type,System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="firstTypeIsDefaultInstance">是否第一个类型是默认实例</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Compile``1(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Compile``1(System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Exec``1(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            ($0表示instance，(可省略$0)；$1表示objects的第一个对象；$2表示objects的第二个对象....)
            </summary>
            <typeparam name="T">返回的结果类型</typeparam>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.Exec(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            ($0表示instance，(可省略$0)；$1表示objects的第一个对象；$2表示objects的第二个对象....)
            </summary>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParser.ParseCore``1(System.Type,System.String,System.Type,System.Boolean,System.Type[],System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="T:Hallucination.Expressions.Helper.ExpressionParserCore`1">
            <summary>
            Lambda表达式的解析器核心类
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="F:Hallucination.Expressions.Helper.ExpressionParserCore`1._params">
            <summary>
            存放参数
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.Helper.ExpressionParserCore`1._operatorPriorityLevel">
            <summary>
            存放操作符的优先级
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.Helper.ExpressionParserCore`1._numberTypeLevel">
            <summary>
            存放数字类型的隐式转换级别
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.#ctor(System.Type,System.String,System.Type,System.Type[],System.Boolean)">
            <summary>
            构造Lambda表达式的解析器
            </summary>
            <param name="code">lambda表达式代码。如：m=>m.ToString()</param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.ToLambdaExpression">
            <summary>
            转换成LambdaExpression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.ReadExpression(System.Int32,System.String,System.Boolean@)">
            <summary>
            读取Expression。可能会引发递归。
            </summary>
            <param name="priorityLevel">当前操作的优先级</param>
            <param name="wrapStart">括号开始符(如果有)</param>
            <param name="isClosedWrap">是否遇到符号结束符</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.ParseNumber(System.String)">
            <summary>
            解析数字
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.AdjustNumberType(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            调整数值运算两边的类型
            (如一个int和一个double，则将int转换成double)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.ReadParams(System.String,System.Boolean)">
            <summary>
            读取方法调用中的参数
            </summary>
            <param name="priorityLevel">当前操作的优先级</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.GetBracketString(System.Boolean)">
            <summary>
            读取圆括号中的字符串
            </summary>
            <param name="hasReadPre">是否已经读取了前置括号</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.TryGetNextPriorityLevel">
            <summary>
            获取下一个操作的优先级。-1表示没有操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.GetOperatorLevel(System.String,System.Boolean)">
            <summary>
            获取操作符的优先级，越大优先级越高
            </summary>
            <param name="operatorSymbol">操作符</param>
            <param name="isBefore">是否前置操作符(一元)</param>
            <returns>优先级</returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.ReadType(System.String)">
            <summary>
            读类型
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.GetType(System.String)">
            <summary>
            根据类型名称获取类型对象
            </summary>
            <param name="typeName">类型名称。可以是简写：如int、string</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionParserCore`1.GetTypeCore(System.String)">
            <summary>
            根据类型名称获取类型的对象
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="P:Hallucination.Expressions.Helper.ExpressionParserCore`1.Namespaces">
            <summary>
            引入的命名空间集。
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ObjectDynamicExtension.E``1(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <typeparam name="T">返回的结果类型</typeparam>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ObjectDynamicExtension.E``1(System.Object,System.String,System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <typeparam name="T">返回的结果类型</typeparam>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ObjectDynamicExtension.E(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ObjectDynamicExtension.E(System.Object,System.String,System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Hallucination.Util.Collections.ISortedDictionary`2.ContainsKey(`0)">
            <summary>
            Test if the dictionary contains a certain key
            </summary>
            <param name="key">The key to tes.</param>
            <returns>True if this dictionary contains at least once of the key, false otherwise.</returns>
        </member>
        <member name="M:Hallucination.Util.Collections.ISortedDictionary`2.ContainsValue(`1)">
            <summary>
            Test if this dictionary contains a certain value
            </summary>
            <param name="value"></param>
            <returns>.</returns>
        </member>
        <member name="M:Hallucination.Util.Collections.ISortedDictionary`2.TryGet(`0,`1@)">
            <summary>
            Try to get the oldest in the values corresponding to the given key that are still in the dict
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns>.</returns>
        </member>
        <member name="M:Hallucination.Util.Collections.ISortedDictionary`2.TryRemove(`0,`1)">
            <summary>
            Try to remove the given pair of (key, val)
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns>.</returns>
        </member>
        <member name="M:Hallucination.Util.Collections.ISortedDictionary`2.ValueRange(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            If from is bigger than to, then the result will be in the reversed order
            </summary>
            <param name="from"></param>
            <param name="fromIncluded"></param>
            <param name="to"></param>
            <param name="toIncluded"></param>
            <returns>.</returns>
        </member>
        <member name="M:Hallucination.Util.Collections.ISortedDictionary`2.KeyRange(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            If from is bigger than to, then the result will be in the reversed order
            </summary>
            <param name="from"></param>
            <param name="fromIncluded"></param>
            <param name="to"></param>
            <param name="toIncluded"></param>
            <returns>.</returns>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.FirstKey">
            <summary>
            Get the smallest key
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.LastKey">
            <summary>
            Get the largest key
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.FirstValue">
            <summary>
            Get the value corresponding to the smallest key, does not mean the smallest value
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.LastValue">
            <summary>
            Get the value corresponding to the largest key, does not mean the largest value
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.MedianValue">
            <summary>
            Get the median value in the sorted key array
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.UniqueCount">
            <summary>
            Get the count of the unique keys
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.Count">
            <summary>
            Get the count of all keys
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.AllowDuplicates">
            <summary>
            Allow to insert duplicated key? even if their values are the same
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.IsEmpty">
            <summary>
            Is this dictionary empty
            </summary>
        </member>
        <member name="P:Hallucination.Util.Collections.ISortedDictionary`2.Comparator">
            <summary>
            Get the comparison used for comparing the keys
            </summary>
        </member>
        <member name="P:Lava.IO.TableReaderConfig.DelimitedString">
            <summary>
            Gets or Sets the string that used to separate items in each row.
            This property is ignored if Format property is not DelimitedText.
            </summary>
        </member>
        <member name="T:Lava.Visual.Animation">
            <summary>
            This class cannot be created by users, only can be generated by AnimationPlayer
            </summary>
        </member>
        <member name="F:Lava.Visual.Animation._state">
            <summary>
            back-end field of the Property "State" 
            </summary>
        </member>
        <member name="F:Lava.Visual.Animation._delay">
            <summary>
            back-end field of the Property "Delay" 
            </summary>
        </member>
        <member name="F:Lava.Visual.Animation._duration">
            <summary>
            back-end field of the Property "Duration" 
            </summary>
        </member>
        <member name="P:Lava.Visual.Animation.State">
            <summary>
            The animation state:
            Standby, Running, Pause, Stop
            </summary>
        </member>
        <member name="E:Lava.Visual.Animation.StateChanged">
            <summary>
            When the state of the movie changed,
            this event will be emitted.
            
            </summary>
        </member>
        <member name="P:Lava.Visual.Animation.Delay">
            <summary>
            The animation delay time.
            In milliseconds.
            </summary>
        </member>
        <member name="P:Lava.Visual.Animation.Duration">
            <summary>
            The animation duration time.
            In milliseconds.
            negative value represents the animation will keep running unless you stop it.
            </summary>
        </member>
        <member name="P:Lava.Visual.Animation.ElapsedTime">
            <summary>
            record the current time.
            the milliseconds passed since the animation run.
            </summary>
        </member>
        <member name="P:Lava.Visual.Animation.IsEndless">
            <summary>
            Endless animation means:
            the animation will keep running unless you stop it.
            
            You can set a negative value as Duration to represent a endless animation.
            </summary>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.Register(System.String,System.Int64,Lava.Visual.TickedHandler)">
            <summary>
            Registers an animation behavior to this player using the specified id. 
            </summary>
            <param name="id">The id.</param>
            <param name="durationInMilSec">The duration in mil sec, minus value means running forever.</param>
            <param name="tickedHandler">The ticked handler.</param>
            <returns>The information, which is wrapped into an object, related to the animation.</returns>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.Play(System.String,System.Int64,Lava.Visual.TickedHandler)">
            <summary>
            Registers an animation behavior to this player using the specified id.
            And plays it immediately.
            </summary>s
            <param name="id">The id.</param>
            <param name="durationInMilSec">The duration in mil sec, minus value means running forever.</param>
            <param name="tickedHandler">The ticked handler.</param>
            <returns>The information, which is wrapped into an object, related to the animation.</returns>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.ResetIfExist(System.String)">
            <summary>
            Resets this specific animation if it exists. This function will be actually called in the next tick.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.PlayIfExists(System.String)">
            <summary>
            Plays the given animation if it exists. This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.PlayIfExists(System.Int64,System.String)">
            <summary>
            Plays the given animation if it exists. And it is scheduled after the specific time.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="delayInMilSec">The delay in mil sec.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.RemoveIfExists(System.String)">
            <summary>
            Removes the given animation if it exists.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.PauseIfExists(System.String)">
            <summary>
            Pauses the given animation if it exists.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.PlayBackwardsIfExists(System.String)">
            <summary>
            Plays the given animation backwards if it exists.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.GetInfo(System.String)">
            <summary>
            Gets the information about the given animation id.
            </summary>
            <param name="id">The id.</param>
            <returns>The animation information, null if it does not exists.</returns>
        </member>
        <member name="M:Lava.Visual.IAnimationPlayer.Exists(System.String)">
            <summary>
            Checks if the specified animation is currently registered.
            </summary>
            <param name="id">The id.</param>
            <returns>True if exists, false otherwise.</returns>
        </member>
        <member name="P:Lava.Visual.IAnimationPlayer.Interval">
            <summary>
            Gets or sets the interval of this player, i.e., the time step between neighboring frames.
            </summary>
            <value>
            The interval.
            </value>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.Register(System.String,System.Int64,Lava.Visual.TickedHandler)">
            <summary>
            Registers an animation behavior to this player using the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="durationInMilSec">The duration in mil sec, minus value means running forever.</param>
            <param name="tickedHandler">The ticked handler.</param>
            <returns>
            The information, which is wrapped into an object, related to the animation.
            </returns>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.Play(System.Int64,System.Int64,Lava.Visual.TickedHandler)">
            <summary>
            Plays this animation immediately, and this animation is an onetime deal.
            It will be removed after it finishes.
            </summary>
            <param name="durationInMilSec">The duration in mil sec.</param>
            <param name="delayInMilSec">The delay in mil sec.</param>
            <param name="tickedHandler">The tick handler.</param>
            <returns>
            The information, which is wrapped into an object, related to the animation.
            </returns>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.Play(System.Int64,Lava.Visual.TickedHandler)">
            <summary>
            Plays this animation immediately, and this animation is an onetime deal. 
            It will be removed after it finishes.
            </summary>
            <param name="durationInMilSec">The duration in mil sec.</param>
            <param name="tickedHandler">The tick handler.</param>
            <returns>
            The information, which is wrapped into an object, related to the animation.
            </returns>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.PlayIfExists(System.Int64,System.String)">
            <summary>
            Plays the given animation if it exists. And it is scheduled after the specific time.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="delayInMilSec">The delay in mil sec.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.PlayIfExists(System.String)">
            <summary>
            Plays the given animation if it exists. This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.Play(System.String,System.Int64,Lava.Visual.TickedHandler)">
            <summary>
            Registers an animation behavior to this player using the specified id.
            And plays it immediately.
            </summary>
            <param name="id">The id.</param>
            <param name="durationInMilSec">The duration in mil sec, minus value means running forever.</param>
            <param name="tickedHandler">The ticked handler.</param>
            <returns>
            The information, which is wrapped into an object, related to the animation.
            </returns>
            s
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.ResetIfExist(System.String)">
            <summary>
            Resets this specific animation if it exists. This function will be actually called in the next tick.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.RemoveIfExists(System.String)">
            <summary>
            Removes the given animation if it exists.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.PauseIfExists(System.String)">
            <summary>
            Pauses the given animation if it exists.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.PlayBackwardsIfExists(System.String)">
            <summary>
            Plays the given animation backwards if it exists.
            This function will be actually called in the next tick coming.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.GetInfo(System.String)">
            <summary>
            Gets the information about the given animation id.
            </summary>
            <param name="id">The id.</param>
            <returns>
            The animation information, null if it does not exists.
            </returns>
        </member>
        <member name="M:Lava.Visual.AnimationPlayer.Exists(System.String)">
            <summary>
            Checks if the specified animation is currently registered.
            </summary>
            <param name="id">The id.</param>
            <returns>
            True if exists, false otherwise.
            </returns>
        </member>
        <member name="P:Lava.Visual.AnimationPlayer.Interval">
            <summary>
            Gets or sets the interval of this player, i.e., the time step between neighboring frames.
            </summary>
            <value>
            The interval.
            </value>
        </member>
        <member name="T:Lava.Visual.TickedHandler">
            <summary>
             Represents the method that defines the behavior of an animation.
            </summary>
            <param name="progress">The progress, which is between 0 and 1 (both included).</param>
            <param name="step">The actual time step (in millsec) since the last tick.</param>
            <returns>False if you want to stop the animation earlier than its due time, true if everything is ok.</returns>
        </member>
        <member name="T:Lava.Visual.StateEventHandler">
            <summary>
            The delegate of animation/movie state changed event
            </summary>
            <param name="sender">The animation or movie who sent the even.</param>
            <param name="pre">The previous stat.</param>
        </member>
        <member name="T:Lava.Visual.AnimationConfig">
            <summary>
            Contains some animation default basic parameters
            </summary>
        </member>
        <member name="F:Lava.Visual.AnimationConfig.DefaultInterval">
            <summary>
            How long between timer ticks? default 20ms
            </summary>
        </member>
        <member name="F:Lava.Visual.AnimationConfig.DefaultAnimationDuration">
            <summary>
            Default animation duration. 1000ms.
            </summary>
        </member>
        <member name="T:Lava.Visual.AnimationState">
            <summary>
            Represent the state of Animation and Movie
            </summary>
        </member>
        <member name="F:Lava.Visual.AnimationState.Running">
            <summary>
            The animation or movie is running
            </summary>
        </member>
        <member name="F:Lava.Visual.AnimationState.Stop">
            <summary>
            The animation or movie is stopped
            </summary>
        </member>
        <member name="F:Lava.Visual.AnimationState.Pause">
            <summary>
            The animation or movie is paused
            </summary>
        </member>
        <member name="T:Lava.Visual.AnimationStateMethods">
            <summary>
            Some help method on AnimationState.
            </summary>
        </member>
        <member name="M:Lava.Visual.AnimationStateMethods.IsRunning(Lava.Visual.AnimationState)">
            <summary>
            Is the state Running?
            </summary>
            <param name="state">The stat.</param>
            <returns>is it Running.</returns>
        </member>
        <member name="M:Lava.Visual.AnimationStateMethods.IsStop(Lava.Visual.AnimationState)">
            <summary>
            Is the state Stop?
            </summary>
            <param name="state">The stat.</param>
            <returns>is it Stop.</returns>
        </member>
        <member name="M:Lava.Visual.AnimationStateMethods.IsPause(Lava.Visual.AnimationState)">
            <summary>
            Is the state Pause?
            </summary>
            <param name="state">The stat.</param>
            <returns>is it Pause.</returns>
        </member>
        <member name="T:Lava.Visual.AbstractLayout">
            <summary>
            Implement basic layout function.
            If you want to design a layout which run once,
            you should inherit your layout class from this.
            
            </summary>
        </member>
        <member name="T:Lava.Visual.ILayout">
            <summary>
            Layout algorithm manage the elements location to make the view more easily to understand.
            
            Layout is a kind of activity.
            </summary>
        </member>
        <member name="M:Lava.Visual.ILayout.Layout">
            <summary>
            start to layout
            </summary>
            <returns>is success.</returns>
        </member>
        <member name="P:Lava.Visual.ILayout.Anchor">
            <summary>
            The layout anchor at which to center or root the layout. How this
            point is used (if it is used at all) is dependent on the particular
            Layout implementation.
            </summary>
        </member>
        <member name="P:Lava.Visual.ILayout.Bounds">
            <summary>
            The Layout Bounds helps layout algorithm layout element on the display.
            How this Bounds is used (if it is used at all) is dependent on the particular
            Layout implementation.
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractLayout.Layout">
            <summary>
            start to layout
            Implement your layout by override the method
            </summary>
            <returns>is success.</returns>
        </member>
        <member name="P:Lava.Visual.AbstractLayout.Anchor">
            <summary>
            The layout anchor at which to center or root the layout. How this
            point is used (if it is used at all) is dependent on the particular
            Layout implementation.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractLayout.Bounds">
            <summary>
            The Layout Bounds helps layout algorithm layout element on the display.
            How this Bounds is used (if it is used at all) is dependent on the particular
            Layout implementation.
            </summary>
        </member>
        <member name="T:Lava.Visual.IControl">
            <summary>
            A Control contains a series event handler to do one thing.
            This interface defined
            </summary>
        </member>
        <member name="P:Lava.Visual.IControl.Filter">
            <summary>
            Gets or sets the rule to specify what items this control can control.
            </summary>
        </member>
        <member name="P:Lava.Visual.IControl.Enabled">
            <summary>
            Enable or disable this control.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Visual.IControl.Display">
            <summary>
            Gets or sets the display that this control is binded to. 
            Set the value to make the control work on that display.
            When the value is null, remove the control from the display.
            </summary>
        </member>
        <member name="M:Lava.Visual.FreeControl.BindDisplay">
            <summary>
            Binds the display.
            </summary>
            <returns>True if the binding is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Visual.FreeControl.UnbindDisplay">
            <summary>
            Unbinds the display.
            </summary>
            <returns>True if the unbinding is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Visual.FreeControl.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.Filter">
            <summary>
            Gets or sets the rule to specify what items this control can control.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatEnter">
            <summary>
            Registers RatEnter event handler for moving the cursor into a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatLeave">
            <summary>
            Registers RatLeave event handler for moving the cursor out of a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatLeftButtonDown">
            <summary>
            Registers RatLeftButtonDown event handler for left-button-down on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatLeftButtonUp">
            <summary>
            Registers RatLeftButtonUp event handler for left-button-up on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatRightButtonDown">
            <summary>
            Registers RatRightButtonDown event handler for right-button-down on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatRightButtonUp">
            <summary>
            Registers RatRightButtonUp event handler for right-button-up on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatClick">
            <summary>
            Registers RatClick event handler for clicking on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatDoubleClick">
            <summary>
            Register RatDoubleClick event handler for double-clicking on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.RatMove">
            <summary>
            Register RatMove event handler for moving the cursor.
            </summary>
        </member>
        <member name="P:Lava.Visual.FreeControl.Enabled">
            <summary>
            Enable or disable this control.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Visual.FreeControl.Display">
            <summary>
            Gets or sets the display that this control is binded to. 
            Set the value to make the control work on that display.
            When the value is null, remove the control from the display.
            </summary>
        </member>
        <member name="T:Lava.Data.TableVisualItem">
            <summary>
            The basic visual item in visual table
            </summary>
        </member>
        <member name="T:Lava.Data.TableItem">
            <summary>
            Default item implement for tables.
            
            </summary>
        </member>
        <member name="T:Lava.Data.IItem">
            <summary>
            This is an avatar for representing a row in a table. Every instance remembers a row number and a back-end table.
            And every operation is routed to that table using the row number stored in the instance. 
            </summary>
        </member>
        <member name="M:Lava.Data.IItem.Invalidate">
            <summary>
            Sets this item to be invalid.
            </summary>
        </member>
        <member name="M:Lava.Data.IItem.GetColumnName(System.Int32)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The column name, null if this instance does not have the column index.</returns>
        </member>
        <member name="M:Lava.Data.IItem.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The column index. -1 if this instance does not contain it.</returns>
        </member>
        <member name="M:Lava.Data.IItem.GetColumnType(System.String)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The type of values that are stored in the column, null if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.GetColumnType(System.Int32)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The type of values that are stored in the column, null if does not exist.</returns>
        </member>
        <member name="M:Lava.Data.IItem.IsValidColumn(System.String)">
            <summary>
            Determines whether this column name is a valid column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>true</c> if the column name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.IsValidColumn(System.Int32)">
            <summary>
            Determines whether this column index is a valid column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>true</c> if column index is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.CanGet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.CanGet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.CanSet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.CanSet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.Get(System.Int32)">
            <summary>
            Gets the value from the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <returns>The value stored in that cell.</returns>
        </member>
        <member name="M:Lava.Data.IItem.Get(System.String)">
            <summary>
            Gets the value from the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The value stored in that cell.</returns>
        </member>
        <member name="M:Lava.Data.IItem.Get``1(System.Int32)">
            <summary>
            Gets the value from the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.Get``1(System.String)">
            <summary>
            Gets the value from the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.IItem.Set``1(System.Int32,``0)">
            <summary>
            Sets the value to the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.IItem.Set``1(System.String,``0)">
            <summary>
            Sets the value to the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.IItem.Set(System.Int32,System.Object)">
            <summary>
            Sets the value to the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.IItem.Set(System.String,System.Object)">
            <summary>
            Sets the value to the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.IItem.GetDefaultValue``1(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="M:Lava.Data.IItem.GetDefaultValue``1(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="M:Lava.Data.IItem.GetDefaultValue(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="M:Lava.Data.IItem.GetDefaultValue(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="P:Lava.Data.IItem.Table">
            <summary>
            Gets the table behind this item.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Lava.Data.IItem.Row">
            <summary>
            Gets the row number for this item in its back-end table. -1 if there is no back-end table.
            </summary>
            <value>
            The row.
            </value>
        </member>
        <member name="P:Lava.Data.IItem.IsValid">
            <summary>
            Indicates if this item is valid. Trying to get or set values on an invalid item will trigger
            a runtime exception.
            </summary>
        </member>
        <member name="P:Lava.Data.IItem.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="M:Lava.Data.TableItem.#ctor(Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.TableItem"/> class.
            </summary>
            <param name="table">The back-end table.</param>
        </member>
        <member name="M:Lava.Data.TableItem.Invalidate">
            <summary>
            Sets this item to be invalid.
            </summary>
        </member>
        <member name="M:Lava.Data.TableItem.GetColumnName(System.Int32)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column name, null if this instance does not have the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The column index. -1 if this instance does not contain it.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.GetColumnType(System.String)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The type of values that are stored in the column, null if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.GetColumnType(System.Int32)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The type of values that are stored in the column, null if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.IsValidColumn(System.String)">
            <summary>
            Determines whether this column name is a valid column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>True</c> if the column name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.IsValidColumn(System.Int32)">
            <summary>
            Determines whether this column index is a valid column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>True</c> if column index is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.CanGet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.CanGet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.CanSet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.CanSet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.Get``1(System.Int32)">
            <summary>
            Gets the value from the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.Get(System.Int32)">
            <summary>
            Gets the value from the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.Get``1(System.String)">
            <summary>
            Gets the value from the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.Get(System.String)">
            <summary>
            Gets the value from the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.Set``1(System.Int32,``0)">
            <summary>
            Sets the value to the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.TableItem.Set``1(System.String,``0)">
            <summary>
            Sets the value to the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.TableItem.Set(System.Int32,System.Object)">
            <summary>
            Sets the value to the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.TableItem.Set(System.String,System.Object)">
            <summary>
            Sets the value to the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Lava.Data.TableItem.GetDefaultValue``1(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.GetDefaultValue``1(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.GetDefaultValue(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="M:Lava.Data.TableItem.GetDefaultValue(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="P:Lava.Data.TableItem.Table">
            <summary>
            Gets the table behind this item.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Lava.Data.TableItem.Row">
            <summary>
            Gets the row number for this item in its back-end table. -1 if there is no back-end table.
            </summary>
            <value>
            The row.
            </value>
        </member>
        <member name="P:Lava.Data.TableItem.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="P:Lava.Data.TableItem.IsValid">
            <summary>
            Indicates if this item is valid. Trying to get or set values on an invalid item will trigger
            a runtime exception.
            </summary>
        </member>
        <member name="T:Lava.Data.IVisualItem">
            <summary>
            visual item is the basic visual abstraction record.
            </summary>
        </member>
        <member name="M:Lava.Data.IVisualItem.Repaint(System.String)">
            <summary>
            Repaint its graphics element when the style changed
            
            This API update the assigned style to the look and call repaint
            </summary>
            <param name="changedStyle">the style field name (column name)</param>
        </member>
        <member name="M:Lava.Data.IVisualItem.Repaint">
            <summary>
            Repaint its graphics element anyway.
            This API update all styles to the look and call repaint.
            </summary>
        </member>
        <member name="M:Lava.Data.IVisualItem.IsInGroup(System.String)">
            <summary>
            Test if the visual item is in the group
            </summary>
            <param name="group">the group</param>
            <returns>is it in the group</returns>
        </member>
        <member name="P:Lava.Data.IVisualItem.Visualization">
            <summary>
            the back-end Visualization manager
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Group">
            <summary>
            the group name of the visual item
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Display">
            <summary>
            the back-end display
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Look">
            <summary>
            null if not painted.
            ATTENTION: very dangerous to handle this property,
            never operate it unless you are a very advanced user.
            
            Default: null
            Column Name: Styles.Look
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Render">
            <summary>
            Define the render for the visual item. 
            Setup by user, Setup render to first draw. 
            A row without render will not be drawn on display. 
            Change render can change data looks (shapes)
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: null
            Column Name: Styles.Render
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.ZIndex">
            <summary>
            Stores the zindex on the layer of every Item (row).
            
            Default: -1 (before it is rendered)
            Column Name: Styles.ZIndex
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Layer">
            <summary>
            Define the layer of every Item (row).
            
            If the column is not setup,
            you will read (get) the default value ($DefaultLayer of the table),
            and write (set) will be ignored.
             
            Default: 0
            Column Name: Styles.Layer
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Visible">
            <summary>
            Visible Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: true
            Column Name: Styles.Visible
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.ListenMouse">
            <summary>
            ListenMouse Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Can it be hit-tested.
            Default: true
            Column Name: Styles.ListenMouse
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Hover">
            <summary>
            Hover Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: false
            Column Name: Styles.Hover
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Fixed">
            <summary>
            Fixed Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: false
            Column Name: Styles.Fixed
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.X">
            <summary>
            X Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.X
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Y">
            <summary>
            Y Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.Y
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.X1">
            <summary>
            X1 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.X1
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Y1">
            <summary>
            Y1 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.Y1
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.X2">
            <summary>
            X2 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.X2
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Y2">
            <summary>
            Y2 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.Y2
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Text">
            <summary>
            Text Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: ""
            Column Name: Styles.Text
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Width">
            <summary>
            Width Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 10.0
            Column Name: Styles.Width
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Height">
            <summary>
            Height Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 10.0
            Column Name: Styles.Height
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Opacity">
            <summary>
            Opacity Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 1.0
            Column Name: Styles.Opacity
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.FillBrush">
            <summary>
            FillBrush Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: #FF4682B4
            Column Name: Styles.FillBrush
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.StrokeBrush">
            <summary>
            StrokeBrush Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: #FFFF6347
            Column Name: Styles.StrokeBrush
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.StrokeWidth">
            <summary>
            StrokeWidth Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 1.0
            Column Name: Styles.StrokeWidth
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.Path">
            <summary>
            Path Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: ""
            Column Name: Styles.Path
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItem.VisualTable">
            <summary>
            Helper property: Should be the same as "Table as IVisualTable".
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatEnter">
            <summary>
            Occurs when mouse enter a visual item
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatLeave">
            <summary>
            Occurs when mouse leave a visual item
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatLeftButtonDown">
            <summary>
            Occurs when mouse left button down
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatLeftButtonUp">
            <summary>
            Occurs when mouse left button up
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatRightButtonDown">
            <summary>
            Occurs when mouse right button down
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatRightButtonUp">
            <summary>
            Occurs when mouse right button up
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatClick">
            <summary>
            Occurs when mouse click
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.IVisualItem.RatDoubleClick">
            <summary>
            Occurs when mouse double click
            only when hit visual item
            </summary>
        </member>
        <member name="M:Lava.Data.TableVisualItem.#ctor(Lava.Data.IVisualTable)">
            <summary>
            Create a visual item from the table.
            Managed by item manager of the visual table
            </summary>
            <param name="table">The visual tabl.</param>
        </member>
        <member name="M:Lava.Data.TableVisualItem.Repaint(System.String)">
            <summary>
            Repaint its graphics element when the style changed
            
            This API update the assigned style to the look and call repaint
            </summary>
            <param name="changedField">The style field name (column name.</param>
        </member>
        <member name="M:Lava.Data.TableVisualItem.Repaint">
            <summary>
            Repaint its graphics element anyway.
            This API update all styles to the look and call repaint.
            </summary>
        </member>
        <member name="M:Lava.Data.TableVisualItem.IsInGroup(System.String)">
            <summary>
            Test if the visual item is in the group
            </summary>
            <param name="group">The grou.</param>
            <returns>is it in the group.</returns>
        </member>
        <member name="P:Lava.Data.TableVisualItem.VisualTable">
            <summary>
            Back-end visual table
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Visualization">
            <summary>
            the back-end Visualization manager
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Group">
            <summary>
            the group name of the visual item
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Display">
            <summary>
            the back-end display
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Render">
            <summary>
            Define the render for the visual item. 
            Setup by user, Setup render to first draw. 
            A row without render will not be drawn on display. 
            Change render can change data looks (shapes)
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: null
            Column Name: Styles.Render
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.ZIndex">
            <summary>
            Stores the z-index on the layer of every Item (row).
            
            Default: -1 (before it is rendered)
            Column Name: Styles.ZIndex
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Layer">
            <summary>
            Define the layer of every Item (row).
            
            If the column is not setup,
            you will read (get) the default value ($DefaultLayer of the table),
            and write (set) will be ignored.
             
            Default: 0
            Column Name: Styles.Layer
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Look">
            <summary>
            null if not painted.
            ATTENTION: very dangerous to handle this property,
            never operate it unless you are a very advanced user.
            
            Default: null
            Column Name: Styles.Look
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Visible">
            <summary>
            Visible Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: true
            Column Name: Styles.Visible
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.ListenMouse">
            <summary>
            ListenMouse Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Can it be hit-tested.
            Default: true
            Column Name: Styles.ListenMouse
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Text">
            <summary>
            Text Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: ""
            Column Name: Styles.Text
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.X1">
            <summary>
            X1 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.X1
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Y1">
            <summary>
            Y1 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.Y1
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.X2">
            <summary>
            X2 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.X2
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Y2">
            <summary>
            Y2 Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.Y2
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.X">
            <summary>
            X Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.X
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Y">
            <summary>
            Y Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 0.0
            Column Name: Styles.Y
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Opacity">
            <summary>
            Opacity Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 1.0
            Column Name: Styles.Opacity
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.FillBrush">
            <summary>
            FillBrush Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: #FF4682B4
            Column Name: Styles.FillBrush
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.StrokeBrush">
            <summary>
            StrokeBrush Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: #FFFF6347
            Column Name: Styles.StrokeBrush
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.StrokeWidth">
            <summary>
            StrokeWidth Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 1.0
            Column Name: Styles.StrokeWidth
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Hover">
            <summary>
            Hover Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: false
            Column Name: Styles.Hover
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Fixed">
            <summary>
            Fixed Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: false
            Column Name: Styles.Fixed
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Width">
            <summary>
            Width Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 10.0
            Column Name: Styles.Width
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Height">
            <summary>
            Height Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: 10.0
            Column Name: Styles.Height
            </summary>
        </member>
        <member name="P:Lava.Data.TableVisualItem.Path">
            <summary>
            Path Style.
            
            If the column is not setup,
            you will read (get) the default value,
            and write (set) will be ignored.
            
            Default: ""
            Column Name: Styles.Path
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatEnter">
            <summary>
            Occurs when mouse enter a visual item
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatLeave">
            <summary>
            Occurs when mouse leave a visual item
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatLeftButtonDown">
            <summary>
            Occurs when mouse left button down
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatLeftButtonUp">
            <summary>
            Occurs when mouse left button up
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatRightButtonDown">
            <summary>
            Occurs when mouse right button down
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatRightButtonUp">
            <summary>
            Occurs when mouse right button up
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatClick">
            <summary>
            Occurs when mouse click
            only when hit visual item
            </summary>
        </member>
        <member name="E:Lava.Data.TableVisualItem.RatDoubleClick">
            <summary>
            Occurs when mouse double click
            only when hit visual item
            </summary>
        </member>
        <member name="T:Lava.Visual.Display">
            <summary>
            Display is the canvas for you to draw the visual items on it.
            
            </summary>
            <summary>
            Display is the canvas for you to draw the visual items on it.
            The best way to use it is that use it in xaml design file.
            
            WPF functions
            
            </summary>
            <summary>
            Display is the canvas for you to draw the visual items on it.
            
            </summary>
        </member>
        <member name="T:Lava.Visual.IDisplay">
            <summary>
            Display is the canvas for you to draw the visual items on it.
            
            </summary>
        </member>
        <member name="M:Lava.Visual.IDisplay.AddControl(Lava.Visual.IControl)">
            <summary>
            Adds a control to the display. Handlers in the control will be notified at the correct moments.
            </summary>
            <param name="control">The control.</param>
            <returns>True if the attachment is successful.</returns>
        </member>
        <member name="M:Lava.Visual.IDisplay.RemoveControl(Lava.Visual.IControl)">
            <summary>
            Removes a control from the display. Handlers in the control will not be used at all.
            </summary>
            <param name="control">The control.</param>
            <returns>True if the removal is successful.</returns>
        </member>
        <member name="M:Lava.Visual.IDisplay.RemoveAllControls">
            <summary>
            Removes all controls from this display.
            </summary>
        </member>
        <member name="P:Lava.Visual.IDisplay.Visualization">
            <summary>
            Gets or sets the visualization.
            </summary>
            <value>
            The visualization.
            </value>
        </member>
        <member name="P:Lava.Visual.IDisplay.Controls">
            <summary>
            Gets all the controls.
            </summary>
            <value>
            The controls.
            </value>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatEnter">
            <summary>
            Occurs when the mouse enters a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatLeave">
            <summary>
            Occurs when the mouse leaves a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatLeftButtonDown">
            <summary>
            Occurs when the mouse has a left-button-down action on a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatLeftButtonUp">
            <summary>
            Occurs when the mouse has a left-button-up action on a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatRightButtonDown">
            <summary>
            Occurs when the mouse has a right-button-down action on a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatRightButtonUp">
            <summary>
            Occurs when the mouse has a right-button-up action on a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatClick">
            <summary>
            Occurs when the mouse clicks on a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatDoubleClick">
            <summary>
            Occurs when the mouse double-clicks on a visual item.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatMove">
            <summary>
            Occurs when the mouse moves on the display, no matter it is on a visual item or not.
            </summary>
        </member>
        <member name="E:Lava.Visual.IDisplay.RatWheelChange">
            <summary>
            Occurs when the mouse's wheel change.
            </summary>
        </member>
        <member name="F:Lava.Visual.Display._layerCollections">
            <summary>
            layer collections.
            </summary>
        </member>
        <member name="F:Lava.Visual.Display._topVisuals">
            <summary>
            item collection of top layer
            </summary>
        </member>
        <member name="F:Lava.Visual.Display._bottomVisuals">
            <summary>
            item collection of bottom layer
            </summary>
        </member>
        <member name="M:Lava.Visual.Display.#ctor">
            <summary>
            Create a display
            
            The best way to use a display is in xaml design file
            </summary>
        </member>
        <member name="M:Lava.Visual.Display.HoldToSuppressUILookHandler(System.Windows.Input.Key)">
            <summary>
            Bind the suppressing behavior to a key up/down event. Hold the given key
            to disable the event handler of the UIElement itself. Release the given 
            key to make enable it. This is useful when you want to drag some UILooks
            while holding down a key, but want to interact with them when the key is
            released.
            </summary>
            <param name="key"></param>
        </member>
        <member name="F:Lava.Visual.Display._visualChildrenCount">
            <summary>
            cache visual child count for speed up
            </summary>
        </member>
        <member name="M:Lava.Visual.Display.GetVisualChild(System.Int32)">
            <summary>
            get visual child at assigned index
            key override
            </summary>
            <param name="index">The child inde.</param>
            <returns>The visual.</returns>
        </member>
        <member name="M:Lava.Visual.Display.MyAdd(Lava.Visual.ILook,System.Int32)">
            <summary>
            add a look to assigned layer
            </summary>
            <param name="look">The loo.</param>
            <param name="layerIdx">The laye.</param>
            <returns>is success.</returns>
        </member>
        <member name="M:Lava.Visual.Display.EnsureLayer(System.Int32)">
            <summary>
            prepare the layer first
            </summary>
            <param name="layerIdx"></param>
        </member>
        <member name="M:Lava.Visual.Display.MyEmptySlot(System.Int32,System.Int32)">
            <summary>
            Erase the look at the assigned layer and zidx
            </summary>
            <param name="layerIdx">The laye.</param>
            <param name="zidx">The ZInde.</param>
        </member>
        <member name="M:Lava.Visual.Display.GetCollectionAtLayer(System.Int32)">
            <summary>
            get the visual collection of assigned layer
            </summary>
            <param name="layerIdx">The laye.</param>
            <returns>The visual collection.</returns>
        </member>
        <member name="M:Lava.Visual.Display.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            act when mouse move.
            Use to implement Rat move/enter/leave events
            
            do hit test
            </summary>
            <param name="e">routed MouseEventArg.</param>
        </member>
        <member name="M:Lava.Visual.Display.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            act when right button up
            use to implement rat right button up event
            
            do hit test
            </summary>
            <param name="e">routed MouseButtonEventArg.</param>
        </member>
        <member name="M:Lava.Visual.Display.FindLook(System.Windows.DependencyObject)">
            <summary>
            Given a object in a visual tree, find the backend ILook. When the ILook is implemented as AbstractLook,
            it is directly what the obj will be. However, when the ILook is implemented as UILook, then you may get
            the hit object to be a child or a grandchild of the UILook, so you need to track back the tree to find
            the correct ILook object.
            </summary>
            <param name="obj">The object in the VisualTree found by hit testin.</param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Visual.Display.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            act when right button down
            use to implement rat right button down event
            
            do hit test
            </summary>
            <param name="e">routed MouseButtonEventArg.</param>
        </member>
        <member name="M:Lava.Visual.Display.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            act when right button up
            use to implement rat left button up, click, double click events
            
            do hit test
            </summary>
            <param name="e">routed MouseButtonEventArg.</param>
        </member>
        <member name="M:Lava.Visual.Display.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            act when left button down.
            use to implement rat left button down event.
            
            do hit test
            </summary>
            <param name="e">routed MouseButtonEventArg.</param>
        </member>
        <member name="M:Lava.Visual.Display.Add(Lava.Visual.ILook,System.Int32)">
            <summary>
            Adds the specified look to the specific layer.
            </summary>
            <param name="look">The look.</param>
            <param name="layer">The layer.</param>
            <returns>The z-index of the look in that layer.</returns>
        </member>
        <member name="M:Lava.Visual.Display.Replace(Lava.Visual.ILook,System.Int32,System.Int32)">
            <summary>
            Replace the look at the layerBase+zidx with the new one.
            </summary>
            <param name="look">The new look.</param>
            <param name="layer">The layer.</param>
            <param name="zidx">The z-index.</param>
            <returns>True if the replacement is successful.</returns>
        </member>
        <member name="M:Lava.Visual.Display.EmptySlot(System.Int32,System.Int32)">
            <summary>
            Erase the child slot at the layerBase+zidx. The slot is open
            but not removed, so it can be used again. For example, call
            Replace function.
            </summary>
            <param name="layer">The layer.</param>
            <param name="zidx">The z-index.</param>
        </member>
        <member name="M:Lava.Visual.Display.AddControl(Lava.Visual.IControl)">
            <summary>
            Adds a control to the display. Handlers in the control will be notified at the correct moments.
            </summary>
            <param name="control">The control.</param>
            <returns>
            True if the attachment is successful.
            </returns>
        </member>
        <member name="M:Lava.Visual.Display.RemoveControl(Lava.Visual.IControl)">
            <summary>
            Removes a control from the display. Handlers in the control will not be used at all.
            </summary>
            <param name="control">The control.</param>
            <returns>
            True if the removal is successful.
            </returns>
        </member>
        <member name="M:Lava.Visual.Display.RemoveAllControls">
            <summary>
            Removes all controls from this display.
            </summary>
        </member>
        <member name="P:Lava.Visual.Display.SuppressUILookHandler">
            <summary>
            We have a special Look called UILook, which shows standard framework elements as apperances for visual items.
            However, those framework elements usually handles their mouse/keyboard events. those event behaviors are NOT
            compatible with Lava events. So this property is used to control the switch. If this property is true, 
            the displayed framework elements will lose some behaviors. For example, checkbox cannot be checked directly,
            but it can be dragged using Lava events, if you want. On the other hand, if this property is false, the 
            displayed framework elements will work as it is. But you will lose some Lava behaviors, such as Dragging.
            </summary>
        </member>
        <member name="P:Lava.Visual.Display.VisualChildrenCount">
            <summary>
            visual child count
            key override
            </summary>
        </member>
        <member name="P:Lava.Visual.Display.HitTestBehavior">
            <summary>
            hit test behavior. implement IsHitAll feature
            </summary>
        </member>
        <member name="P:Lava.Visual.Display.Visualization">
            <summary>
            Gets or sets the visualization.
            </summary>
            <value>
            The visualization.
            </value>
            <exception cref="T:Lava.Exceptions.IllegalStateException">
            please add this display to a visualization first.
            or
            this display has been assigned to a visualization before
            </exception>
        </member>
        <member name="P:Lava.Visual.Display.IsHitThrough">
            <summary>
            whether the mouse event will emit to all element at z-order levels
            </summary>
        </member>
        <member name="P:Lava.Visual.Display.Controls">
            <summary>
            Gets all the controls.
            </summary>
            <value>
            The controls.
            </value>
        </member>
        <member name="T:Lava.Config">
            <summary>
            Some constant value in Lava Config.
            For example Node Key name in Graph, Visual Style Column name prefix, ...
            </summary>
        </member>
        <member name="F:Lava.Config.ENABLE_LAVA_ASSERTION">
            <summary>
            When the library is compiled in Debug mode, turn this flag on will 
            enable Assert functions in Lava.Util.Debug class. 
            However, if the library is already in Release mode, this flag has no use at all.
            </summary>
        </member>
        <member name="F:Lava.Config.GROUP_DELIMITER">
            <summary>
            Sub-group name delimiter, the default value is "."
            
            e.g. 
            We have a graph store in Visualizaion named "g", 
            Then its node table stored in Visualizaion named "g.Nodes".
            </summary>
        </member>
        <member name="F:Lava.Config._propertiesConfig">
            <summary>
            The properties object stored Lava configure items
            </summary>
        </member>
        <member name="M:Lava.Config.Get(System.String,System.String)">
            <summary>
            Get a Lava Configure item.
            If the item does NOT exist, return the {defValue}
            </summary>
            <param name="field">configure item field(name.</param>
            <param name="defValue">default value, when the request field NOT exist, return this.</param>
            <returns>The configure item's value.</returns>
        </member>
        <member name="M:Lava.Config.Get(System.String)">
            <summary>
            Get a Lava Configure item.
            If the item does NOT exist, return null 
            </summary>
            <param name="field">configure item field(name.</param>
            <returns>The configure item's value.</returns>
        </member>
        <member name="M:Lava.Config.Set(System.String,System.String)">
            <summary>
            Get a Lava Configure item.
            If the item does NOT exist, return null 
            </summary>
            <param name="field">configure item field(name.</param>
            <param name="value">The configure field valu.</param>
        </member>
        <member name="M:Lava.Config.Merge(Lava.Util.Properties)">
            <summary>
            Merge another Properties configures.
            The old items will be override.
            </summary>
            <param name="customConfig">another Properties configure.</param>
        </member>
        <member name="M:Lava.Config.#cctor">
            <summary>
            In silverlight, it's hard to read file.
            </summary>
        </member>
        <member name="M:Lava.Config.LoadDefaults">
            <summary>
            Load default compiled-in Lava configure items.
            </summary>
        </member>
        <member name="P:Lava.Config.Names">
            <summary>
            All configure property names.
            </summary>
        </member>
        <member name="T:Lava.Visual.AbstractRender">
            <summary>
            Implement basic functions in a render
            
            Render is Visual Mapping between Visual Abstraction in Visual Table and Real Look drawn on Display.
            A Render decide two rules:
            1. What Look should be create. LineLook, EllipseLook or some others. By override CreateLook method.
            2. How to map styles in visual table to styles of Looks. It is defined in StyleUpdaters.
            
            If you want to design a your own render, you should inherit from this abstract class.
            
            </summary>
        </member>
        <member name="T:Lava.Visual.IRender">
            <summary>
            Render is Visual Mapping between Visual Abstraction in Visual Table and Real Look drawn on Display.
            A Render decide two rules:
            1. What Look should be create. LineLook, EllipseLook or some others. By override CreateLook method.
            2. How to map styles in visual table to styles of Looks. It is defined in StyleUpdaters.
            
            </summary>
        </member>
        <member name="M:Lava.Visual.IRender.Repaint(Lava.Visual.ILook,System.String)">
            <summary>
            Repaint visual item when the style field changed
            </summary>
            <param name="vi">The visual ite.</param>
            <param name="changedField">The changed style fiel.</param>
        </member>
        <member name="M:Lava.Visual.IRender.CreateLook(Lava.Data.IVisualItem)">
            <summary>
            Create a look for the visual item
            </summary>
            <param name="vi">The visual ite.</param>
            <returns>The look.</returns>
        </member>
        <member name="M:Lava.Visual.AbstractRender.CreateLook(Lava.Data.IVisualItem)">
            <summary>
            Key method. Create the look for the visual item
            </summary>
            <param name="vi">The visual ite.</param>
            <returns>The look.</returns>
        </member>
        <member name="M:Lava.Visual.AbstractRender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.AbstractRender"/> class.
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractRender.Repaint(Lava.Visual.ILook,System.String)">
            <summary>
            Repaints visual item when the style field changed.
            </summary>
            <param name="look">The look.</param>
            <param name="changedStyle">The changed style field, null means all fields are updated.</param>
        </member>
        <member name="M:Lava.Visual.AbstractRender.UpdateAllStyles(Lava.Visual.ILook)">
            <summary>
            Sometimes, we should update all styles.
            </summary>
            <param name="look">The look.</param>
        </member>
        <member name="P:Lava.Visual.AbstractRender.OverrideLookRepainter">
            <summary>
            Gets or sets the behavior which will overwrite the default one. If the this value is set, then
            this abstract render will call this function and totally ignore the default one.
            </summary>
            <value>
            The overriding customized repaint action.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractRender.StyleUpdaters">
            <summary>
            StyleUpdaters defines the behaviors to test if this render should respond to the changed field in the visual item. How and how it should respond it it.
            The key is style name (column name) while the value is updater function.
            If the changed field is in the keys, then the render should take the related action.
            The action will do something to the related AbstractLook, and return a bool value indicating that if after the action, the ILook.Paint() function should be called or not.
            
            It is complicated, please refer to the related chapter in the tutorial.
            </summary>
        </member>
        <member name="M:Lava.Util.GraphicsExtensions.Contains(System.Windows.Rect,Lava.Visual.IPoint)">
            <summary>
            Determines whether the rect contains the specific point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="point">The point.</param>
            <returns>
              <c>True</c> if it contains (on the borders does not count); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Lava.Util.GeometryLib">
            <summary>
            Library that contains geometry-related utility functions.
            </summary>
        </member>
        <member name="F:Lava.Util.GeometryLib.NO_INTERSECTION">
            <summary>
            Indication that no intersection between shapes.
            </summary>
        </member>
        <member name="F:Lava.Util.GeometryLib.COINCIDENT">
            <summary>
            Indication that two shapes coincident.
            </summary>
        </member>
        <member name="F:Lava.Util.GeometryLib.PARALLEL">
            <summary>
            Indication that two shapes parallel.
            </summary>
        </member>
        <member name="M:Lava.Util.GeometryLib.Point2Double(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Adapters converting an Enumerable of points into an Enumerable of doubles.
            </summary>
            <param name="pnts">The points.</param>
            <returns>The doubles, in the xyxyxy... format.</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.Intersect(Lava.Visual.ILine,Lava.Visual.ILine,Lava.Visual.Point2D,System.Boolean,System.Boolean)">
            <summary>
            Finds the intersection point between two lines.
            </summary>
            <param name="l1">The first line.</param>
            <param name="l2">The first line.</param>
            <param name="intersect">The intersection result, if there is one.</param>
            <param name="isL1Segment"><c>True</c> if the first line is treated as a segment.</param>
            <param name="isL2Segment"><c>True</c> if the second line is treated as a segment.</param>
            <returns>The indication of relations between the two lines.</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.Intersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Lava.Visual.Point2D,System.Boolean,System.Boolean)">
            <summary>
            Finds the intersection point between two lines.
            </summary>
            <param name="l1x1">The L1X1.</param>
            <param name="l1y1">The l1y1.</param>
            <param name="l1x2">The L1X2.</param>
            <param name="l1y2">The l1y2.</param>
            <param name="l2x1">The L2X1.</param>
            <param name="l2y1">The l2y1.</param>
            <param name="l2x2">The L2X2.</param>
            <param name="l2y2">The l2y2.</param>
            <param name="intersect">The intersect result, if there is one.</param>
            <param name="isL1Segment"><c>True</c> if the first line is treated as a segment.</param>
            <param name="isL2Segment"><c>True</c> if the second line is treated as a segment.</param>
            <returns>The indication of relations between the two lines.</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.EnsureBound(System.Windows.Rect@,System.Windows.Point)">
            <summary>
            Ensures the the rectangle contains the specific point. Expands
            it if necessary.
            </summary>
            <param name="rect">The rect.</param>
            <param name="pnt">The point to include.</param>
        </member>
        <member name="M:Lava.Util.GeometryLib.EnsureBound(System.Windows.Rect@,System.Double,System.Double)">
            <summary>
            Ensures the the rectangle contains the specific point. Expands
            it if necessary.
            </summary>
            <param name="rect">The rect.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Lava.Util.GeometryLib.Expand(System.Windows.Rect,System.Double)">
            <summary>
            Expands the specific rect in four dimensions with the specific size.
            </summary>
            <param name="rect">The rect.</param>
            <param name="length">The length.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.Intersect(Lava.Visual.Point2D,Lava.Visual.Point2D,System.Windows.Rect,Lava.Visual.Point2D[],System.Boolean)">
            <summary>
            Finds the intersection between the line and the rect.
            </summary>
            <param name="a1">The start point of the line.</param>
            <param name="a2">The end point of the line.</param>
            <param name="r">The rect.</param>
            <param name="pts">The resulting intersection points, if any, can be up to two.</param>
            <param name="isLineSegment"><c>True</c>, if the the line is treated as a segment.</param>
            <returns>The number of intersections, can be 0, 1, or 2. .</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.Intersect(Lava.Visual.ILine,System.Windows.Rect,Lava.Visual.Point2D[],System.Boolean)">
            <summary>
            Finds the intersection between the line and the rect.
            </summary>
            <param name="l">The line instance.</param>
            <param name="r">The rect.</param>
            <param name="pts">The resulting intersection points, if any, can be up to two.</param>
            <param name="isLineSegment"><c>True</c>, if the the line is treated as a segment.</param>
            <returns>
            The number of intersections, can be zero, one, or two.
            </returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.ConvexHull(System.Double[],System.Int32)">
            <summary>
            Find the convex hull of a set of points (at least three).
            </summary>
            <param name="pts">The input points, following the format of xyxyxy...</param>
            <param name="len">The the number (at least six) of the elements (from the beginning) you want to process.</param>
            <returns>The bounding convex hull, in the format of xyxyxy.</returns>
            <exception cref="T:System.ArgumentException">Input must have at least 3 points</exception>
        </member>
        <member name="M:Lava.Util.GeometryLib.Centroid(System.Double[],System.Int32)">
            <summary>
            Finds the center of a set of points.
            </summary>
            <param name="pts">The points data, in the format of xyxyxy...</param>
            <param name="len">The number of elements to be processed, from the beginning.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.ExpandPolygon(System.Double[],System.Int32,System.Single)">
            <summary>
            Expands the polygon (from the centroid of it) by the given percent.
            </summary>
            <param name="pts">The points data, in the format of xyxyxy...</param>
            <param name="len">The number of elements to be processed, from the beginning.</param>
            <param name="percent">The perentage of the final size (1 means no change).</param>
        </member>
        <member name="M:Lava.Util.GeometryLib.CardinalSpline(System.Double[],System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Compute a cardinal spline, a series of cubic Bezier splines smoothly
            connecting a set of points. Cardinal splines maintain C(1)
            continuity, ensuring the connected spline segments form a differentiable
            curve, ensuring at least a minimum level of smoothness.
            </summary>
            <param name="pts">The points, in the xyxyxy... format, should at least has three.</param>
            <param name="slack">The slack, controlling the "tightness" of the spline to, 0.10 is a typically suitable value.</param>
            <param name="isClosed">True if the cardinal spline should be closed (i.e. return to the starting point), false for an open curve.</param>
            <param name="tx">The value by which to translate the curve along the x-dimension, default is 0.0.</param>
            <param name="ty">The value by which to translate the curve along the y-dimension, default is 0.0.</param>
            <returns>The MoveTo value, and the PolyBezierTo parameters.</returns>
            <exception cref="T:System.ArgumentException">To create spline requires at least 3 points</exception>
        </member>
        <member name="M:Lava.Util.GeometryLib.StackSpline(System.Double[],System.Double,System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Computes a set of curves using the cardinal spline approach, but
            using straight lines for completely horizontal or vertical segments.
            This is useful to draw ThemeRiver related shapes.
            </summary>
            <param name="pts">The points, in the xyxyxy... format, should at least has three.</param>
            <param name="epsilon">The epsilon to determine is a horizontal line or vertical line.</param>
            <param name="slack">The slack, controlling the "tightness" of the spline to, 0.10 is a typically suitable value.</param>
            <param name="isClosed">True if the cardinal spline should be closed (i.e. return to the starting point), false for an open curve.</param>
            <param name="tx">The value by which to translate the curve along the x-dimension, default is 0.0.</param>
            <param name="ty">The value by which to translate the curve along the y-dimension, default is 0.0.</param>
            <returns>
            The data to draw the spline shape, the Item1 is MoveTo, the Item2 is CurveTo or LineTo based on the array size.
            </returns>
            <exception cref="T:System.ArgumentException">To create spline requires at least 3 points</exception>
        </member>
        <member name="M:Lava.Util.GeometryLib.Polygon(System.Collections.Generic.IEnumerable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Makes a polygon geometry based on the specified points.
            </summary>
            <param name="points">The points, in the xyxyxy... format.</param>
            <param name="isFilled">True if the polygon is filled.</param>
            <param name="isClosed">True if the polygon is closed.</param>
            <returns>The geometry instance.</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.Polygon(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Makes a polygon geometry based on the specified points.
            </summary>
            <param name="points">The points.</param>
            <param name="isFilled">True if the polygon is filled.</param>
            <param name="isClosed">True if the polygon is closed.</param>
            <returns>The geometry instance.</returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.CardinalSpline(System.Double[],System.Single,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Computes a cardinal spline, a series of cubic Bezier splines smoothly
            connecting a set of points. Cardinal splines maintain C(1)
            continuity, ensuring the connected spline segments form a differentiable
            curve, ensuring at least a minimum level of smoothness.
            </summary>
            <param name="pts">The points, in the xyxyxy... format, should at least has three.</param>
            <param name="slack">The slack, controlling the "tightness" of the spline to, 0.10 is a typically suitable value.</param>
            <param name="isFilled">True if the inner region should be filled.</param>
            <param name="isClosed">True if the cardinal spline should be closed (i.e. return to the starting point), false for an open curve.</param>
            <param name="tx">The value by which to translate the curve along the x-dimension, default is 0.0.</param>
            <param name="ty">The value by which to translate the curve along the y-dimension, default is 0.0.</param>
            <returns>
            The Geometry instance for the shape.
            </returns>
        </member>
        <member name="M:Lava.Util.GeometryLib.StackSpline(System.Double[],System.Single,System.Double,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Computes a set of curves using the cardinal spline approach, but
            using straight lines for completely horizontal or vertical segments.
            This is useful to draw ThemeRiver related shapes.
            </summary>
            <param name="pts">The points, in the xyxyxy... format, should at least has three.</param>
            <param name="slack">The slack, controlling the "tightness" of the spline to, 0.10 is a typically suitable value.</param>
            <param name="epsilon">The epsilon to determine is a horizontal line or vertical line.</param>
            <param name="isFilled">True if the inner region should be filled.</param>
            <param name="isClosed">True if the cardinal spline should be closed (i.e. return to the starting point), false for an open curve.</param>
            <param name="tx">The value by which to translate the curve along the x-dimension, default is 0.0.</param>
            <param name="ty">The value by which to translate the curve along the y-dimension, default is 0.0.</param>
            <returns>
            The Geometry instance for the shape.
            </returns>
        </member>
        <member name="T:Lava.Data.Column.IFuncColumn">
            <summary>
            The interface for Func column.
            </summary>
        </member>
        <member name="T:Lava.Data.IColumn">
            <summary>
            Column interface.
            </summary>
        </member>
        <member name="M:Lava.Data.IColumn.Clear(System.Int32)">
            <summary>
            Reverts the specified row back to the column's default value, expand
            this column if necessary. ** IMPORTANT ** This function will *NOT*
            trigger CellChanged Event!!
            </summary>
            <param name="row">The row at which to set the value.</param>
        </member>
        <member name="M:Lava.Data.IColumn.CanGet(System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if is supported by this column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IColumn.CanSet(System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if is supported by this column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IColumn.Get(System.Int32)">
            <summary>
            Get the value at a given column row.
            </summary>
            <param name="row">Row in column.</param>
            <returns>The object stored at row.</returns>
        </member>
        <member name="M:Lava.Data.IColumn.Set(System.Int32,System.Object)">
            <summary>
            Set the value at a given column row.
            </summary>
            <param name="row">Row in the column.</param>
            <param name="value">The value to set.</param>
            <returns>True if the value is changed, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IColumn.EmptyClone(System.Int32)">
            <summary>
            Gives a clean copy of this column with given initial capacity. Clean
            copy here means that the new instances holds only default values.
            </summary>
            <param name="size">The inital size of the newly created column.</param>
            <returns>The newly created column instance.</returns>
        </member>
        <member name="P:Lava.Data.IColumn.Internal">
            <summary>
            Indicates if this column is only for internal use. Such as Shape, Layer,
            ZIndex, and Look. This is just a helper indicator, which is mainly used
            in the LAVA framework. Setting this indicator to true will also make the
            Debugger ignore this column! So if you want to store some value in a table
            and do not want them to show up in the debugger, please set this flag true.
            </summary>
        </member>
        <member name="P:Lava.Data.IColumn.RowCount">
            <summary>
            Returns the number of rows in this data column.
            </summary>
            <returns>The number of rows.</returns>
        </member>
        <member name="P:Lava.Data.IColumn.ReadOnly">
            <summary>
            Indicates if the values in this column are read-only.
            </summary>
        </member>
        <member name="P:Lava.Data.IColumn.ColumnType">
            <summary>
            Returns the most specific superclass for the values in the column.
            </summary>
        </member>
        <member name="P:Lava.Data.IColumn.Parser">
            <summary>
            The data parser used to convert between a value in this column and a string.
            </summary>
        </member>
        <member name="E:Lava.Data.IColumn.CellChanged">
            <summary>
            Occurs when a cell is truly changed. This one is potentially slower, 
            so you should always use the generic one if you know the extract type 
            (defined in IColumn{T}).
            </summary>
        </member>
        <member name="P:Lava.Data.IColumn.Default">
            <summary>
            The default value of this column.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.IFuncColumn.Table">
            <summary>
            Gets the table that the values in this column is evaluating on.
            </summary>
        </member>
        <member name="T:Lava.Data.Column.FuncColumn`1">
            <summary>
            The implementation of Func column. A Func column is an calculation-based column instead of value-based column. 
            It needs an Func{IItem, T} to decide the final values. So you cannot set the value in the cells directly. 
            </summary>
            <typeparam name="T">The result type of this column</typeparam>
        </member>
        <member name="T:Lava.Data.Column.AbstractColumn`1">
            <summary>
            The abstract version of IColumn{T}, which is also an IColumn.
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="T:Lava.Data.Column.AbstractColumn">
            <summary>
            Abstract version of the IColumn. This class supports the CellChanged event,
            which is the "object version" of the column event handler. Please compare it
            with the one in AbstractColumn{T}. The object version does the same thing,
            but may be slower. Since when the column contains simple values such as int,
            the event handler will have to go through a boxing/unboxing process. But it
            has no difference when the column contains any referenced typed values. 
            
            In a nutshell, using the event "CellChanged" in this class is the same as 
            using the one in AbstractColumn{T}, but potentially slower. 
            </summary>
        </member>
        <member name="F:Lava.Data.Column.AbstractColumn._parser">
            <summary>
            Field stored data parser. Lazy loading.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.Clear(System.Int32)">
            <summary>
            Reverts the specified row back to the column's default value, expand
            this column if necessary. ** IMPORTANT ** This function will *NOT*
            trigger CellChanged Event!!
            </summary>
            <param name="row">The row at which to set the value.</param>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.EmptyClone(System.Int32)">
            <summary>
            Gives a clean copy of this column with given initial capacity. Clean
            copy here means that the new instances holds only default values.
            </summary>
            <param name="size">The inital size of the newly created colum.</param>
            <returns>The newly created column instance.</returns>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.CanGet(System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if is supported by this column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.CanSet(System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if is supported by this column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.OnCellChanged(Lava.Data.IColumn,System.Int32,System.Object)">
            <summary>
            Used in <c>AbstractColumn{T}</c> only.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.Get(System.Int32)">
            <summary>
            Gets the value at a given column row.
            </summary>
            <param name="row">The row in column.</param>
            <returns>The object stored at that row.</returns>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.Set(System.Int32,System.Object)">
            <summary>
            Sets the value at a given column row.
            </summary>
            <param name="row">The row in column.</param>
            <param name="value">The value to set.</param>
            <returns>True if the value is changed, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.InternalGet(System.Int32)">
            <summary>
            Used in <c>AbstractColumn</c> only.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn.InternalSet(System.Int32,System.Object)">
            <summary>
            Used in <c>AbstractColumn</c> only.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn.Internal">
            <summary>
            Indicates if this column is only for internal use. Such as Shape, Layer,
            ZIndex, and Look. This is just a helper indicator, which is mainly used
            in the LAVA framework. Setting this indicator to true will also make the
            Debugger ignore this column! So if you want to store some value in a table
            and do not want them to show up in the debugger, please set this flag true.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn.RowCount">
            <summary>
            Returns the number of rows in this data column.
            </summary>
            <returns>The number of rows.</returns>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn.ReadOnly">
            <summary>
            Indicates if the values in this column are read-only.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn.ColumnType">
            <summary>
            Returns the most specific type for the values in the column.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn.Parser">
            <summary>
            The data parser used to convert between a value in this column and a string.
            </summary>
        </member>
        <member name="E:Lava.Data.Column.AbstractColumn.CellChanged">
            <summary>
            Occurs when a cell is truly changed. This one is potentially slower, 
            so you should always use the generic one if you know the extract type 
            (defined in AbstractColumn{T}).
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn.Default">
            <summary>
            Gets the default value (as an object).
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn.InternalDefault">
            <summary>
            Used in <c>AbstractColumn</c> only.
            </summary>
        </member>
        <member name="T:Lava.Data.IColumn`1">
            <summary>
            Generic version of IColumn. It overrides some functions in IColumn for
            performance and convenience issues.
            </summary>
            <typeparam name="T">Data type that this column holds.</typeparam>
        </member>
        <member name="M:Lava.Data.IColumn`1.Get(System.Int32)">
            <summary>
            Gets the data value at the specified row.
            </summary>
            <param name="row">The row where the value is stored.</param>
            <returns>The data value.</returns>
        </member>
        <member name="M:Lava.Data.IColumn`1.Set(System.Int32,`0)">
            <summary>
            Sets the data value at the specified row.
            </summary>
            <param name="row">The row where the value is stored.</param>
            <param name="value">The value to set.</param>
            <returns>True if that cell is actually updated.</returns>
        </member>
        <member name="E:Lava.Data.IColumn`1.CellChanged">
            <summary>
            The handlers that will be notified when a cell is truly changed.
            This is a generic version that will hide the one in AbstractColumn.
            You should use this one whenever you know the exact type of this column.
            </summary>
        </member>
        <member name="P:Lava.Data.IColumn`1.Default">
            <summary>
            The default value of this column.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn`1.#ctor">
            <summary>
            Uses default(T) as default value in this column, for all
            referenced types, it is all null.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn`1.#ctor(`0)">
            <summary>
            Uses the given value as the default value in this column.
            </summary>
            <param name="defaultValue">The default value provided.</param>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn`1.OnCellChanged(System.Int32,`0)">
            <summary>
            Fires the cell events in the following order: (1) Prior ones; 
            (2) generic ones; (3) non-generic ones.
            </summary>
            <param name="index">The column row having value changed.</param>
            <param name="prev">The previous value that stored in the cell.</param>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn`1.Get(System.Int32)">
            <summary>
            Gets the data value at the specified row.
            </summary>
            <param name="row">The row where the value is stored.</param>
            <returns>The data value.</returns>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn`1.Set(System.Int32,`0)">
            <summary>
            Sets the data value at the specified row.
            </summary>
            <param name="row">The row where the value is stored.</param>
            <param name="value">The value to set.</param>
            <returns>True if that cell is actually updated.</returns>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn`1.InternalGet(System.Int32)">
            <summary>
            Used in <c>AbstractColumn</c> only.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.AbstractColumn`1.InternalSet(System.Int32,System.Object)">
            <summary>
            Used in <c>AbstractColumn</c> only.
            </summary>
        </member>
        <member name="E:Lava.Data.Column.AbstractColumn`1.CellChanged">
            <summary>
            Occurs when a cell is truly changed. 
            This is a generic version that will hide the one in AbstractColumn.
            You should use this one whenever you know the exact type of this column.
            </summary>
        </member>
        <member name="E:Lava.Data.Column.AbstractColumn`1.InternalPriorCellChanged">
            <summary>
            Handlers that have high priority. will be called before CallChanged.
            For internal use only.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn`1.Default">
            <summary>
            The default value of this column.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.AbstractColumn`1.InternalDefault">
            <summary>
            Used in <c>AbstractColumn</c> only.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.FuncColumn`1.#ctor(Lava.Data.ITable,System.Func{Lava.Data.IItem,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Column.FuncColumn`1"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="func">The func.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Lava.Data.Column.FuncColumn`1.Clear(System.Int32)">
            <summary>
            Reverts the specified row back to the column's default value, expand
            this column if necessary. ** IMPORTANT ** This function will *NOT*
            trigger CellChanged Event!!
            </summary>
            <param name="row">The row at which to set the valu.</param>
        </member>
        <member name="M:Lava.Data.Column.FuncColumn`1.Get(System.Int32)">
            <summary>
            Gets the data value at the specified row.
            </summary>
            <param name="row">The row where to get the valu.</param>
            <returns>The data value.</returns>
        </member>
        <member name="M:Lava.Data.Column.FuncColumn`1.Set(System.Int32,`0)">
            <summary>
            Sets the data value at the specified row.
            </summary>
            <param name="row">The row from which to retrieve the valu.</param>
            <param name="value">The value to se.</param>
            <returns>True if that cell is actually update.</returns>
        </member>
        <member name="M:Lava.Data.Column.FuncColumn`1.EmptyClone(System.Int32)">
            <summary>
            Gives a clean copy of this column with given initial capacity. Clean
            copy here means that the new instances holds only default values.
            </summary>
            <param name="size">The inital size of the newly created colum.</param>
            <returns>The newly created column instance.</returns>
        </member>
        <member name="P:Lava.Data.Column.FuncColumn`1.ReadOnly">
            <summary>
            Indicates if the values in this column are read-only.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.FuncColumn`1.Table">
            <summary>
            Gets the table that the values in this column is evaluating on.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.FuncColumn`1.RowCount">
            <summary>
            Gets row count.
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.AbstractGraphReader">
            <summary>
            Abstract base class implementation of the GraphReader functions.
            Provides basic handler functions.
            The methods: "ParseData" and "ParseHeader" must be implemented.
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.FileReader`1">
            <summary>
            Define the behaviors of a FileReader.
            </summary>
            <typeparam name="T">The value type</typeparam>
        </member>
        <member name="M:Lava.IO.Helper.FileReader`1.ReadFile(Lava.IO.IOMethod,System.String,`0,System.Boolean)">
            <summary>
            Read the data from a file.
            </summary>
            <param name="method">The IoMetho.</param>
            <param name="param">params in strin.</param>
            <param name="value">The valu.</param>
            <param name="bContainsHeader">if print header in fil.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Lava.IO.Helper.FileReader`1.ParseHeader(System.IO.StreamReader@,`0@,System.String@)">
            <summary> Read a table's header from the stream reader </summary>
            <param name="sr"> stream reader.</param>
            <param name="value"> with the header cread the table.</param>
            <param name="headerLine">head lin.</param>
        </member>
        <member name="M:Lava.IO.Helper.FileReader`1.ParseData(System.IO.StreamReader@,`0@,System.String)">
            <summary> Read a table's data from the stream reader </summary>
            <param name="sr"> stream reader.</param>
            <param name="value"> write the parsed data to this table.</param>
            <param name="headerLine">head lin.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractGraphReader.ReadFile(Lava.IO.IOMethod,System.String,Lava.Data.IGraph,System.Boolean)">
            <summary>
            read the file using a specified method
            </summary>
            <param name="method"> IO method see IoMethod enum.</param>
            <param name="param"> filename, url or filter, depends on IO method.</param>
            <param name="graph"> can be null.</param>
            <param name="bContainsHeader"> any value is ok.</param>
            <returns> returns the graph.  .</returns>
        </member>
        <member name="M:Lava.IO.Helper.AbstractGraphReader.ParseData(System.IO.StreamReader@,Lava.Data.IGraph@,System.String)">
            <summary>
            Read a table's data from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">write the parsed data to this tabl.</param>
            <param name="headerLine">The header line.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractGraphReader.ParseHeader(System.IO.StreamReader@,Lava.Data.IGraph@,System.String@)">
            <summary>
            Read a table's header from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">with the header cread the tabl.</param>
            <param name="headerLine">The header line.</param>
            <returns>.</returns>
        </member>
        <member name="T:Lava.IO.Helper.AbstractGraphWriter">
            <summary>
            Abstract base class implementation of the GraphWriter functions.
            Provides basic handler functions.
            
            The methods: "WriteHeader" and "WriteData" must be implemented.
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.FileWriter`1">
            <summary>
            Define the behaviors of a FileWriter
            </summary>
            <typeparam name="T">The value type</typeparam>
        </member>
        <member name="M:Lava.IO.Helper.FileWriter`1.WriteFile(Lava.IO.IOMethod,System.String,`0,System.Collections.Generic.List{System.String})">
            <summary>
            Write the Lava data to a file.
            </summary>
            <param name="method">The IoMetho.</param>
            <param name="param">params in strin.</param>
            <param name="value">The valu.</param>
            <param name="vColumnName">value column nam.</param>
        </member>
        <member name="M:Lava.IO.Helper.FileWriter`1.WriteHeader(System.IO.StreamWriter@,`0,System.Collections.Generic.List{System.String})">
            <summary> Print the table's header to stream writer.</summary>
            <param name="Value"> The table need to be output.</param>
            <param name="sw"> Stream writer..</param>
            <param name="vColumnName">value column nam.</param>
        </member>
        <member name="M:Lava.IO.Helper.FileWriter`1.WriteData(System.IO.StreamWriter@,`0,System.Collections.Generic.List{System.String})">
            <summary> Print the table's data to stream writer.</summary>
            <param name="Value"> The table need to be output.</param>
            <param name="sw"> Stream writer..</param>
            <param name="vColumnName">value column nam.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractGraphWriter.WriteFile(Lava.IO.IOMethod,System.String,Lava.Data.IGraph,System.Collections.Generic.List{System.String})">
            <summary> write the graph to a file using a specfied method </summary>
            <param name="method"> specifies the read method.</param>
            <param name="param"> parameter for io method.</param>
            <param name="graph"> the graph need to be write..</param>
            <param name="vColumnName"> always null.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractGraphWriter.WriteHeader(System.IO.StreamWriter@,Lava.Data.IGraph,System.Collections.Generic.List{System.String})">
            <summary>
            Print the table's header to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="table">The table need to be outpu.</param>
            <param name="vColumnName">Name of the v column.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractGraphWriter.WriteData(System.IO.StreamWriter@,Lava.Data.IGraph,System.Collections.Generic.List{System.String})">
            <summary>
            Print the table's data to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="Value">The value.</param>
            <param name="vColumnName">Name of the v column.</param>
        </member>
        <member name="T:Lava.IO.Helper.AbstractTableReader">
            <summary>
            Abstract base class implementation of the TableReader functions.
            Provides basic handler functions.
            
            The methods: "ParseData" and "ParseHeader" must be implemented.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableReader.ReadFile(Lava.IO.IOMethod,System.String,Lava.Data.ITable,System.Boolean)">
            <summary>
            read the file using a specified method
            </summary>
            <param name="method"> IO method see IoMethod enum.</param>
            <param name="param"> filename, url or filter, depends on IO method.</param>
            <param name="table"> .</param>
            <param name="bContainsHeader"> whether the file contains header.</param>
            <returns> returns the table.  .</returns>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableReader.AddColumn(Lava.Data.ITable@,System.String,System.String)">
            <summary> Add a column to table </summary>
            <param name="table"> the table need to be added to.</param>
            <param name="name"> the name for a column.</param>
            <param name="type"> string for a type.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableReader.ParseFilename(System.String,Lava.Data.ITable@)">
            <summary>
            parse the file name as table meta-data
            </summary>
            <param name="strFilename">The file path strin.</param>
            <param name="table">The target tabl.</param>
            <returns>is success.</returns>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableReader.ParseData(System.IO.StreamReader@,Lava.Data.ITable@,System.String)">
            <summary>
            Read a table's data from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">write the parsed data to this tabl.</param>
            <param name="headerLine">The header line.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableReader.ParseHeader(System.IO.StreamReader@,Lava.Data.ITable@,System.String@)">
            <summary>
            Read a table's header from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">with the header cread the tabl.</param>
            <param name="headerLine">The header line.</param>
            <returns>.</returns>
        </member>
        <member name="T:Lava.IO.Helper.AbstractTableWriter">
            <summary>
            Abstract base class implementation of the TableWriter functions.
            Provides basic handler functions.
            
            The methods: "WriteHeader" and "WriteData" must be implemented.
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.AbstractTableWriter.m_printHeader">
            <summary>
            Flag whether need write header in table file
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableWriter.#ctor">
            <summary>
            Create an default AbstractTableWriter.
            use "m_printHeader = true" as default configure.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableWriter.SetPrintHeader(System.Boolean)">
            <summary>
            Set the value of flag "m_printHeader".
            
            Flag whether need write header in table file
            </summary>
            <param name="bHeader">The flag valu.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableWriter.WriteFile(Lava.IO.IOMethod,System.String,Lava.Data.ITable,System.Collections.Generic.List{System.String})">
            <summary>
            write the table to a file using a specfied method
            </summary>
            <param name="method">specifies the read metho.</param>
            <param name="param">parameter for io metho.</param>
            <param name="table">The table need to be write.</param>
            <param name="vColumnName">Name of the v column.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableWriter.WriteHeader(System.IO.StreamWriter@,Lava.Data.ITable,System.Collections.Generic.List{System.String})">
            <summary> Print the table's header to stream writer.</summary>
            <param name="table"> The table need to be output.</param>
            <param name="sw"> Stream writer..</param>
            <param name="vColumnName">value column nam.</param>
        </member>
        <member name="M:Lava.IO.Helper.AbstractTableWriter.WriteData(System.IO.StreamWriter@,Lava.Data.ITable,System.Collections.Generic.List{System.String})">
            <summary> Print the table's data to stream writer.</summary>
            <param name="Value"> The table need to be output.</param>
            <param name="sw"> Stream writer..</param>
            <param name="vColumnName">value column nam.</param>
        </member>
        <member name="T:Lava.IO.Helper.CSVTableReader">
            <summary> TableReader for Comma Separated Value (CSV) files. CSV files list
            each row of a table on a line, separating each Data _column by a line.
            Typically the first line of the file is a header row indicating the
            names of each Data _column.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.CSVTableReader.ParseHeader(System.IO.StreamReader@,Lava.Data.ITable@,System.String@)">
            <summary>
            Read a table's header from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">with the header cread the tabl.</param>
            <param name="headerLine">The header line.</param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.IO.Helper.CSVTableReader.ParseData(System.IO.StreamReader@,Lava.Data.ITable@,System.String)">
            <summary>
            Read a table's data from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">write the parsed data to this tabl.</param>
            <param name="headerLine">The header line.</param>
            <exception cref="T:Lava.Exceptions.DataParseException"></exception>
        </member>
        <member name="P:Lava.IO.Helper.CSVTableReader.GetInstance">
            <summary>
            Create a CSVTableReader. (Singleton.)
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.CSVTableWriter">
            <summary> TableWriter that writes out a text table in the comma-separated-values
            format. By default, a header row containing the _column names is included
            in the output.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.CSVTableWriter.#ctor">
            <summary> Create a new CSVTableWriter that writes comma separated values files.</summary>
        </member>
        <member name="M:Lava.IO.Helper.CSVTableWriter.WriteHeader(System.IO.StreamWriter@,Lava.Data.ITable,System.Collections.Generic.List{System.String})">
            <summary>
            Print the table's header to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="table">The table need to be outpu.</param>
            <param name="vColumnName">value column nam.</param>
        </member>
        <member name="M:Lava.IO.Helper.CSVTableWriter.WriteData(System.IO.StreamWriter@,Lava.Data.ITable,System.Collections.Generic.List{System.String})">
            <summary>
            Print the table's data to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="table">The table need to be outpu.</param>
            <param name="vColumnName">Name of the v column.</param>
        </member>
        <member name="P:Lava.IO.Helper.CSVTableWriter.GetInstance">
            <summary>
            Create a CSVTableWriter. (Singleton)
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.DelimitedTextTableReader">
            <summary>
            Table reader for user defined character delimited files.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.DelimitedTextTableReader.SetDeliminator(System.String)">
            <summary>
            Set the deliminator
            </summary>
            <param name="delim">Use the user defined deliminato.</param>
        </member>
        <member name="M:Lava.IO.Helper.DelimitedTextTableReader.ParseHeader(System.IO.StreamReader@,Lava.Data.ITable@,System.String@)">
            <summary>
            Read a table's header from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">with the header cread the tabl.</param>
            <param name="headerLine">The header line.</param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.IO.Helper.DelimitedTextTableReader.ParseData(System.IO.StreamReader@,Lava.Data.ITable@,System.String)">
            <summary>
            Read a table's data from the stream reader
            </summary>
            <param name="sr">stream reade.</param>
            <param name="table">write the parsed data to this tabl.</param>
            <param name="headerLine">The header line.</param>
            <exception cref="T:Lava.Exceptions.DataParseException"></exception>
        </member>
        <member name="P:Lava.IO.Helper.DelimitedTextTableReader.GetInstance">
            <summary>
            Create a DelimitedTextTableReader. (Singleton)
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.DelimitedTextTableWriter">
            <summary> TableWriter that writes out a text table. 
            Values will be delimited by user defined charactor.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.DelimitedTextTableWriter.#ctor">
            <summary> Create a new DelimitedTextTableWriter that writes user defined charactor separated values files.</summary>
        </member>
        <member name="M:Lava.IO.Helper.DelimitedTextTableWriter.SetDeliminator(System.String)">
            <summary>
            Set the deliminator
            </summary>
            <param name="delim">Use the user defined deliminato.</param>
        </member>
        <member name="M:Lava.IO.Helper.DelimitedTextTableWriter.WriteHeader(System.IO.StreamWriter@,Lava.Data.ITable,System.Collections.Generic.List{System.String})">
            <summary>
            Print the table's header to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="table">The table need to be outpu.</param>
            <param name="vColumnName">value column nam.</param>
        </member>
        <member name="M:Lava.IO.Helper.DelimitedTextTableWriter.WriteData(System.IO.StreamWriter@,Lava.Data.ITable,System.Collections.Generic.List{System.String})">
            <summary>
            Print the table's data to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="table">The table need to be outpu.</param>
            <param name="vColumnName">Name of the v column.</param>
        </member>
        <member name="P:Lava.IO.Helper.DelimitedTextTableWriter.GetInstance">
            <summary>
            Create a DelimitedTextTableWriter. (Singleton)
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.GraphHandler">
            <summary> A SAX Parser for GraphML Data files.</summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler._metaMap">
            <summary>
            Store the meta-data mapping
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.SRC">
            <summary>
            Default source key: "Lava.Data.DefaultSourceKey"
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.TRG">
            <summary>
            Default target key: "Lava.Data.DefaultTargetKey"
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_graphid">
            <summary>
            the graph id
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_graph">
            <summary>
            the back-end graph
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_nodes">
            <summary>
            back-end node table
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_edges">
            <summary>
            back-end edge table
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_id">
            <summary>
            current parse id schema
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_for">
            <summary>
            current parse for schema
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_name">
            <summary>
            current parse name schema
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_type">
            <summary>
            current parse stype schema
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_dflt">
            <summary>
            current parse default schema
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_sbuf">
            <summary>
            Current string buffer
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_nodeMap">
            <summary>
            store node mapping
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.GraphHandler.m_nodekey">
            <summary>
            store id mapping
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.StartDocument">
            <summary>
            start the document parsing
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.EndDocument">
            <summary>
            end the document parsing
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.StartElement(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Start a GML element. (Act when the element start)
            </summary>
            <param name="namespaceURI">The element UR.</param>
            <param name="localName">The element nam.</param>
            <param name="qName">The query name of the elemen.</param>
            <param name="atts">The attributes of the elemen.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.EndElement(System.String,System.String,System.String)">
            <summary>
            End a GML element. (Act when the element end)
            </summary>
            <param name="namespaceURI">The element UR.</param>
            <param name="localName">The element nam.</param>
            <param name="qName">The query name of the elemen.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.Characters(System.Char[],System.Int32,System.Int32)">
            <summary>
            Append the chars to current string buffer
            </summary>
            <param name="ch">The char.</param>
            <param name="start">The start inde.</param>
            <param name="len">The chars length to be appende.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.SchemaCheck">
            <summary>
            Check is it in head schema
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.AddToSchema">
            <summary>
            Write the schema
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.LookupType(System.String)">
            <summary>
            Find out the type with its string name
            </summary>
            <param name="type">The string name of the typ.</param>
            <returns>The Type.</returns>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.Error(System.String)">
            <summary>
            Throw a SystemException with the message
            </summary>
            <param name="s">The messag.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphHandler.Error(System.Exception)">
            <summary>
            Throw the Exception
            </summary>
            <param name="e">The Exceptio.</param>
        </member>
        <member name="P:Lava.IO.Helper.GraphHandler.Graph">
            <summary>
            the back-end graph
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.GraphReader">
            <summary> This reader supports several types of columns:
            
            1) Primitive ones: listed in {@link MyGraphWriter.Tokens}, such as int, long
            and String, their array types
            2) Anything can be found by {@link ParserFactory#getDefaultFactory()}, such
            as List, Dictionary, etc. If you want to make something writable and
            readable, please write your own {@link DataParser} and added them to the
            {@link ParserFactory#DEFAULT_PARSERS} or modify (or inherit) the
            {@link Initialization}. Anyway, make sure the parsers are there before you
            call {@link MyGraphReader#readGraph(InputStream)} function.
            3) Collection: the type should be concrete, which means neither abstract nor
            interface. And we also can make them nested, for example, ArrayLists in
            HashSets in LinkedList. Anyway, the final atom element should be in 1) or
            2), the higher elements should be always concrete collection type.
            
            In addition, I added a new type called {@link Tokens#META}, besides NODE,
            EDGE, and ALL, in case you have something globally for this graph Data. 
            it will only be collected by calling {@link MyGraphReader#getMetaValues()}.
            To write it into the file, call {@link MyGraphWriter#addMeta(String, Object)}
            before you do the actual writing.
            
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphReader.ParseHeader(System.IO.StreamReader@,Lava.Data.IGraph@,System.String@)">
            <summary> Read a table's header from the stream reader </summary>
            <param name="sr"> stream reader.</param>
            <param name="graph"> with the header cread the table.</param>
            <param name="headerLine">head lin.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphReader.ParseData(System.IO.StreamReader@,Lava.Data.IGraph@,System.String)">
            <summary> Read a table's data from the stream reader </summary>
            <param name="sr"> stream reader.</param>
            <param name="graph"> write the parsed data to this table.</param>
            <param name="headerLine">head lin.</param>
        </member>
        <member name="P:Lava.IO.Helper.GraphReader.GetInstance">
            <summary>
            Create a GraphReader. (Singleton)
            </summary>
        </member>
        <member name="P:Lava.IO.Helper.GraphReader.MetaValues">
            <summary> If the last read graph has {@link Tokens#META} information, then you can
            get it from here. It is a String --> Object map, which gives you the
            &lt;key, value&gt; pairs. 
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.GraphWriter">
            <summary>
            GraphWriter instance that writes a graph file formatted using the
            GraphML file format. GraphML is an XML format supporting graph
            structure and typed data schemas for both nodes and edges. For more
            information about the format, please see the
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphWriter.#cctor">
            <summary> 
            Create a new CSVTableWriter that writes comma separated values files.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.GraphWriter.WriteHeader(System.IO.StreamWriter@,Lava.Data.IGraph,System.Collections.Generic.List{System.String})">
            <summary>
            Print the table's header to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="table">The table need to be outpu.</param>
            <param name="vColumnName">Name of the v column.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphWriter.WriteData(System.IO.StreamWriter@,Lava.Data.IGraph,System.Collections.Generic.List{System.String})">
            <summary>
            Print the graph's data to stream writer.
            </summary>
            <param name="sw">Stream writer.</param>
            <param name="graph">The graph need to be outpu.</param>
            <param name="vColumnName">Name of the v column.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphWriter.AddMeta(System.String,System.Object)">
            <summary>
            Add a meta-data to be stored in buffer
            </summary>
            <param name="key">The ke.</param>
            <param name="obj">The valu.</param>
        </member>
        <member name="M:Lava.IO.Helper.GraphWriter.PrintSchema(Lava.IO.Helper.XMLWriter,System.String,Lava.Data.ITable,System.String[])">
            <summary>
            Print the schema to the file
            </summary>
            <param name="xml">The xml write.</param>
            <param name="group">The graph grou.</param>
            <param name="t">The tabl.</param>
            <param name="ignore">ignore column.</param>
        </member>
        <member name="P:Lava.IO.Helper.GraphWriter.GetInstance">
            <summary>
            Create a GraphWriter. (Singleton)
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.GraphWriter.TokenConstants">
            <summary>
            default configures for GML file and readers, writers
            </summary>
        </member>
        <member name="T:Lava.IO.Helper.IoFromIsolatedStorage">
            <summary>
            I/O data from stand alone files
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.IoFromIsolatedStorage.ReadData(System.String,Lava.IO.ReadCompletedCallbackFunc)">
            <summary>
            Read the data and call the callback when opened the file successfully.
            </summary>
            <param name="fileName">The file nam.</param>
            <param name="callback">The readed call back functio.</param>
        </member>
        <member name="M:Lava.IO.Helper.IoFromIsolatedStorage.WriteData(System.String,Lava.IO.WriteCompletedCallbackFunc)">
            <summary>
            Write the data and call the callback when opened the file successfully.
            </summary>
            <param name="fileName">The file nam.</param>
            <param name="callback">The writed call back functio.</param>
        </member>
        <member name="M:Lava.IO.Helper.IoFromIsolatedStorage.DeleteFile(System.String)">
            <summary>
            Delete a file
            </summary>
            <param name="fileName">The file nam.</param>
        </member>
        <member name="T:Lava.IO.Helper.IoFromResource">
            <summary>
            I/O from URI resources
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.IoFromResource.ReadData(System.Uri,Lava.IO.ReadCompletedCallbackFunc)">
            <summary>
            Read the data and call the callback when opened the URI resource successfully.
            </summary>
            <param name="url">The URI resource ur.</param>
            <param name="callback">The readed call back functio.</param>
        </member>
        <member name="M:Lava.IO.Helper.IoFromResource.WriteData(System.Uri,Lava.IO.WriteCompletedCallbackFunc)">
            <summary>
            Write the data and call the callback when opened the URI resource successfully.
            </summary>
            <param name="url">The URI resource ur.</param>
            <param name="callback">The writed call back functio.</param>
        </member>
        <member name="T:Lava.IO.Helper.IoFromUrl">
            <summary>
            I/O data from Uri resources
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.IoFromUrl.readCompleted">
            <summary>
            Read completed call back
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.IoFromUrl.writeCompleted">
            <summary>
            Write completed call back
            </summary>
        </member>
        <member name="F:Lava.IO.Helper.IoFromUrl.strUrl">
            <summary>
            The URL
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.IoFromUrl.ReadData(System.Uri,Lava.IO.ReadCompletedCallbackFunc)">
            <summary>
            Read the data and call the callback when opened the URI resource successfully.
            </summary>
            <param name="url">The URI resource ur.</param>
            <param name="callback">The readed call back functio.</param>
        </member>
        <member name="M:Lava.IO.Helper.IoFromUrl.WriteData(System.Uri,Lava.IO.WriteCompletedCallbackFunc)">
            <summary>
            Write the data and call the callback when opened the URI resource successfully.
            </summary>
            <param name="url">The URI resource ur.</param>
            <param name="callback">The writed call back functio.</param>
        </member>
        <member name="T:Lava.IO.Helper.XMLWriter">
            <summary>Utility class for writing XML files. This class provides convenience
            methods for creating XML documents, such as starting and ending
            tags, and adding content and comments. This class handles correct
            XML formatting and will properly escape text to ensure that the
            text remains valid XML.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.#ctor(System.IO.StreamWriter)">
             <summary> Create a new XMLWriter.</summary>
             <param name="out_Renamed">The print writer to write the XML to
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.#ctor(System.IO.StreamWriter,System.Int32)">
             <summary> Create a new XMLWriter.</summary>
             <param name="out_Renamed">The print writer to write the XML to
            .</param>
             <param name="tabLength">The number of spaces to use for each
             level of indentation in the XML file
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.print(System.String)">
             <summary> Print <em>unescaped</em> text into the XML file. To print
             escaped text, use the {@link #content(String)} method instead.
             </summary>
             <param name="s">The text to print. This String will not be escaped.
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.println(System.String)">
             <summary> Print <em>unescaped</em> text into the XML file, followed by
             a newline. To print escaped text, use the {@link #content(String)}
             method instead.
             </summary>
             <param name="s">The text to print. This String will not be escaped.
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.println">
            <summary> Print a newline into the XML file.</summary>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.begin">
            <summary> Begin the XML document. This must be called before any other
            formatting methods. This method prints an XML header into
            the top of the output stream.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.begin(System.String,System.Int32)">
             <summary> Begin the XML document. This must be called before any other
             formatting methods. This method prints an XML header into
             the top of the output stream, plus additional header text
             provided by the client
             </summary>
             <param name="header">header text to insert into the document
            .</param>
             <param name="bias">The spacing bias to use for all subsequent indenting
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.comment(System.String)">
             <summary> Print a comment in the XML document. The comment will be printed
             according to the current spacing and followed by a newline.
             </summary>
             <param name="comment">The comment text
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.tag(System.String,System.String[],System.String[],System.Int32,System.Boolean)">
             <summary> Internal method for printing a tag with attributes.</summary>
             <param name="tag">The tag name
            .</param>
             <param name="names">The names of the attributes
            .</param>
             <param name="values">The values of the attributes
            .</param>
             <param name="nattr">The number of attributes
            .</param>
             <param name="close">True to close the tag, false to leave it
             open and adjust the spacing
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.tag(System.String,System.String[],System.String[],System.Int32)">
             <summary> Print a closed tag with attributes. The tag will be followed by a
             newline.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="names">The names of the attributes
            .</param>
             <param name="values">The values of the attributes
            .</param>
             <param name="nattr">The number of attributes
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.start(System.String,System.String[],System.String[],System.Int32)">
             <summary> Print a start tag with attributes. The tag will be followed by a
             newline, and the indentation level will be increased.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="names">The names of the attributes
            .</param>
             <param name="values">The values of the attributes
            .</param>
             <param name="nattr">The number of attributes
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.tag(System.String,System.String,System.String,System.Boolean)">
             <summary> Internal method for printing a tag with a single attribute.</summary>
             <param name="tag">The tag name
            .</param>
             <param name="name">The name of the attribute
            .</param>
             <param name="value_Renamed">The value of the attribute
            .</param>
             <param name="close">True to close the tag, false to leave it
             open and adjust the spacing
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.tag(System.String,System.String,System.String)">
             <summary> Print a closed tag with one attribute. The tag will be followed by a
             newline.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="name">The name of the attribute
            .</param>
             <param name="value_Renamed">The value of the attribute
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.start(System.String,System.String,System.String)">
             <summary> Print a start tag with one attribute. The tag will be followed by a
             newline, and the indentation level will be increased.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="name">The name of the attribute
            .</param>
             <param name="value_Renamed">The value of the attribute
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.tag(System.String,System.Collections.IList,System.Collections.IList,System.Int32,System.Boolean)">
             <summary> Internal method for printing a tag with attributes.</summary>
             <param name="tag">The tag name
            .</param>
             <param name="names">The names of the attributes
            .</param>
             <param name="values">The values of the attributes
            .</param>
             <param name="nattr">The number of attributes
            .</param>
             <param name="close">True to close the tag, false to leave it
             open and adjust the spacing
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.tag(System.String,System.Collections.IList,System.Collections.IList,System.Int32)">
             <summary> Print a closed tag with attributes. The tag will be followed by a
             newline.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="names">The names of the attributes
            .</param>
             <param name="values">The values of the attributes
            .</param>
             <param name="nattr">The number of attributes
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.start(System.String,System.Collections.IList,System.Collections.IList,System.Int32)">
             <summary> Print a start tag with attributes. The tag will be followed by a
             newline, and the indentation level will be increased.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="names">The names of the attributes
            .</param>
             <param name="values">The values of the attributes
            .</param>
             <param name="nattr">The number of attributes
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.start(System.String)">
             <summary> Print a start tag without attributes. The tag will be followed by a
             newline, and the indentation level will be increased.
             </summary>
             <param name="tag">The tag name
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.end">
            <summary> Close the most recently opened tag. The tag will be followed by a
            newline, and the indentation level will be decreased.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.contentTag(System.String,System.String,System.String,System.String)">
             <summary> Print a new content tag with a single attribute, consisting of an
             open tag, content text, and a closing tag, all on one line.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="name">The name of the attribute
            .</param>
             <param name="value_Renamed">The value of the attribute, this text will be escaped
            .</param>
             <param name="content">The text content, this text will be escaped
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.contentTag(System.String,System.String)">
             <summary> Print a new content tag with no attributes, consisting of an
             open tag, content text, and a closing tag, all on one line.
             </summary>
             <param name="tag">The tag name
            .</param>
             <param name="content">The text content, this text will be escaped
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.content(System.String)">
             <summary> Print content text.</summary>
             <param name="content">The content text, this text will be escaped
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.finish">
            <summary> Finish the XML document.</summary>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.finish(System.String)">
             <summary> Finish the XML document, printing the given footer text at the
             end of the document.
             </summary>
             <param name="footer">The footer text, this will not be escaped
            .</param>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.spacing">
            <summary> Print the current spacing (determined by the indentation level)
            into the document. This method is used by many of the other
            formatting methods, and so should only need to be called in
            the case of custom text printing outside the mechanisms
            provided by this class.
            </summary>
        </member>
        <member name="M:Lava.IO.Helper.XMLWriter.escapeString(System.String)">
             <summary> Escape a string such that it is safe to use in an XML document.</summary>
             <param name="str">The string to escape
            .</param>
        </member>
        <member name="T:Lava.IO.ReadCompletedCallbackFunc">
            <summary>
            Read completed call back function
            </summary>
            <param name="strReader">The StreamReade.</param>
            <param name="fileName">The file nam.</param>
        </member>
        <member name="T:Lava.IO.WriteCompletedCallbackFunc">
            <summary>
            Write completed call back function
            </summary>
            <param name="strWriter">The StreamWrite.</param>
            <param name="fileName">The file nam.</param>
        </member>
        <member name="T:Lava.IO.IOMethod">
            <summary>
            Type of reader and writer
            </summary>
        </member>
        <member name="T:Lava.IO.IOFactory">
            <summary>
            Singleton factory class for IOs. This class can support read and write
            through url, resource, isolated storage and out of browser.
            </summary>
        </member>
        <member name="M:Lava.IO.IOFactory.#ctor">
            <summary>
            Initialize the methods.
            </summary>
        </member>
        <member name="M:Lava.IO.IOFactory.ReadData(Lava.IO.IOMethod,System.String,Lava.IO.ReadCompletedCallbackFunc)">
            <summary>
            Read data using a specified reader.
            </summary>
            <param name="method">should be IoMethod enum typ.</param>
            <param name="param">if method is READ_FROM_ISOLATED_STORAGE,
            param should be like "test.txt"
            if method is READ_FROM_URL,
            param should be like "test.txt" and
            this file should be in ClientBin folder.
            if method is READ_FROM_RESOURCE,
            param should be like "Content/testIO.txt" and
            this file should be included in the project as Content.
            if method is READ_OUR_OF_BROWSER,
            param should be like "All Files (*.*)|*.*.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Lava.IO.IOFactory.WriteData(Lava.IO.IOMethod,System.String,Lava.IO.WriteCompletedCallbackFunc)">
            <summary>
            Write data using a specified writer.
            </summary>
            <param name="method">should be IoMethod enum typ.</param>
            <param name="param">if method is READ_FROM_ISOLATED_STORAGE,
            param should be like "test.txt"
            if method is READ_FROM_URL,
            param should be like "test.txt" and
            this file should be in ClientBin folder.
            if method is READ_FROM_RESOURCE,
            param should be like "Content/testIO.txt" and
            this file should be included in the project as Content.
            if method is READ_OUR_OF_BROWSER,
            param should be like "All Files (*.*)|*.*.</param>
            <param name="callback">The callback.</param>
            <exception cref="T:Lava.Exceptions.DataIOException">Resource is read only</exception>
        </member>
        <member name="M:Lava.IO.IOFactory.ReadDataOutOfBrowser(System.String,Lava.IO.ReadCompletedCallbackFunc)">
            <summary>
            Read and write data Out of browser
            Must be used in user defined event. such as button click event
            </summary>
            <param name="fileFilter">File filter for file browse.</param>
            <param name="callback">The callback.</param>
            <exception cref="T:Lava.Exceptions.DataIOException"></exception>
        </member>
        <member name="M:Lava.IO.IOFactory.ReadDataFromIsolatedStorage(System.String,Lava.IO.ReadCompletedCallbackFunc)">
            <summary>
            Read and write data through Isolated storage
            </summary>
            <param name="fileName">File name in isolated storag.</param>
            <param name="callback">call back function for read.</param>
        </member>
        <member name="M:Lava.IO.IOFactory.ReadDataFromResource(System.String,Lava.IO.ReadCompletedCallbackFunc)">
            <summary>
            Read and write data through Resource
            </summary>
        </member>
        <member name="P:Lava.IO.IOFactory.GetInstance">
            <summary>
            Create an IoFactory. (Singleton)
            </summary>
        </member>
        <member name="T:Lava.Debugger.DebuggerPanel">
            <summary>
            DebuggerPanel
            </summary>
        </member>
        <member name="M:Lava.Debugger.DebuggerPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Lava.Debugger.DebuggerSetting.AddInitialColumn(System.String,System.Type)">
            <summary>
            Adds the initial columns that will be loaded for the fist time invoking the debugger.
            </summary>
            <param name="columnName">The column name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Lava.Debugger.DebuggerSetting.AddDefaultTemplate(System.Func{System.Type,System.String,System.Windows.DataTemplate})">
            <summary>
            Adds the default template. When adding a column with default setting, the column name/type will be tested.
            If the column passes the test, the template will be used for the cells of that column.
            </summary>
            <param name="template">The template for particular columms passing the test.</param>
        </member>
        <member name="M:Lava.Debugger.DebuggerSetting.AddExtraTemplate(System.String,Lava.Debugger.AbstractCellTemplate)">
            <summary>
            Usually default cell templates are used for different column types: Checkbox for bool values,
            Textbox for the rest, and everything you set using <c>AddDefaultTemplate</c> function. 
            However, if you do not like the default settings, you can add a candidate here, then it will 
            show up in the "Select display column" dialog, for you to choose.
            </summary>
            <param name="name">The setting name.</param>
            <param name="setting">The setting.</param>
        </member>
        <member name="M:Lava.Debugger.DebuggerSetting.AddDefaultComparator(System.Func{System.Type,System.String,System.Comparison{Lava.Data.IVisualItem}})">
            <summary>
            Adds the default comparator. When sorting a column, the column name/type will be tested.
            If the column passes the test, the comparison will be used to do the sorting.
            </summary>
            <param name="comparison">The comparison for particular columns passing the test.</param>
        </member>
        <member name="M:Lava.Debugger.DebuggerSetting.AddDefaultSetter(System.Func{System.String,System.Action{Lava.Data.IVisualItem,System.Object,System.String}})">
            <summary>
            Adds the default set operation. When updating a visual item, the column name will be tested.
            If the column passes the test, the action will be used to do the updating.
            </summary>
            <param name="setter">The set operation (visual item, value, column name) for the particular column.</param>
        </member>
        <member name="M:Lava.Debugger.DebuggerSetting.AddDefaultGetter(System.Func{System.String,System.Func{Lava.Data.IVisualItem,System.Type,System.String,System.Object}})">
            <summary>
            Adds the default get operation. When showing column value for a visual item, the column name will be tested.
            If the column passes the test, the operation will be used to compute the displayed value.
            </summary>
            <param name="getter">The get operation (visual item, target type, column name)-> displayed value.</param>
        </member>
        <member name="M:Lava.Debugger.DebuggerSetting.AddVirtualColumn(System.String,System.Type,System.Func{Lava.Data.IVisualItem,System.Type,System.Object},System.Action{Lava.Data.IVisualItem,System.Object})">
            <summary>
            Adds a helper column by providing detailed setting/getting operations.
            </summary>
            <param name="field">The helper column name.</param>
            <param name="type">The helper column type.</param>
            <param name="getter">The getter for the helper column.</param>
            <param name="setter">The setter for the helper column.</param>
        </member>
        <member name="P:Lava.Debugger.DebuggerSetting.DefaultNumberFormat">
            <summary>
            Gets or Sets the default double format for displaying in the table. The format is following the WPF rule.
            For example, "N4", the default value, is to keep four digits after decimal points.
            </summary>
        </member>
        <member name="T:Lava.Util.Check">
            <summary>
            This is a utility class that provides static methods for checking whether
            some arbitrary value meets specific criteria (not null, not empty, positive,
            negative, etc). If criteria is not met, this utility throws an exception of
            type specified by the caller.
            </summary>
        </member>
        <member name="M:Lava.Util.Check.NotNull(System.Object,System.String)">
            <summary>
            throw ArgumentNullException when the value is null
            </summary>
            <param name="value"></param>
            <param name="message"></param>
        </member>
        <member name="T:Lava.Util.Debug">
            <summary>
            Some functions for debugging purpose
            </summary>    
        </member>
        <member name="M:Lava.Util.Debug.LavaAssert(System.Func{System.Boolean},System.String)">
            <summary>
            Asserts the specified func.
            </summary>
            <param name="boolFunc">The func to be assert with</param>
        </member>
        <member name="M:Lava.Util.Debug.CheckTrue(System.Boolean,System.String)">
            <summary>
            The state being false is NOT an error, but also not a normal mode for this program either.
            </summary>
            <param name="state">True if the program is in normal state, false if in ill state.</param>
            <param name="msg">The message you want to show if <c>Lava.Config.CATCH_POSSIBLE_MISTAKES</c> is on.</param>
        </member>
        <member name="T:Lava.Visual.UIRender">
            <summary>
            Renderer that controls UILook, To make a visual item look like a UIElement, such as TextBox or CheckBox,
            you should assign this render to it. This render has a constructor taking a Function that specifys how to
            generate a framework element based on a given visual item. This Function defines the final look of the
            visual item. However, attributes, such as X, Y, Opacity, etc, are combined with the visual item via StyleUpdaters.
            </summary>
        </member>
        <member name="M:Lava.Visual.UIRender.#ctor(System.Func{Lava.Data.IVisualItem,System.Windows.FrameworkElement})">
            <summary>
            Create a UIRenderer, given the behavior that defines how the visual item appears as a framework element.
            It will be accessible later through UIGenerator.
            </summary>
            <param name="generator">The behavior defining how the visual item appears as a framework element.</param>
        </member>
        <member name="M:Lava.Visual.UIRender.CreateLook(Lava.Data.IVisualItem)">
            <summary>
            Create a ILook based on the given visual item
            </summary>
            <param name="vi">The visual item to build a ILook upo.</param>
            <returns>a ILook that represents the given visual item.</returns>
        </member>
        <member name="P:Lava.Visual.UIRender.UIGenerator">
            <summary>
            Get the behavior that defines how the visual item looks like a framework element. However, some 
            attributes of the framework element still may be updated by setting styles in the visual item. 
            </summary>
        </member>
        <member name="T:Lava.Visual.AbstractLook">
            <summary>
            Look is the observable part for each VisualItem on the screen. 
            Given the parameters, the task for a Look is simply to paint the 
            objects according to defined behaviors.
            
            When you design a your own look, you should inherit from this abstract class
            
            It is inherited from DrawingVisual
            
            WPF version
            </summary>
        </member>
        <member name="T:Lava.Visual.ILook">
            <summary>
            Look is the observable part for each VisualItem on the screen. 
            Given the parameters, the task for a Look is simply to paint 
            the objects according to defined behaviors. 
            
            WPF version
            </summary>
        </member>
        <member name="M:Lava.Visual.ILook.Paint">
            <summary>
            Paints this instance.
            </summary>
        </member>
        <member name="P:Lava.Visual.ILook.VisualItem">
            <summary>
            Gets the visual item.
            </summary>
            <value>
            The visual item.
            </value>
        </member>
        <member name="P:Lava.Visual.ILook.ListenMouse">
            <summary>
            Get the flag indicating whether this displayed element should respond to mouse events, such as click, move. 
            The conventional way is to bind it to VisualItem.ListenMouse, but can be different still.
            </summary>
        </member>
        <member name="P:Lava.Visual.ILook.Visible">
            <summary>
            Gets the flag indicating whether this look is visible or not.
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractLook.Paint(System.Windows.Media.DrawingContext)">
            <summary>
            Paints the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Lava.Visual.AbstractLook.Paint">
            <summary>
            Paints this instance.
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractLook.#ctor(Lava.Data.IVisualItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.AbstractLook"/> class.
            </summary>
            <param name="vi">The vi.</param>
        </member>
        <member name="P:Lava.Visual.AbstractLook.ScaleTransform">
            <summary>
            Gets or sets the scale transform.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractLook.RotateTransform">
            <summary>
            Gets or sets the rotation transform.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractLook.TranslateTransform">
            <summary>
            Gets or sets the translate transform.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractLook.VisualItem">
            <summary>
            Gets the visual item.
            </summary>
            <value>
            The visual item.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractLook.ListenMouse">
            <summary>
            Get the flag indicating whether this displayed element should respond to mouse events, such as click, move.
            The conventional way is to bind it to VisualItem.ListenMouse, but can be different still.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractLook.FillBrush">
            <summary>
            Gets or sets the color of the fill. Relaying to Brush.
            </summary>
            <value>
            The color of the fill.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractLook.StrokeBrush">
            <summary>
            Gets or sets the color of the stroke. Relaying to Pen.
            </summary>
            <value>
            The color of the stroke.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractLook.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke. Relaying to Pen.
            </summary>
            <value>
            The width of the stroke.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractLook.Visible">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <value>
              <c>True</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractLook.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractLook.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="T:Lava.Visual.UILook">
            <summary>
            Look adapter for showing a framework element in the display. This class usually works with UIRender.
            </summary>
        </member>
        <member name="F:Lava.Visual.UILook._isShape">
            <summary>
            private flag that indicates if the framework element is a Shape or not.
            </summary>
        </member>
        <member name="M:Lava.Visual.UILook.Paint">
            <summary>
            it needs to do nothing in Paint in SL
            </summary>
        </member>
        <member name="F:Lava.Visual.UILook._INF_SIZE">
            <summary>
            For measuring the desired size of the UIElement
            </summary>
        </member>
        <member name="M:Lava.Visual.UILook.#ctor(Lava.Data.IVisualItem,System.Windows.FrameworkElement)">
            <summary>
            create the look with its back-end visual item
            </summary>
            <param name="vi">The back-end visual ite.</param>
            <param name="frameworkElement">The framework element representing this visual elemen.</param>
        </member>
        <member name="M:Lava.Visual.UILook.UpdateLocation">
            <summary>
            Make this look center at (X,Y)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.ScaleTransform">
            <summary>
            Gets or sets the scale transform.
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.RotateTransform">
            <summary>
            Gets or sets the rotation transform.
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.TranslateTransform">
            <summary>
            Gets or sets the translate transform.
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.UIContent">
            <summary>
            back-end graphics element
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.VisualItem">
            <summary>
            the back-end visual item
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.Width">
            <summary>
            Width style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.Height">
            <summary>
            Height style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.X">
            <summary>
            X style effect the location transform
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.Y">
            <summary>
            Y style effect the location transform
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.Visible">
            <summary>
            Visible style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.ListenMouse">
            <summary>
            configure if the element can be test hit
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.Opacity">
            <summary>
            Opacity style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.FillBrush">
            <summary>
            FillBrush style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.StrokeBrush">
            <summary>
            StrokeBrush style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.FillOpacity">
            <summary>
            FillOpacity style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.StrokeOpacity">
            <summary>
            StrokeOpacity style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="P:Lava.Visual.UILook.StrokeWidth">
            <summary>
            StrokeWidth style property routed to the back-end graphics element (Shape)
            </summary>
        </member>
        <member name="T:Lava.Data.Parser.SortedDictionaryParser">
            <summary>
            SortedDictionaryParser can handle parse/format between string and SortedDictionary value.
            </summary>
        </member>
        <member name="T:Lava.Data.Parser.AbstractParser">
            <summary> 
            Implements common methods, such as CanHandle, CanParse and Type.
            When you need a new parser, inherit from this abstract class is the best idea.
            </summary>
        </member>
        <member name="T:Lava.Data.Parser.IDataParser">
            <summary>
            Parser is used to parse/format data value from/to string
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.IDataParser.CanHandle(System.Type)">
            <summary>
            Indicates if the given type can be handled by this parser.
            For example, if T is set as an interface type, you may need to override this
            function to indicate what subclass of T can be handled by this parser.
            </summary>
            <param name="type">The type to check for compatibility.</param>
            <returns>
            True if they are replaceable.
            </returns>
        </member>
        <member name="M:Lava.Data.Parser.IDataParser.CanParse(System.String)">
            <summary>
            Determines whether this instance can parse the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>
              <c>true</c> if this instance can parse the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Lava.Data.Parser.IDataParser.Type">
            <summary>
            Gets the type of values supported by this parser.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Lava.Data.Parser.IDataParser.Parse">
            <summary>
            Converts a string to an object, exception may be thrown if error happens.
            </summary>
        </member>
        <member name="P:Lava.Data.Parser.IDataParser.Format">
            <summary>
            Converts an object to a string, exception may be thrown if error happens.
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.AbstractParser.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Parser.AbstractParser"/> class.
            </summary>
            <param name="type">The exact type supported.</param>
        </member>
        <member name="M:Lava.Data.Parser.AbstractParser.CanHandle(System.Type)">
            <summary>
            Indicates if the given type can be handled by this parser.
            For example, if T is set as an interface type, you may need to override this
            function to indicate what subclass of T can be handled by this parser.
            </summary>
            <param name="type">The type to check for compatibility.</param>
            <returns>
            True if they are replaceable.
            </returns>
        </member>
        <member name="M:Lava.Data.Parser.AbstractParser.CanParse(System.String)">
            <summary>
            Determines whether this instance can parse the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>
              <c>true</c> if this instance can parse the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Parser.AbstractParser.SimpleFormat(System.Object)">
            <summary>
            A simple implementation for the format operation.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="P:Lava.Data.Parser.AbstractParser.Type">
            <summary>
            Gets the type of values supported by this parser.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Lava.Data.Parser.AbstractParser.Format">
            <summary>
            Converts an object to a string, exception may be thrown if error happens.
            </summary>
        </member>
        <member name="P:Lava.Data.Parser.AbstractParser.Parse">
            <summary>
            Converts a string to an object, exception may be thrown if error happens.
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.SortedDictionaryParser.#ctor(System.Type)">
            <summary>
            if the string is null, it will return null
            if the string is empty, it will return an empty dictionary
            </summary>
            <param name="type">The generic Dictionary type</param>
        </member>
        <member name="T:Lava.Debugger.DebuggerTable">
            <summary>
            DebuggerTable
            </summary>
        </member>
        <member name="M:Lava.Debugger.DebuggerTable.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Lava.Visual.PanAndZoomViewer">
            <summary>
            Enables panning and zooming of a FrameworkElement within the ContentControl, via mouse.
            
            WPF functions
            </summary>
            <remarks>
            Original PanAndZoomViewer code from Joe Wood at
            http://blogs.windowsclient.net/joeyw/archive/2009/06/02/pan-and-zoom-updated.aspx
            </remarks>
            <summary>
            Enables panning and zooming of a FrameworkElement within the ContentControl, via mouse.
            
            </summary>
            <remarks>
            Original PanAndZoomViewer code from Joe Wood at
            http://blogs.windowsclient.net/joeyw/archive/2009/06/02/pan-and-zoom-updated.aspx
            </remarks>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.CreatePanAnimation(System.Double)">
            <summary>Helper to create the panning animation for x,y coordinates.</summary>
            <param name="toValue">New value of the coordinate.</param>
            <returns>Double animation.</returns>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.CreateZoomAnimation(System.Double)">
            <summary>Helper to create the zoom double animation for scaling.</summary>
            <param name="toValue">Value to animate to.</param>
            <returns>Double animation.</returns>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.DoPan(System.Double,System.Double)">
            <summary>
            Pan to the position relative this PanAndZoomViewer
            </summary>
            <param name="toX">The X coordinate relative this PanAndZoomViewe.</param>
            <param name="toY">The Y coordinate relative this PanAndZoomViewe.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.DoZoom(System.Double,System.Windows.Point)">
            <summary>
            Zoom out or zoom in relative zoom rate and mouse position.
            </summary>
            <param name="toZoom">zoom rate. [MinimumZoom, MaximumZoom]. 
            e.g. 0.4 means 40%; 1.2 means 120.</param>
            <param name="physicalPosition">Logical mouse position relative to this PanAndZoomViewer.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.DoReset">
            <summary>
            Reset the position and zoom rate to the original value when the PanAndZoomView setup
            </summary>
        </member>
        <member name="F:Lava.Visual.PanAndZoomViewer.IsFloatingProperty">
            <summary>
            Property key related to IsFloating property.
            </summary>
        </member>
        <member name="F:Lava.Visual.PanAndZoomViewer._ScreenStartPoint">
            <summary>
            store screen start point (0, 0)
            </summary>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.#ctor">
            <summary>
            PanAndZoomViewer constructor
            
            DefaultZoomFactor = 1.4;
            MaximumZoom = double.MaxValue;
            MinimumZoom = double.MinValue;
            PanControlKey = Key.None;
            ZoomControlKey = Key.None;
            PanMouseButton = MouseMode.Left;
            WithPan = true;
            WithZoom = true;
            IsPanCaptureMouse = true;
            ResetKey = Key.Escape;
            AutoFix = false;
            PanDuration = 100.0;
            ZoomDuration = 300.0;
            
            the best way to use it is in xaml design file
            </summary>
        </member>
        <member name="F:Lava.Visual.PanAndZoomViewer._panMouse">
            <summary>
            back-end data field of property PanMouseButton
            </summary>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.EmitPanningEvent(System.Double,System.Double)">
            <summary>
            Emit Panning event
            </summary>
            <param name="curX"></param>
            <param name="curY"></param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.EmitZoomingEvent(System.Double)">
            <summary>
            Emit Zooming event
            </summary>
            <param name="curScale"></param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.OnApplyTemplate">
            <summary>
            key override to do setup and initialize
            </summary>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.Setup">
            <summary>
            setup PanAndZoomViewer
            </summary>
        </member>
        <member name="F:Lava.Visual.PanAndZoomViewer._isPanKeyed">
            <summary>
            is pan control key pressed
            </summary>
        </member>
        <member name="F:Lava.Visual.PanAndZoomViewer._isPanning">
            <summary>
            is user panning the view
            </summary>
        </member>
        <member name="F:Lava.Visual.PanAndZoomViewer._isZoomKeyed">
            <summary>
            is zoom control key pressed
            </summary>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.source_KeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            act when KeyUp
            </summary>
            <param name="sender">The viewe.</param>
            <param name="e">routed KeyEventArg.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.source_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            act when KeyDown
            </summary>
            <param name="sender">The viewe.</param>
            <param name="e">routed KeyEventArg.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.control_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            act when mouse leave the viewer
            update states
            </summary>
            <param name="sender">The viewe.</param>
            <param name="e">routed MouseEventArg.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.source_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            act when mouse up on the viewer
            update states
            </summary>
            <param name="sender">The viewe.</param>
            <param name="e">routed MouseEventArg.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.source_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            act when mouse down on the viewer
            update states
            </summary>
            <param name="sender">The viewe.</param>
            <param name="e">routed MouseEventArg.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.control_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            act when mouse move on the viewer
            update states
            </summary>
            <param name="sender">The viewe.</param>
            <param name="e">routed MouseEventArg.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.source_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            act when mouse wheel scrolling on the viewer
            update states
            </summary>
            <param name="sender">The viewe.</param>
            <param name="e">routed MouseWheelEventArg.</param>
        </member>
        <member name="M:Lava.Visual.PanAndZoomViewer.InternalDoZoom(System.Double,System.Windows.Point)">
            <summary>Zoom into or out of the content.</summary>
            <param name="deltaZoom">Factor to mutliply the zoom level by..</param>
            <param name="physicalPosition">Actual mouse position on the screen (relative to the parent window.</param>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.IsFloating">
            <summary>
            Is the PanAndZoomViewer floating on the other views? If not, we can make the ground layer
            forward the mouse events to the PanAndZoomViewer as well. The default value is false. 
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.CurrentTranslatePosition">
            <summary>
            Current translate transform position value.
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.CurrentScale">
            <summary>
            Current scale value
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.ZoomFactor">
            <summary>
            The speed of zoom action. Bigger value means faster speed.
            default 1.4
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.MaximumZoom">
            <summary>
            magnification, zoom max size. In the example MaximumZoom="4", 
            the sub element can zoom to 400% at most.
            
            default double.MaxValue
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.MinimumZoom">
            <summary>
            reduce magnification. In the example MinimumZoom="0.25", 
            the sub element can zoom to 25% at most.
            
            default  double.MinValue
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.PanControlKey">
            <summary>
            User can pan it only if the key is pressed. 
            Key.None means don't have to press any key.
            
            default  Key.None
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.WithPan">
            <summary>
            If Pan feature enabled.
            
            default  true
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.ZoomControlKey">
            <summary>
            User can zoom it only if the key is pressed. 
            Key.None means don't have to press any key.
            
            default Key.None
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.WithZoom">
            <summary>
            if Zoom feature enables.
            
            default true
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.IsPanCaptureMouse">
            <summary>
            If the Viewer capture mouse when panning it. 
            Capture mouse so that you can also pan it when your mouse is out of the viewer.
            
            default false
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.ResetKey">
            <summary>
            press this key to reset the element to the original place and zoom to 100%.
            
            default Key.Escape
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.AutoFix">
            <summary>
            If the viewer auto fix the space 
            while panning and zooming. 
            AutoFix makes the viewer not pan too far away.
            
            default Key.Escape
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.PanMouseButton">
            <summary>
            Use which mouse key to drag viewer to pan.
            
            default MouseMode.Left
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.PanCursor">
            <summary>
            The pan mouse cursor style
            
            default Cursors.Hand
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.PanDuration">
            <summary>
            Pan animation duration time. In milliseconds.
            
            default 100
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer._PanDuration">
            <summary>
            Pan animation duration time. back-end data of "PanDuration"
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.ZoomDuration">
            <summary>
            Zoom animation duration time. In milliseconds.
            
            default 300
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer._ZoomDuration">
            <summary>
            Zoom animation duration time. back-end data of "ZoomDuration"
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.WithPanAnimation">
            <summary>
            Pan the Viewer with an animation?
            
            default: true
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer.WithZoomAnimation">
            <summary>
            Zoom the Viewer with an animation?
            
            default: true
            </summary>
        </member>
        <member name="E:Lava.Visual.PanAndZoomViewer.Panning">
            <summary>
            Occurs when user panning the viewer
            </summary>
        </member>
        <member name="E:Lava.Visual.PanAndZoomViewer.Zooming">
            <summary>
            Occurs when user zooming the viewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer._ShouldPan">
            <summary>
            should Lava act pan
            (pan enabled and key pressed)
            </summary>
        </member>
        <member name="P:Lava.Visual.PanAndZoomViewer._ShouldZoom">
            <summary>
            should Lava act zoom
            (zoom enabled and key pressed)
            </summary>
        </member>
        <member name="T:Lava.Visual.LabelLook">
            <summary>
            A look draw a text label.
            
            WPF version
            </summary>
        </member>
        <member name="T:Lava.Visual.ITextMeasure">
            <summary>
            Text entity interface
            </summary>
        </member>
        <member name="P:Lava.Visual.ITextMeasure.Text">
            <summary>
            the text content
            </summary>
        </member>
        <member name="P:Lava.Visual.ITextMeasure.TextHeight">
            <summary>
            the text height
            </summary>
        </member>
        <member name="P:Lava.Visual.ITextMeasure.TextWidth">
            <summary>
            the text width
            </summary>
        </member>
        <member name="P:Lava.Visual.LabelLook.Text">
            <summary>
            the text content
            </summary>
        </member>
        <member name="T:Lava.Visual.OldLabelLook">
            <summary>
            A look draw a text label.
            
            WPF version
            </summary>
        </member>
        <member name="M:Lava.Visual.OldLabelLook.#ctor(Lava.Data.IVisualItem,System.String)">
            <summary>
            Create a LabelLook with the back-end visual item
            </summary>
            <param name="vi">The visual ite.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:Lava.Visual.OldLabelLook.TextWidth">
            <summary>
            the text width
            </summary>
        </member>
        <member name="P:Lava.Visual.OldLabelLook.TextHeight">
            <summary>
            the text height
            </summary>
        </member>
        <member name="P:Lava.Visual.OldLabelLook.Text">
            <summary>
            the text content
            </summary>
        </member>
        <member name="T:Lava.Visual.AbstractLookRender">
            <summary>
            A general abstract class that combines the behaviors the Look and Render. In a typical
            usage pattern, you should implement a render and its related look to make LAVA draw
            something. This is a class that combine these two class. In this class, you should only
            implement the UpdateLook function and DrawLook function, and use it as a render for a
            visual item. Then things should work by themselves.
            
            NOTE: this class should have a parameterless constructor.
            
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractLookRender.UpdateLook(System.String)">
            <summary>
            This function is called when any field is update for a visual item. the field name
            is passed into this function, so you return a bool value tell the look if we need
            to redraw the look. In addition, this function is called before the draw action, so
            you can do some calculations and cache something needed in the drawing. For example,
            you need several attributes stored in the visual item to do the drawing. So every time
            one of them changes, you will have to retrieve them all for drawing, which could be
            expensive in LAVA. so you might need to cache those attributes in the look through 
            UpdateLook function, then use them later in the draw function. 
            </summary>
            <param name="changedField">The field that has value changed for the back-end visual item</param>
            <returns>should we perform the re-draw action for such change.</returns>
        </member>
        <member name="M:Lava.Visual.AbstractLookRender.DrawLook(System.Windows.Media.DrawingContext)">
            <summary>
            Defines the action how to draw the back-end visual item.
            </summary>
            <param name="dc">The drawing context to draw.</param>
        </member>
        <member name="M:Lava.Visual.AbstractLookRender.Paint">
            <summary>
            Paints this instance.
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractLookRender.Repaint(Lava.Visual.ILook,System.String)">
            <summary>
            Repaints visual item when the style field changed.
            </summary>
            <param name="alook">The look of the visual item.</param>
            <param name="changedStyle">The changed style field, null means all fields.</param>
        </member>
        <member name="M:Lava.Visual.AbstractLookRender.CreateLook(Lava.Data.IVisualItem)">
            <summary>
            Creates a look based a given visual item, in this case, a new instance of this class
            is created, since it is a combination of Look and Render.
            </summary>
            <param name="vi">The back-end visual item that the look should support.</param>
            <returns>A new instance of the look that supports the visual item.</returns>
        </member>
        <member name="P:Lava.Visual.AbstractLookRender.VisualItem">
            <summary>
            Gets the visual item.
            </summary>
            <value>
            The visual item.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractLookRender.ListenMouse">
            <summary>
            Get the flag indicating whether this displayed element should respond to mouse events, such as click, move.
            The conventional way is to bind it to VisualItem.ListenMouse, but can be different still.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractLookRender.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:Lava.Visual.AbstractLookRender"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Lava.Util.PenLib">
            <summary>
            A Pen cache pool.
            Support simple color pen with thickness.
            
            WARNING: do NOT write the pen you got from this pool.
            
            </summary>
        </member>
        <member name="F:Lava.Util.PenLib._pens">
            <summary>
            cached pends
            </summary>
        </member>
        <member name="F:Lava.Util.PenLib._blankPen">
            <summary>
            Blank pen, which is #00000000, thickness = 0.
            </summary>
        </member>
        <member name="M:Lava.Util.PenLib.FromColorThickness(System.Windows.Media.Color,System.Double)">
            <summary>
            Finds the pen in the cache. If not found, create a new one and cache it.
            </summary>
            <param name="color">The color.</param>
            <param name="thickness">The pen thickness.</param>
            <returns>The pen instance.</returns>>
        </member>
        <member name="P:Lava.Util.PenLib.BlankPen">
            <summary>
            Blank pen, which is #00000000, thickness = 0.
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.VariableInterpreter">
            <summary>
            Defines how a free-style variable is interpreted. For example, when the object is a dictionary, 
            you may want to get the result from object[string]. Or if when the object is a iitem, you may want to get
            the result from object.Get(string). This structure is only used by <c>AbstractExprParser</c> to help interpret
            the expression string.
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.AbstractExprParser">
            <summary>
            The base class for expression parser, it defines how a string is converted to an expression. If you want to define your own
            ExprParser, you should derive this class, provide proper <c>FunctionFactory</c> and <c>VariableInterpreter</c> to it.
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.AbstractExprParser.ProtectedParse(System.String,Hallucination.Expressions.FunctionFactory,Hallucination.Expressions.VariableInterpreter,System.Boolean)">
            <summary>
            Converts a string to an expression, based on a function factory and variable interpreter.
            </summary>
            <param name="expr">The string to be parse.</param>
            <param name="factory">function factory to look up the implementation for a given function nam.</param>
            <param name="interpreter">interpreter defining how to interpret free style variable.</param>
            <param name="throwException">flag to control do you want to throw exceptio.</param>
            <returns>The parsing result.</returns>
        </member>
        <member name="T:Hallucination.Expressions.ExprParser">
             <summary>
             <strong><remarks>Introduction</remarks></strong>
             
             The expression language provides a convenient way of creating manipulable statements over 
             tables. In general, you can convert a string into a <c>IExpression</c>, which can take a
             <c>IItem</c> and generate a new value based on it. It is very useful in many cases. For
             example, you can write a <c>ExpressionColumn</c> and add it to a table, so that values
             in that column will be generated from other columns in this table. Or you can get a
             <c>IPredicate</c> to get a <c>PredicateTable</c> from a parent table. It is a very useful
             tool, and very expendable and flexible.
             
             Below is the reference for the language, including literal types, data field references,
             basic operators, and included functions. If need be, you can also introduce a new function 
             by creating a new instance of <c>IFunction</c> interface, and register it. It is very easy,
             just call <c>Factory</c> and <c>AddFunc</c>. You can refer to <c>FunctionFactory</c> for more
             examples.
             
             All keywords and functions in the expression language can be written in either 
             uppercase or lowercase. Writing in mixed-case, however, will likely result in parse errors.
            
             <strong><remarks>Literal Values and Data Field References</remarks></strong>
             
             The fundamental building blocks of the expression language, representing data values
             or referencing the contents of a variable, which is decided by <c>VariableInterpreter</c>.
             
             <list type="bullet">
             <item><strong>Boolean literals  (<c>TRUE, FALSE</c>)</strong></item><br/>
             <description>The boolean literals representing true and false conditions, parsed to type <c>bool</c></description>
             <item><strong>Integer literals  (<c>1, -5, 12340</c>)</strong></item><br/>
             <description>Undecorated, non-decimal numbers are parsed as numbers of type <c>int</c></description>
             <item><strong>Long literals (<c>1L, -5L, 12340L</c>)</strong></item><br/>
             <description>Integer values decorated with the suffix "L" are parsed as numbers of type <c>long</c></description>
             <item><strong>Double literals (<c>1.0, 3.1415, 1e-35, 2.3e6</c>)</strong></item><br/>
             <description>Numbers with decimals or exponents in scientific notation are parsed as numbers of type <c>double</c></description>
             <item><strong>Float literals (<c>1.0f, 3.1415f, 1e-35f, 2.3e6f</c>)</strong></item><br/>
             <description>Floating-point values decorated with the suffix "f" are parsed as numbers of type <c>float</c></description>
             <item><strong>String literals (<c>"some text", 'a label'</c>)</strong></item><br/>
             <description>Text strings placed in double (") or single (') quotations are parsed as <c>String</c> literals</description>
             <item><strong>Null literal  (<c>null</c>)</strong></item><br/>
             <description>The string <c>null</c> is parsed as an ObjectLiteral of type null.</description>
             <item><strong>Data field references (<c>_strokeBrush, [a data field]</c>)</strong></item><br/>
             <description>
              Free-standing strings or those placed within squared brackets are parsed as a reference to the
              data field of that name. Brackets are required for any fields that include unsafe characters,
              such as spaces or other unusual characters in their name (e.g., characters like +, -, *, etc), 
              or conflict with an existing keyword For example, <c>True</c> parses to a boolean literal while
              <c>[true]</c> parses to a reference to a data field named 'true'. The value is evaluated on an
              object, which could be an iitem or a dictionary or any objects, based on <c>VariableInterpreter</c>.
             </description>
             </list>
             
             <strong><remarks>Operators and Control Flow</remarks></strong>
             Basic operators and control flow structures for the expression language. Here are some examples:
             <list type="bullet">
                 <item><strong><c>x + y</c> (addition)</strong></item><br/>
                 <item><strong><c>x - y</c> (subtraction)</strong></item><br/>
                 <item><strong><c>x * y</c> (multiplication)</strong></item><br/>
                 <item><strong><c>x / y</c> (division)</strong></item><br/>
                 <item><strong><c>x ^ y</c> (exponentiation, pow)</strong></item><br/>
                 <item><strong><c>x % y</c> (modulo)</strong></item><br/>
                 <item><strong><c>x = y, x == y</c> (equality)</strong></item><br/>
                 <item><strong><c>x != y, x &lt; &gt; y</c> (inequality)</strong></item><br/>
                 <item><strong><c>x &gt; y</c> (greater than)</strong></item><br/>
                 <item><strong><c>x &gt;= y</c> (greater than or equal to)</strong></item><br/>
                 <item><strong><c>x &lt; y</c> (less than)</strong></item><br/>
                 <item><strong><c>x &lt;= y</c> (less than or equal to)</strong></item><br/>
                 <item><strong><c>x AND y, x &amp;&amp; y</c> (and)</strong></item><br/>
                 <item><strong><c>x OR y, x || y</c> (or)</strong></item><br/>
                 <item><strong><c>NOT x, !x</c> (not)</strong></item><br/>
                 <item><strong><c>x XOR y</c> (exclusive or)</strong></item><br/>
                 <item><strong><c>IF test THEN x ELSE y</c> (if-then-else)</strong></item><br/>
                 <item><strong><c>()</c> (parentheses)</strong></item><br/>
             </list>
             
             <strong><remarks>Mathematical, color, and String Functions</remarks></strong>
             Functions for performing mathematical calculations and string manipulation.
             These functions <strong>are not</strong> fully tested, use them at your own risk~~
             <list type="bullet">
             <item><strong><c>ABS(x)</c></strong></item><br/>
             <description>Returns the absolute value of <c>x</c></description>
             <item><strong><c>ACOS(x)</c></strong></item><br/>
             <description>Returns the inverse cosine (arc cosine) of a <c>x</c></description>
             <item><strong><c>ASIN(x)</c></strong></item><br/>
             <description>Returns the inverse sine (arc sine) of a <c>x</c></description>
             <item><strong><c>ATAN(x)</c></strong></item><br/>
             <description>Returns the inverse tangent (arc tangent) of a <c>x</c></description>
             <item><strong><c>ATAN2(y, x)</c></strong></item><br/>
             <description>For the Cartesian coordinates <c>x</c>, <c>y</c> return the polar coordinate angle theta</description>
             <item><strong><c>CEIL(x)</c></strong></item><br/>
             <description>Returns the nearest integer value greater than or equal to <c>x</c>.</description>
             <item><strong><c>COS(x)</c></strong></item><br/>
             <description>Returns the cosine of <c>x</c></description>
             <item><strong><c>COT(x)</c></strong></item><br/>
             <description>Returns the cotangent of <c>x</c></description>
             <item><strong><c>DEG(x)</c></strong></item><br/>
             <description>Converts <c>x</c> from radians to degrees</description>
             <item><strong><c>RAD(x)</c></strong></item><br/>
             <description>Converts <c>x</c> from degrees to radians</description>
             <item><strong>E()</strong></item><br/>
             <description>Returns the constant value <c>Math.E</c></description>
             <item><strong><c>EXP(x)</c></strong></item><br/>
             <description>Returns the value of <em>e</em> (the base of natural logarithms) raised to the <c>x</c> power</description>
             <item><strong><c>FLOOR(x)</c></strong></item><br/>
             <description>Returns the nearest integer value less than or equal to <c>x</c>.</description>
             <item><strong><c>LOG(x)</c></strong></item><br/>
             <description>With one argument, returns the natural logarithm (logarithm base <em>e</em>) of <c>x</c></description>
             <item><strong><c>LOG10(x)</c></strong></item><br/>
             <description>Returns the logarithm base 10 of <c>x</c></description>
             <item><strong><c>MAX(a, b, c, ...)</c></strong></item><br/>
             <description>Returns the maximum value among the provided arguments</description>
             <item><strong><c>MIN(a, b, c, ...)</c></strong></item><br/>
             <description>Returns the minimum value among the provided arguments</description>
             <item><strong><c>MOD(x, y)</c></strong></item><br/>
             <description>Returns <c>x</c> modulo <c>y</c> (the remainder of <c>x</c> divided by <c>y</c>)</description>
             <item><strong><c>PI()</c></strong></item><br/>
             <description>Returns the constant pi (= 3.1415926535...), the ratio between the circumference and diameter of a circle</description>
             <item><strong><c>POW(x, y), POWER(x, y)</c></strong></item><br/>
             <description>Return the value of <c>x</c> raised to the exponent <c>y</c></description>
             <item><strong><c>RAND()</c></strong></item><br/>
             <description>Returns a random floating-point value between 0 and 1</description>
             <item><strong><c>ROUND(x)</c></strong></item><br/>
             <description>Returns the value of <c>x</c> rounded to the nearest integer</description>
             <item><strong><c>SIGN(x)</c></strong></item><br/>
             <description>Returns the sign of <c>x</c>: 1 for positive, -1 for negative</description>
             <item><strong><c>SIN(x)</c></strong></item><br/>
             <description>Returns the sine of <c>x</c></description>
             <item><strong><c>SQRT(x)</c></strong></item><br/>
             <description>Returns the square root of <c>x</c></description>
             <item><strong><c>SUM(a, b, c, ...)</c></strong></item><br/>
             <description>Returns the sum of the provided input value</description>
             <item><strong><c>TAN(x)</c></strong></item><br/>
             <description>Returns the tangent of <c>x</c></description>
             <item><strong><c>SAFELOG10(x)</c></strong></item><br/>
             <description>Returns a "negative safe" logarithm base 10 of <c>x</c>, equivalent to <c>SIGN(x) * LOG10(ABS(x))</c></description>
             <item><strong><c>SAFESQRT(x)</c></strong></item><br/>
             <description>Returns a "negative safe" square root of <c>x</c>, equivalent to <c>SIGN(x) * SQRT(ABS(x))</c></description>
             <item><strong>-------------------------------string functions----------------------------------</strong></item><br/>
             <item><strong><c>CAP(str)</c></strong></item><br/>
             <description>
                Capitalize words in the string <c>str</c>. Individual words/names will be given
                uppercase first letters, with all other letters in lowercase.
             </description>
             <item><strong><c>CONCAT(a, b, c, ...)</c></strong></item><br/>
             <description>Concatenate the input strings into one resulting string.</description>
             <item><strong><c>CONCAT_WS(sep, a, b, c, ...)</c></strong></item><br/>
             <description>
                Concatenate with separator. Concatenates the input strings into one resulting
                string, placing the string <c>sep</c> between each of the other arguments
             </description>
             <item><strong><c>FORMAT(x, d)</c></strong></item><br/>
             <description>Format the number <c>x</c> as a string of the type "#,###.##", showing <c>d</c> decimal places</description>
             <item><strong><c>INSERT(str, pos, len, newstr)</c></strong></item><br/>
             <description>
                Replaces the substring of length <c>len</c> starting at position <c>pos</c> in input
                string <c>str</c> with the string <c>newstr</c>
             </description>
             <item><strong><c>LEFT(str, len)</c></strong></item><br/>
             <description>Returns the leftmost <c>len</c> characters of string <c>str</c></description>
             <item><strong><c>LENGTH(str)</c></strong></item><br/>
             <description>Returns the length, in characters, of the input string <c>str</c></description>
             <item><strong><c>LOWER(str), LCASE(str)</c></strong></item><br/>
             <description>Returns the string <c>str</c> mapped to lowercase letters</description>
             <item><strong><c>LPAD(str, len, pad)</c></strong></item><br/>
             <description>
                Pad the left side of string <c>str</c> with copies of string <c>pad</c>,
                up to a total padding of <c>len</c> characters
             </description>
             <item><strong><c>MID(str, pos, len)</c></strong></item><br/>
             <description>Return a substring of <c>str</c> of length <c>len</c>, starting at position <c>pos</c></description>
             <item><strong><c>POSITION(substr, str)</c></strong></item><br/>
             <description>
                Returns the starting position of the first occurrence of substring <c>substr</c>
                in the string <c>str</c>. Returns -1 if the substring is not found.
             </description>
             <item><strong><c>REVERSE(str)</c></strong></item><br/>
             <description>Returns a reversed copy of the input string <c>str</c></description>
             <item><strong><c>REPEAT(str, count)</c></strong></item><br/>
             <description>Returns a string consisting of <c>str</c> repeated <c>count</c> times</description>
             <item><strong><c>REPLACE(str, orig, replace)</c></strong></item><br/>
             <description>Returns a copy of <c>str</c> in which all occurrences of <c>orig</c> have been replaced by <c>replace</c></description>
             <item><strong><c>RIGHT(str, len)</c></strong></item><br/>
             <description>Returns the <c>len</c> rightmost characters of string <c>str</c></description>
             <item><strong><c>RPAD(x)</c></strong></item><br/>
             <description>Pad the right side of string <c>str</c> with copies of string <c>pad</c>, up to a total padding of <c>len</c> characters</description>
             <item><strong><c>SPACE(n)</c></strong></item><br/>
             <description>Returns a string consisting of <c>n</c> whitespace characters</description>
             <item><strong><c>SUBSTRING(str,pos), SUBSTRING(str,pos,len)</c></strong></item><br/>
             <description>
                For two arguments, returns the substring of <c>str</c> starting at position
                <c>pos</c> and continuing to the end of the string.<br/>
                For three arguments, returns the substring of <c>str</c> of length <c>len</c>,
                beginning at position <c>pos</c>
             </description>
             <item><strong><c>UPPER(str), UCASE(str)</c></strong></item><br/>
             <description>Returns the string <c>str</c> mapped to uppercase letters</description>
             <item><strong>-------------------------------color functions----------------------------------</strong></item><br/>
             <item><strong><c>RGB(r, g, b)</c></strong></item><br/>
             <description>Returns an integer representing a fully opaque RGB (red, green, blue) color value</description>
             <item><strong><c>RGBA(r, g, b, a)</c></strong></item><br/>
             <description>Returns an integer representing an RGBA (red, green, blue, alpha/transparency) color value</description>
             <item><strong><c>GRAY(v)</c></strong></item><br/>
             <description>Returns an integer representing a grayscale color value of intensity <c>v</c></description>
             <item><strong><c>HEX(hex)</c></strong></item><br/>
             <description>Returns an integer representing the RGB color value encoded by the hexadecimal number <c>hex</c></description>
             <item><strong><c>HSB(h, s, b)</c></strong></item><br/>
             <description>
                Maps the given hue (<c>hue</c>), saturation (<c>s</c>), and brightness
                (<c>b</c>) color space values (as floating point numbers between 0 and 1) to
                an integer representing an RGB color value
             </description>
             <item><strong><c>HSBA(h, s, b, a)</c></strong></item><br/>
             <description>
                Maps the given hue (<c>hue</c>), saturation (<c>s</c>), brightness
                (<c>b</c>), and alpha (<c>a</c>) color space values (as floating point
                numbers between 0 and 1) to an integer representing an RGBA color value
             </description>
             <item><strong><c>COLORINTERP(c1, c2, f)</c></strong></item><br/>
             <description>
                Returns an interpolated color value between the input colors <c>c1</c> and
                <c>c2</c> determined by the mixing proportion <c>f</c>, a value between 0 and 1
             </description>
             </list>
             
             </summary>
        </member>
        <member name="T:Hallucination.Expressions.FunctionFactory">
            <summary>
            When we find a unit like "funcname(expr1, expr2,...)", this factory is
            consulted to find out how the implementation is defined. This class is
            only used in <c>AbstractExprParser</c>.
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.FunctionFactory.AddFunc``1(System.String,System.Func{System.Object,System.Collections.Generic.List{Hallucination.Expressions.IExpression},``0})">
            <summary>
            Convenience version of AddFunc function. Assume the parameter count is free.
            </summary>
            <typeparam name="T">The result type of the function</typeparam>
            <param name="name">function name, which will be converted to upper case.</param>
            <param name="func">function implementatio.</param>
        </member>
        <member name="M:Hallucination.Expressions.FunctionFactory.AddFunc``1(System.String,System.Int32,System.Func{System.Object,System.Collections.Generic.List{Hallucination.Expressions.IExpression},``0})">
            <summary>
            Registers a function to the factory for, so the function could be found when do the parsing.
            Please refer to the default constructor for some examples.
            </summary>
            <typeparam name="T">The result type of the function</typeparam>
            <param name="name">function name, which will be converted to upper case.</param>
            <param name="paraCount">The expr count in the parameter list, -1 means free numbe.</param>
            <param name="func">function implementatio.</param>
        </member>
        <member name="M:Hallucination.Expressions.FunctionFactory.CreateFunction(System.String)">
            <summary>
            Used by the parser only. Please do not modify this function.
            </summary>
            <param name="name">function identifie.</param>
            <returns>function instance.</returns>
        </member>
        <member name="M:Hallucination.Expressions.Helper.ExpressionAnalyzer.Get``1(Hallucination.Expressions.IExpression,System.Object)">
            <summary>
            Helper function used in <c>AbstractExpression</c> and <c>FunctionExpression</c> to support
            Get{T} function.
            </summary>
            <typeparam name="T">The type of the result value</typeparam>
            <param name="expr">The instance of expression to evaluate the resul.</param>
            <param name="target">The object that this expression is applied o.</param>
            <returns>The result for applying the expression on the target.</returns>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.InternalExpressionParser.Parse(System.String,System.Boolean)">
             <summary> Parse an Expressions.</summary>
             <param name="expr">The Expressions text to Parse
            .</param>
             <param name="throwsException">True if this method should throw an
             exception if an error occurs or should fail quietly
            .</param>
             <returns> the parsed Expression, or null if the Parse failed
             and throwsException is false
             </returns>		
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.InternalExpressionParser.parse(System.String)">
             <summary> Parse an Expressions. This method does not throw an exception if
             a Parse error occurs. Use {@link #getError()} to access any
             generated exceptions.
             </summary>
             <param name="expr">The Expressions text to Parse
            .</param>
             <returns> the parsed Expression, or null if the Parse failed
             </returns>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.InternalExpressionParser.predicate(System.String)">
             <summary> Parse an Expressions as a predicate. This method does not throw an
             exception if a Parse error occurs. Use {@link #getError()} to access
             any generated exceptions.
             </summary>
             <param name="expr">The Expressions text to Parse
            .</param>
             <returns> the parsed Expression, or null if the Parse failed
             </returns>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.InternalExpressionParser.unescape(System.String)">
             <summary> Replace escape sequences with represented characters. This
             includes newlines, tabs, and quotes.
             </summary>
             <param name="s">The input String, possibly with escape sequences
            .</param>
             <returns> a String with recognized escape sequences properly replaced
             </returns>
        </member>
        <member name="P:Hallucination.Expressions.InternalParsing.InternalExpressionParser.Error">
            <summary> Get the last error, if any, generated by a Parse operation.</summary>
            <returns> the last error generated during parsing
            </returns>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.JavaCharStream.adjustBeginLineColumn(System.Int32,System.Int32)">
            <summary> Method to adjust line and _column numbers for the start of a token.</summary>
        </member>
        <member name="P:Hallucination.Expressions.InternalParsing.JavaCharStream.Column">
            <summary>
            getEndColumn
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.InternalParsing.JavaCharStream.Line">
            <summary>
            getEndLine
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.InternalParsing.ParseException">
            <summary> This exception is thrown when Parse errors are encountered.
            You can explicitly create objects of this exception type by
            calling the method generateParseException in the generated
            Parsers.
            
            You can modify this class to customize your error reporting
            mechanisms so long as you retain the public fields.
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.ParseException.#ctor(Hallucination.Expressions.InternalParsing.Token,System.Int32[][],System.String[])">
            <summary> This constructor is used by the method "generateParseException"
            in the generated Parsers.  Calling this constructor generates
            a new object of this type with the fields "currentToken",
            "expectedTokenSequences", and "tokenImage" set.  The boolean
            flag "specialConstructor" is also set to true to indicate that
            this constructor was used to create this object.
            This constructor calls its super class with the empty string
            to force the "ToString" method of parent class "Throwable" to
            print the error message in the form:
            ParseException: result of getMessage
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.ParseException.#ctor">
            <summary> The following constructors are for use by you for whatever
            purpose you can think of.  Constructing the exception in this
            manner makes the exception behave in the normal way - i.e., as
            documented in the class "Throwable".  The fields "errorToken",
            "expectedTokenSequences", and "tokenImage" do not contain
            relevant information.  The JavaCC generated code does not use
            these constructors.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.ParseException.specialConstructor">
            <summary> This variable determines which constructor was used to create
            this object and thereby affects the semantics of the
            "getMessage" method (see below).
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.ParseException.currentToken">
            <summary> This is the last token that has been consumed successfully.  If
            this object has been created due to a Parse error, the token
            followng this token will (therefore) be the first error token.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.ParseException.expectedTokenSequences">
            <summary> Each entry in this array is an array of integers.  Each array
            of integers represents a sequence of tokens (by their ordinal
            values) that is expected at this point of the Parse.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.ParseException.tokenImage">
            <summary> This is a reference to the "tokenImage" array of the generated
            Parsers within which the Parse error occurred.  This array is
            defined in the generated ...Constants interface.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.ParseException.eol">
            <summary> The end of line string for this machine.</summary>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.ParseException.add_escapes(System.String)">
            <summary> Used to convert raw characters to their escaped version
            when these raw version cannot be used as part of an ASCII
            string literal.
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.InternalParsing.ParseException.Message">
            <summary> This method has the standard behavior when this object has been
            created using the standard constructors.  Otherwise, it uses
            "currentToken" and "expectedTokenSequences" to generate a Parse
            error message and returns it.  If this object has been created
            due to a Parse error, and you do not catch it (it gets thrown
            from the Parsers), then this method is called during the printing
            of the final stack trace, and hence the correct error message
            gets displayed.
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.InternalParsing.Token">
            <summary> Describes the input token stream.</summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.Token.kind">
            <summary> An integer that describes the kind of this token.  This numbering
            system is determined by JavaCCParser, and a table of these numbers is
            stored in the file ...Constants.java.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.Token.beginLine">
            <summary> beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.Token.beginColumn">
            <summary> beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.Token.endLine">
            <summary> beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.Token.endColumn">
            <summary> beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.Token.image">
            <summary> The string image of the token.</summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.Token.next">
            <summary> A reference to the next regular (non-special) token from the input
            stream.  If this is the last token from the input stream, or if the
            token manager has not read tokens beyond this one, this field is
            set to null.  This is true only if this token is also a regular
            token.  Otherwise, see below for a description of the contents of
            this field.
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.Token.ToString">
            <summary> Returns the image.</summary>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.Token.newToken(System.Int32)">
            <summary> Returns a new Token object, by default. However, if you want, you
            can create and return subclass objects based on the value of ofKind.
            Simply added the cases to the switch for all those special cases.
            For example, if you have a subclass of Token called IDToken that
            you want to create if ofKind is ID, simlpy added something like :
            
            case MyParserConstants.ID : return new IDToken();
            
            to the following switch statement. Then you can cast matchedToken
            variable to the appropriate type and use it in your lexical actions.
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.TokenMgrError.LEXICAL_ERROR">
            <summary> Lexical error occured.</summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.TokenMgrError.STATIC_LEXER_ERROR">
            <summary> An attempt wass made to create a second instance of a static token manager.</summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.TokenMgrError.INVALID_LEXICAL_STATE">
            <summary> Tried to change to an invalid lexical state.</summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.TokenMgrError.LOOP_DETECTED">
            <summary> Detected (and bailed out of) an infinite loop in the token manager.</summary>
        </member>
        <member name="F:Hallucination.Expressions.InternalParsing.TokenMgrError.errorCode">
            <summary> Indicates the reason why the exception is thrown. It will have
            one of the above 4 values.
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.TokenMgrError.addEscapes(System.String)">
            <summary> Replaces unprintable characters by their espaced (or unicode escaped)
            equivalents in the given string
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.InternalParsing.TokenMgrError.LexicalError(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Char)">
            <summary> Returns a detailed message for the Error when it is thrown by the
            token manager to indicate a lexical error.
            Parameters : 
            EOFSeen     : indicates if EOF caused the lexicl error
            curLexState : lexical state in which this error occured
            errorLine   : line number when the error occured
            errorColumn : _column number when the error occured
            errorAfter  : prefix that was seen before this error occured
            curchar     : the offending character
            Note: You can customize the lexical error message by modifying this method.
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.InternalParsing.TokenMgrError.Message">
            <summary> You can also modify the body of this method to customize your error messages.
            For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
            of end-users concern, so you can return something like : 
            
            "Internal Error : Please file a bug report .... "
            
            from this method for such cases in the release version of your Parsers.
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.IExpression">
            <summary>
            <p>An Expression is an arbitrary function that takes a single Item as an
            argument. Expressions support both Object-valued and primitive-valued
            (int, long, float, double, boolean) evaluation methods. The appropriate
            method to call depends on the particular Expression implementation.
            A {@link #getType(Schema)} method provides mechanism for determining the
            return type of a given Expression instance. A {@link Predicate} is an
            Expression which is guaranteed to support the {@link #getBoolean(IItem)}
            method, is often used to filter tuples.</p>
            
            <p>Expressions also support a listener interface, allowing clients to
            monitor changes to expressions, namely rearrangements or modification
            of contained sub-expressions. The Expression interface also supports
            visitors, which can be used to visit every sub-expression in an expression
            tree.</p>
            
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.IExpression.Get``1(System.Object)">
            <summary>
            Get the result.
            
            May throw InvalidCastException, 
            if the result type can not be cast to T.
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="obj">The ite.</param>
            <returns>.</returns>
        </member>
        <member name="M:Hallucination.Expressions.IExpression.Visit(Hallucination.Expressions.Helper.ExpressionVisitor)">
            <summary>
            Passes the visitor through this expression and any sub expressions
            </summary>
            <param name="v">The ExpressionVisito.</param>
        </member>
        <member name="M:Hallucination.Expressions.IExpression.AddExpressionListener(Hallucination.Expressions.Helper.ExpressionListener)">
            <summary>
            Add a listener to this Expression.
            </summary>
            <param name="lstnr">The expression listener to ad.</param>
        </member>
        <member name="M:Hallucination.Expressions.IExpression.RemoveExpressionListener(Hallucination.Expressions.Helper.ExpressionListener)">
            <summary>
            Remove a listener to this Expression.
            </summary>
            <param name="lstnr">The expression listener to remov.</param>
        </member>
        <member name="P:Hallucination.Expressions.IExpression.GetResultType">
            <summary>
            get result type.
            You can use this test result type before you get the result value
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.IExpression.GetResult">
            <summary>
            Get result as object.
            Value type will be boxed.
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.IExpression.GetInt">
            <summary>
            get result as int.
            
            May throw InvalidCastException, 
            if the result type can not be cast to int.
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.IExpression.GetFloat">
            <summary>
            get result as float.
            
            May throw InvalidCastException, 
            if the result type can not be cast to float.
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.IExpression.GetLong">
            <summary>
            get result as long.
            
            May throw InvalidCastException, 
            if the result type can not be cast to long.
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.IExpression.GetDouble">
            <summary>
            get result as double.
            
            May throw InvalidCastException, 
            if the result type can not be cast to double.
            </summary>
        </member>
        <member name="P:Hallucination.Expressions.IExpression.GetBool">
            <summary>
            get result as bool.
            
            May throw InvalidCastException, 
            if the result type can not be cast to bool.
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.IPredicate">
            <summary> A Predicate is a special type of Expression that carries the guarantee
            that the {@link Expressions.Expression#GetBoolean(iitem)}
            method is supported. Predicates are particularly useful for issuing
            queries to Visualization.Substrate Data structures. To create a Predicate, one can
            either Instantiate the desired Predicate instances directly, or
            write a parseable textual Expressions. The documentation for the
            {@link Expressions.Parsers.ExpressionParser} class includes
            a full reference for Visualization.Substrate's textual Expressions language.
            
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.Predefined.FreeExpression`1">
            <summary>
            This expression is directedly constructed by a Func{object, T}. You can think it as an adapter of Func. 
            It is not parsed from string, so you can only use it to create Expression by constructing instances. 
            The problem with this class is that you cannot analyze the actual content in the instance. For example,
            you can create a function that extract a value in a column from a table and generate a value accordingly.
            But the <c>ExpressionAnalyzer.HasDependency</c> will never know such information.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Hallucination.Expressions.Predefined.FreeExpression`1.PredicateFunc">
            <summary>
            Uses this Predicate as a Func{object, bool}, null if it is not a Predicate
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.Predefined.IfExpression">
            <summary> Expression instance representing an "if then else" clause in the Visualization.Substrate
            Expressions language.
            
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.IfExpression.#ctor(Hallucination.Expressions.IPredicate,Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression)">
             <summary> Create a new IfExpression.</summary>
             <param name="test">The predicate test for the if statement
            .</param>
             <param name="thenExpr">The Expressions to evaluate if the test predicate
             evaluates to true
            .</param>
             <param name="elseExpr">The Expressions to evaluate if the test predicate
             evaluates to false
            .</param>
        </member>
        <member name="P:Hallucination.Expressions.Predefined.IfExpression.TestPredicate">
            <summary> Get the test predicate.</summary>
            <returns> the test predicate
            </returns>
            <summary> Set the test predicate.</summary>
        </member>
        <member name="P:Hallucination.Expressions.Predefined.IfExpression.ThenExpression">
            <summary> Set the then Expressions</summary>
        </member>
        <member name="P:Hallucination.Expressions.Predefined.IfExpression.ElseExpression">
            <summary> the else Expressions</summary>
        </member>
        <member name="T:Hallucination.Expressions.Predefined.Literal">
            <summary> Abstarct base class for a Literal Expression that evaluates to a
            constant value.
            </summary>
        </member>
        <member name="T:Hallucination.Expressions.Predefined.NotPredicate">
            <summary> Predicate representing the negation of another predicate.
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.NotPredicate.#ctor(Hallucination.Expressions.IPredicate)">
             <summary> Create a new NotPredicate.</summary>
             <param name="p">The predicate to negate
            .</param>
        </member>
        <member name="P:Hallucination.Expressions.Predefined.NotPredicate.Predicate">
            <summary> Get the negated predicate.</summary>
            <returns> the negated predicate
            </returns>
        </member>
        <member name="T:Hallucination.Expressions.Predefined.NumericLiteral">
            <summary> Literal Expressions of a numeric value. 
            
            </summary>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.NumericLiteral.#ctor(System.Int32)">
             <summary> Create a new integer NumericLiteral.</summary>
             <param name="x">The literal numeric value
            .</param>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.NumericLiteral.#ctor(System.Int64)">
             <summary> Create a new long NumericLiteral.</summary>
             <param name="x">The literal numeric value
            .</param>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.NumericLiteral.#ctor(System.Single)">
             <summary> Create a new float NumericLiteral.</summary>
             <param name="x">The literal numeric value
            .</param>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.NumericLiteral.#ctor(System.Double)">
             <summary> Create a new double NumericLiteral.</summary>
             <param name="x">The literal numeric value
            .</param>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.NumericLiteral.#ctor(System.Object)">
             <summary> Create a new NumericLiteral.</summary>
             <param name="x">The literal numeric value, must be an instance of 
             {@link java.lang.Number}, otherwise an exception will be thrown.
            .</param>
        </member>
        <member name="T:Hallucination.Expressions.Predefined.RangePredicate">
            <summary> Predicate instance that evaluates if a value is contained within
            a bounded range.
            
            </summary>
        </member>
        <member name="F:Hallucination.Expressions.Predefined.RangePredicate.IN_IN">
            <summary>Indicates the both the left and right bounds are inclusive </summary>
        </member>
        <member name="F:Hallucination.Expressions.Predefined.RangePredicate.IN_EX">
            <summary>Indicates an inclusive left bound and exclusive right bound </summary>
        </member>
        <member name="F:Hallucination.Expressions.Predefined.RangePredicate.EX_IN">
            <summary>Indicates an exclusive left bound and inclusive right bound </summary>
        </member>
        <member name="F:Hallucination.Expressions.Predefined.RangePredicate.EX_EX">
            <summary>Indicates the both the left and right bounds are exclusive </summary>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.RangePredicate.#ctor(Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression)">
             <summary> Create a new RangePredicate. Both bounds are assumed to be inclusive.</summary>
             <param name="middle">The value to test for membership in the range
            .</param>
             <param name="left">The lower range bound
            .</param>
             <param name="right">The upper range bound
            .</param>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.RangePredicate.#ctor(Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression,System.Collections.IComparer)">
             <summary> Create a new RangePredicate. Both bounds are assumed to be inclusive.</summary>
             <param name="middle">The value to test for membership in the range
            .</param>
             <param name="left">The lower range bound
            .</param>
             <param name="right">The upper range bound
            .</param>
             <param name="cmp">The comparator to use for comparing Data values
            .</param>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.RangePredicate.#ctor(System.Int32,Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression)">
             <summary> Create a new RangePredicate.</summary>
             <param name="operation">operation code indicating the inclusiveness /
             exclusiveness of the bounds
            .</param>
             <param name="middle">The value to test for membership in the range
            .</param>
             <param name="left">The lower range bound
            .</param>
             <param name="right">The upper range bound
            .</param>
        </member>
        <member name="M:Hallucination.Expressions.Predefined.RangePredicate.#ctor(System.Int32,Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression,Hallucination.Expressions.IExpression,System.Collections.IComparer)">
             <summary> Create a new RangePredicate.</summary>
             <param name="operation">operation code indicating the inclusiveness /
             exclusiveness of the bounds
            .</param>
             <param name="middle">The value to test for membership in the range
            .</param>
             <param name="left">The lower range bound
            .</param>
             <param name="right">The upper range bound
            .</param>
             <param name="cmp">The comparator to use for comparing Data values
            .</param>
        </member>
        <member name="P:Hallucination.Expressions.Predefined.RangePredicate.MiddleExpression">
            <summary> Get the middle Expressions being tested for inclusion in the range</summary>
            <returns> the middle Expressions
            </returns>
        </member>
        <member name="T:Hallucination.Util.Collections.SortedList`2">
            <summary>
             Represents a collection of associated keys and values
             that are sorted by the keys and are accessible by key
             and by index.
            </summary>
        </member>
        <member name="T:Lava.Algorithm.Graph.ConnectedComponentCluster">
            <summary>
            An algorithm set to find all connected components in a graph
            </summary>
        </member>
        <member name="M:Lava.Algorithm.Graph.ConnectedComponentCluster.CountWeakComponents(Lava.Data.IGraph)">
            <summary>
            find weak components and stored into light GraphComponent.<br/>
            BFS travel the graph.
            </summary>
            <param name="graph">The graph you want to find its weak component.</param>
            <returns>The weak components.</returns>
        </member>
        <member name="T:Lava.Data.ColumnGroup">
            <summary>
            ColumnGroup is used to <br/>
            1.copy a table. <br/>
            2.add a series of columns to a table like a template. <br/>
            </summary>
        </member>
        <member name="F:Lava.Data.ColumnGroup._manager">
            <summary>
            Manages the columns in this column group.
            </summary>
        </member>
        <member name="F:Lava.Data.ColumnGroup._editable">
            <summary>
            Flag indicating if this column group is writable.
            The column group will become readonly when Lock() it.
            </summary>
        </member>
        <member name="M:Lava.Data.ColumnGroup.#ctor">
            <summary>
            Default constructor. You need to add/remove columns by yourself.
            </summary>
        </member>
        <member name="M:Lava.Data.ColumnGroup.#ctor(Lava.Data.Manager.IColumnManager,System.Boolean)">
            <summary>
            Builds a group from a given manager. If you want to allow further editing,
            the columns in the manager will be copied to this group, so that the editing
            will NOT affect the original manager.
            </summary>
            <param name="manager">The manager to extract columns.</param>
            <param name="editable">True if you want to edit the columns in this group.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.Lock">
            <summary>
            Prevents the group from further editing.
            </summary>
        </member>
        <member name="M:Lava.Data.ColumnGroup.CreateTable">
            <summary>
            Makes an empty table from this group.
            </summary>
            <returns>An empty table having the exact scheme.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.BuildColumn(System.Int32)">
            <summary>
            Builds a size zero column at the given column index.
            </summary>
            <param name="cidx">Column index.</param>
            <returns>An empty column.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.BuildColumn(System.String)">
            <summary>
            Builds a size zero column at the given column name.
            </summary>
            <param name="cname">Column name.</param>
            <returns>An empty column.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.BuildColumn(System.Int32,System.Int32)">
            <summary>
            Builds a column with the initial size at given column index.
            </summary>
            <param name="cidx">Column index.</param>
            <param name="size">Initial capacity.</param>
            <returns>An empty column.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.BuildColumn(System.String,System.Int32)">
            <summary>
            Builds column with inited size at given column name.
            </summary>
            <param name="cname">Column name.</param>
            <param name="size">Initial capacity.</param>
            <returns>An empty column.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.GetColumnIndex(System.String)">
            <summary>
            Converts between column index and column name.
            </summary>
            <param name="cname">Column name.</param>
            <returns>The column index.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.GetColumnName(System.Int32)">
            <summary>
            Converts between column index and column name.
            </summary>
            <param name="cidx">Column index.</param>
            <returns>The column name.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.RemoveColumn(System.Int32)">
            <summary>
            Removes a column from this group.
            </summary>
            <param name="cidx">The column index to remove.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.RemoveColumn(System.String)">
            <summary>
            Removes a column from this group.
            </summary>
            <param name="cname">The column name to remove.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.GetColumnType(System.Int32)">
            <summary>
            Gets the column type at the column index.
            </summary>
            <param name="cidx">Column index.</param>
            <returns>The type of the column content.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.GetColumnType(System.String)">
            <summary>
            Gets the column type with the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The type of the column content.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.AddColumn``1(System.String,``0)">
            <summary>
            Adds a standard column in this column group. 
            Use default(T) as the default value if the defaultValue param is not set.
            </summary>
            <typeparam name="T">The value type of the added column.</typeparam>
            <param name="name">The name of the column.</param>
            <param name="defaultValue">The default value of this column to add.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.AddConstantColumn``1(System.String,``0)">
            <summary>
            Adds a constant column in this column group. 
            Use default(T) as the constant value if the defaultValue param is not set.
            </summary>
            <typeparam name="T">The value type of the added column.</typeparam>
            <param name="name">The name of the column.</param>
            <param name="defaultValue">The default value of this column to add.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.SetupColumn(System.String,Lava.Data.IColumn)">
            <summary>
            Adds a user created column with its name.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="column">The column to add.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.AddColumns(Lava.Data.ColumnGroup)">
            <summary>
            Merges another column group in.
            
            If two or more columns conflict, throw a DuplicateNameException.
            </summary>
            <param name="columns">Another column group.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.EnsureColumns(Lava.Data.ColumnGroup)">
            <summary>
            Merges another column group in.
            If duplicated columns exist, ignore them.
            </summary>
            <param name="columns">Another column group.</param>
        </member>
        <member name="M:Lava.Data.ColumnGroup.ContainsColumn(System.String)">
            <summary>
            Tests this column group contains a column with the given name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>true</c> if the specified column name is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.EnsureStyles(System.String[])">
            <summary>
            Ensures the styles are in the table. If any of the styles do not exist,
            standard columns are added to make sure their existence.
            </summary>
            <param name="styles">The style names.</param>
            <returns>True if the operation is successful.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.EnsureStyle(System.String)">
            <summary>
            Ensures the style is in the table. If it does not exist, 
            a standard column is added to make sure its existence.
            </summary>
            <param name="style">The style name.</param>
            <returns>True if the operation is successful.</returns>
        </member>
        <member name="M:Lava.Data.ColumnGroup.EnsureStyles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures the styles are in the table. If any of the styles do not exist,
            standard columns are added to make sure their existence.
            </summary>
            <param name="styles">The style names.</param>
            <returns>True if the operation is successful.</returns>
        </member>
        <member name="P:Lava.Data.ColumnGroup.ColumnCount">
            <summary>
            Gets the number of columns in this group.
            </summary>
        </member>
        <member name="P:Lava.Data.ColumnGroup.ColumnNames">
            <summary>
            Gets the ordered names that in this group.
            </summary>
        </member>
        <member name="T:Lava.Data.Column.ConstantColumn`1">
            <summary>
            A column that holds only one value (or reference) for all rows. You cannot change the value once
            it is created. It does NOT throw exception when you set the values in it, which means Set operation
            will return a false indicating that the set operation fails. However, it will silently expand the 
            column size if necessary.
            </summary>
            <typeparam name="T">The type of elements in this column</typeparam>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.#ctor(System.Int32,`0)">
            <summary>
            Constructs a <c>ConstantColumn</c> with initial capacity and a default/constant value.
            </summary>
            <param name="capacity">The column initial capacity.</param>
            <param name="defaultValue">The default value (i.e., the constant value).</param>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.#ctor(System.Int32)">
            <summary>
            Constructs a <c>ConstantColumn</c> with capacity and default(T) as the default/constant value.
            </summary>
            <param name="capacity">The column initial capacity.</param>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.#ctor">
            <summary>
            Constructs a <c>ConstantColumn</c> with capacity = 0 and default(T) as the default/constant value.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.#ctor(`0)">
            <summary>
            Constructs a <c>ConstantColumn</c> with initial capacity = 0 and the default/constant value.
            </summary>
            <param name="defaultValue">The default value (i.e., the constant value).</param>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.Clear(System.Int32)">
            <summary>
            Reverts the specified row back to the column's default value, expand
            this column if necessary. ** IMPORTANT ** This function will *NOT*
            trigger CellChanged Event!!
            </summary>
            <param name="row">The row at which to set the value.</param>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.Get(System.Int32)">
            <summary>
            Gets the data value at the specified row.
            </summary>
            <param name="row">The row.</param>
            <returns>The data value.</returns>
            <exception cref="T:Lava.Exceptions.NotExistException">This row at index:[ + row + ] does NOT exist.</exception>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.Set(System.Int32,`0)">
            <summary>
            Sets the value at a given column row.
            </summary>
            <param name="row">The row in the column.</param>
            <param name="value">The value to set.</param>
            <returns>True if the value is changed, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Column.ConstantColumn`1.EmptyClone(System.Int32)">
            <summary>
            Creates an empty copy of this column with given initial capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>A new instance of the same column.</returns>
        </member>
        <member name="P:Lava.Data.Column.ConstantColumn`1.ReadOnly">
            <summary>
            Indicates if the values in this column are read-only.
            </summary>
            <exception cref="T:System.ArgumentException">You cannot change the ReadOnly status for a constant column.</exception>
        </member>
        <member name="P:Lava.Data.Column.ConstantColumn`1.RowCount">
            <summary>
            Gets row count.
            </summary>
        </member>
        <member name="T:Lava.Data.Column.IExpressionColumn">
            <summary>
            The interface for expression column.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.IExpressionColumn.Dispose">
            <summary>
            Disposes this column and everything in it.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.IExpressionColumn.Table">
            <summary>
            Gets the table that the values in this column is evaluating on.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.IExpressionColumn.Expression">
            <summary>
            Gets the expression that evaluates all the values in this column.
            </summary>
        </member>
        <member name="T:Lava.Data.Column.ExpressionColumn`1">
            <summary>
            The implementation of expression column. An expression column is an calculation-based column instead
            of value-based column. It needs an expression to decide the final values. So you cannot set the value
            in the cells directly. The expression can be a simple result from number calculations or string operations.
            Or it can be a derived value from other column in a given table (that this expression is evaluated
            </summary>
            <typeparam name="T">The result type of this column.</typeparam>
        </member>
        <member name="M:Lava.Data.Column.ExpressionColumn`1.#ctor(Lava.Data.ITable,Hallucination.Expressions.IExpression)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table that the values in this column is evaluating on.</param>
            <param name="expr">The expression that evaluates all the values in this column.</param>
        </member>
        <member name="M:Lava.Data.Column.ExpressionColumn`1.Dispose">
            <summary>
            Disposes this column, remove all listeners, clear all caches.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.ExpressionColumn`1.ExpressionChanged(Hallucination.Expressions.IExpression)">
            <summary>
            If this expression is changed, all rows need to update. This function is used only by this class
            </summary>
            <param name="expr">The changed expressio.</param>
        </member>
        <member name="M:Lava.Data.Column.ExpressionColumn`1.Clear(System.Int32)">
            <summary>
            Reverts the specified row back to the column's default value, expand
            this column if necessary. ** IMPORTANT ** This function will *NOT*
            trigger CellChanged Event!!
            </summary>
            <param name="row">The row at which to set the value.</param>
        </member>
        <member name="M:Lava.Data.Column.ExpressionColumn`1.Get(System.Int32)">
            <summary>
            Gets the data value at the specified row.
            </summary>
            <param name="row">The row where the value is stored.</param>
            <returns>The data value.</returns>
        </member>
        <member name="M:Lava.Data.Column.ExpressionColumn`1.Set(System.Int32,`0)">
            <summary>
            Sets the data value at the specified row.
            </summary>
            <param name="row">The row from which to retrieve the value.</param>
            <param name="value">The value to set.</param>
            <returns>True if that cell is actually update.</returns>
        </member>
        <member name="M:Lava.Data.Column.ExpressionColumn`1.EmptyClone(System.Int32)">
            <summary>
            Gives a clean copy of this column with given initial capacity. Clean
            copy here means that the new instances holds only default values.
            </summary>
            <param name="size">The inital size of the newly created column.</param>
            <returns>The newly created column instance.</returns>
        </member>
        <member name="P:Lava.Data.Column.ExpressionColumn`1.ReadOnly">
            <summary>
            Indicates if the values in this column are read-only.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.ExpressionColumn`1.Expression">
            <summary>
            Gets the expression that evaluates all the values in this column.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.ExpressionColumn`1.Table">
            <summary>
            Gets the table that the values in this column is evaluating on.
            </summary>
        </member>
        <member name="P:Lava.Data.Column.ExpressionColumn`1.RowCount">
            <summary>
            Gets row count.
            </summary>
        </member>
        <member name="T:Lava.Data.Column.InternalColumn`1">
            <summary>
            Standard column only used internally. It is READONLY for user.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Lava.Data.Column.StandardColumn`1">
            <summary>
            Standard column implement. Use List to store the values.
            </summary>
            <typeparam name="T">data type</typeparam>
        </member>
        <member name="F:Lava.Data.Column.StandardColumn`1._data">
            <summary>
            The data to store the actual values
            </summary>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.#ctor">
            <summary>
            Default constructor. Uses zero capacity and default(T).
            </summary>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.#ctor(System.Int32)">
            <summary>
            Uses the <c>capacity</c> as initial capacity, and
            default(T) as default value.
            </summary>
            <param name="capacity">original capacit.</param>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Column.StandardColumn`1"/> class.
            Uses 0 as initial capacity, and <c>defaultValue</c> as default value.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.#ctor(System.Int32,`0)">
            <summary>
            Uses <c>capacity</c> as initial capacity, and <c>defaultValue</c>
            as default value.
            </summary>
            <param name="capacity">original capacit.</param>
            <param name="defaultValue">column default valu.</param>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.Clear(System.Int32)">
            <summary>
            Reverts the specified row back to the column's default value, expand
            this column if necessary. ** IMPORTANT ** This function will *NOT*
            trigger CellChanged Event!!
            </summary>
            <param name="row">The row at which to set the valu.</param>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.Get(System.Int32)">
            <summary>
            Gets the data value at the specified row.
            </summary>
            <param name="row">The row from which to retrieve the valu.</param>
            <returns>The data value.</returns>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.Set(System.Int32,`0)">
            <summary>
            Sets the data value at the specified row.
            </summary>
            <param name="row">The row from which to retrieve the valu.</param>
            <param name="value">The value to se.</param>
            <returns>True if that cell is actually update.</returns>
        </member>
        <member name="M:Lava.Data.Column.StandardColumn`1.EmptyClone(System.Int32)">
            <summary>
            Gives a clean copy of this column with given initial capacity. Clean
            copy here means that the new instances holds only default values.
            </summary>
            <param name="size">The inital size of the newly created colum.</param>
            <returns>The newly created column instance.</returns>
        </member>
        <member name="P:Lava.Data.Column.StandardColumn`1.RowCount">
            <summary>
            Gets the number of rows in this data column.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Column.InternalColumn`1"/> class.
            </summary>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Column.InternalColumn`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Column.InternalColumn`1"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Column.InternalColumn`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.Set(System.Int32,`0)">
            <summary>
            Sets the specified row. This function is disabled for general users, because the
            InternalColumn is supposed to be used by LAVA itself. So we do not allow general
            users to change its values. For LAVA, please call InternalSet function, which has
            internal visibility, instead!
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
            <returns>.</returns>
            <exception cref="T:Lava.Exceptions.ForbiddenException">Trying to write a Readonly Column.</exception>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.Clear(System.Int32)">
            <summary>
            This Clear function only expands this column if necessary. If the specified cell is
            already given a value, it is *NOT* reverted back to the default value. If you want
            to change the value to default, please call InternalSet function specifically!
            Also, Clear function does *NOT* trigger CellChanged events, either!
            </summary>
            <param name="row">cell row inde.</param>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.InternalClear(System.Int32)">
            <summary>
            Clear data. Only used internal
            </summary>
            <param name="row">cell row inde.</param>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.InternalSet(System.Int32,`0)">
            <summary>
            Set values internally.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
            <returns>True if the value is updated successfully.</returns>
        </member>
        <member name="M:Lava.Data.Column.InternalColumn`1.EmptyClone(System.Int32)">
            <summary>
            Gives a clean copy of this column with given initial capacity. Clean
            copy here means that the new instances holds only default values.
            </summary>
            <param name="size">The inital size of the newly created column.</param>
            <returns>
            The newly created column instance.
            </returns>
        </member>
        <member name="P:Lava.Data.Column.InternalColumn`1.ReadOnly">
            <summary>
            Indicates if the values in this column are read-only.
            </summary>
            <exception cref="T:Lava.Exceptions.ForbiddenException">Trying to write a Readonly Column.</exception>
        </member>
        <member name="P:Lava.Data.Column.InternalColumn`1.Internal">
            <summary>
            Indicates if this column is only for internal use. Such as Shape, Layer,
            ZIndex, and Look. This is just a helper indicator, which is mainly used
            in the LAVA framework. Setting this indicator to true will also make the
            Debugger ignore this column! So if you want to store some value in a table
            and do not want them to show up in the debugger, please set this flag true.
            </summary>
            <exception cref="T:Lava.Exceptions.ForbiddenException">Cannot change Internal flag for InternalColumn</exception>
        </member>
        <member name="T:Lava.Data.CellChangeHandler`1">
            <summary>
            Delegate that will be notified when a cell in a column is truly updated.
            This delegate will ignore the deletion and insertion operations.
            </summary>
            <typeparam name="T">The value of values in the column.</typeparam>
            <param name="sender">The column who triggers the event.</param>
            <param name="crow">The row in the column.</param>
            <param name="prev">The previous value.</param>
        </member>
        <member name="T:Lava.Data.TableCellUpdatedHandler`1">
            <summary>
            Delegate that will be notified when a cell is truly updated.
            </summary>
            <typeparam name="T">The type of values store in the column.</typeparam>
            <param name="sender">The table that this handler is register to.</param>
            <param name="trow">The row in the table of the changed cell.</param>
            <param name="prev">The previous value in the cell.</param>
            <param name="curr">The current value in the cell.</param>
        </member>
        <member name="T:Lava.Data.CellObjectChangeHandler">
            <summary>
            Delegate that will be notified when a cell in a column is truly updated.
            This delegate will ignore the deletion and insertion operations.
            
            The non-generic version of delegate, which should be used ONLY when the column
            type is unknown to you. Because it may cause boxing/unboxing operations, which
            slows down the program. Please notice that two versions of delegates can be 
            added to the same column, but the generic version will be triggered BEFORE the
            non-generic version.    
            </summary>
            <param name="sender">The column who triggers the event.</param>
            <param name="crow">The row in the column.</param>
            <param name="prev">The previous value.</param>
        </member>
        <member name="T:Lava.Data.CompositeSetEventHandler">
            <summary>
            Set changed in <c>CompositeItemSet</c>
            </summary>
            <param name="group">The group name of IItemSet.</param>
            <param name="type">Insert, Delete, or Update.</param>
        </member>
        <member name="T:Lava.Data.DataEvent">
            <summary>
            The data event types enum.
            
            Insert: new data added
            Delete: data removed
            Update: data updated
            </summary>
        </member>
        <member name="F:Lava.Data.DataEvent.Insert">
            <summary>
            new data added
            </summary>
        </member>
        <member name="F:Lava.Data.DataEvent.Delete">
            <summary>
            data removed
            </summary>
        </member>
        <member name="F:Lava.Data.DataEvent.Update">
            <summary>
            data updated
            </summary>
        </member>
        <member name="T:Lava.Data.DegreeEvent">
            <summary>
            The event types of degree changed in a graph
            </summary>
        </member>
        <member name="F:Lava.Data.DegreeEvent.IndegreeIncreased">
            <summary>
            Indegree increase
            </summary>
        </member>
        <member name="F:Lava.Data.DegreeEvent.IndegreeDecreased">
            <summary>
            Indegree decrease
            </summary>
        </member>
        <member name="F:Lava.Data.DegreeEvent.OutdegreeIncreased">
            <summary>
            Outdegree increase
            </summary>
        </member>
        <member name="F:Lava.Data.DegreeEvent.OutdegreeDecreased">
            <summary>
            Outdegree decrease
            </summary>
        </member>
        <member name="T:Lava.Data.DegreeEventHandler">
            <summary>
            Delegate that will be triggered when a node in a graph has changed its degree.
            All triggers are happened after the operations are done. For example, if it is a
            degree-decrease event, when the delegate is called, the edge has already been
            removed. This is different from table row-delete event delegates, in which the 
            table delegates are called BEFORE the actual deletion.
            </summary>
            <param name="nrow">The node row which has degree value change.</param>
            <param name="eventType">event typ.</param>
        </member>
        <member name="T:Lava.Data.PropertyChangeHandler">
            <summary>
            Properties change in <c>IItemSet</c>
            </summary>
            <param name="key"></param>
            <param name="prev"></param>
            <param name="curr"></param>
        </member>
        <member name="T:Lava.Data.TableColumnEventArgs">
            <summary>
            Contains params when table column changed event happened.
            </summary>
        </member>
        <member name="M:Lava.Data.TableColumnEventArgs.#ctor(Lava.Data.DataEvent,System.Int32,System.String)">
            <summary>
            Create a TableColumnEventArgs using all params
            </summary>
            <param name="type">event typ.</param>
            <param name="cidx">changed column inde.</param>
            <param name="cname">changed column nam.</param>
        </member>
        <member name="P:Lava.Data.TableColumnEventArgs.EventType">
            <summary>
            The event type: Delete or Insert
            </summary>
        </member>
        <member name="P:Lava.Data.TableColumnEventArgs.ColumnIndex">
            <summary>
            The removed/inserted column index
            </summary>
        </member>
        <member name="P:Lava.Data.TableColumnEventArgs.ColumnName">
            <summary>
            The removed/inserted column name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lava.Data.TableColumnEventHandler" -->
        <member name="T:Lava.Data.TableEventHandler">
            <summary>
            Delegate for <c>Table.TableChanged</c>. When the type is <c>Insert</c>, it could mean either a row
            (startRow == endRow and cidx &lt; 0), or a column (startRow == sender.MinRow and endRow == sender.MaxRow and cidx &gt;= 0).
            When the type is <c>Update</c>, it means that a cell is updated (startRow == endRow and cidx >=0).
            When the type is <c>Delete</c>, it also could mean a row or column, just like when type is <c>Insert</c>.
            
            **Important notice**: for <c>Insert</c> and <c>Update</c> events, the Handlers are called *AFTER* things
            are changed. However, for <c>Delete</c> event, the handlers are called *BEFORE* things are actually
            deleted.
            </summary>
            <param name="sender">The event sender, the changed table.</param>
            <param name="startRow">The start row of the event.</param>
            <param name="endRow">The end row of the event.</param>
            <param name="cidx">The column index of the event.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:Lava.Data.EdgeType">
            <summary>
            Type of edges in graphs or trees. Because each edge has a source and a target.
            We need to know if what is the direction if the edge is directed. For example,
            <c>In</c> means that the direction is from target to source.
            </summary>
        </member>
        <member name="T:Lava.Data.Graph">
            <summary>
            
            Graph:
            
            Tips:
            1. node id: comparable value in a column. or default row idx in node table
            2. edge id: row idx in edge table
            3. source/target node id in edge table: 
               point the node id in its comparable columns, default build two int column.must match node id
            4. invalid edge data (almost empty rows which are newly added) in edge table will be skipped now. 
               without exception
            5. Update data in node table:
                5.1. add row/insert node: (add event means add an empty row)
                     add a new clean node linked buff to prepare. 
                5.2. remove row/delete node: remove a node. delete all the edges linked to it.
                5.3. update node (node id column): remove the node with old id, and add new node.
                     id-duplicate is FORBIDDEN. 
                5.4. update node (other column): do nothing
            6. Update data in edge table:
                6.1. add edge: (add event means add an empty row)
                     do nothing. set invalid value
                6.2. delete edge: remove the edge in the graph.
                6.3. update edge (source/target columns): update graph. nonexistent node is FORBIDDEN
                6.4. update edge (other columns): do nothing.
            7. ATTENTION: Because add row to table means add an empty row. So, it's very dangerous 
               if you directly add rows to node/edge table without use Set to initialize.
            </summary>
        </member>
        <member name="T:Lava.Data.CompositeItemSet">
            <summary>
            CompositeItemSet is a special ItemSet. It contains multiple ItemSet.
            At a higher view, it is also a ItemSet contains the Items in its item sets.
            CompositeItemSet manages its item sets with a name key and stores them
            in "Dictionary". It implements the key abstract method in AbstractItemSet,
            so that you can use it as a whole ItemSet.
            </summary>
        </member>
        <member name="T:Lava.Data.AbstractItemSet">
            <summary>
            Implement basic features of an item set.
            
            Used in table implement
            
            </summary>
        </member>
        <member name="T:Lava.Data.IItemSet">
            <summary>
            Item set is a set contains items.
            It is in the view of items.
            
            Table is also an item set, it contains table items
            
            </summary>
        </member>
        <member name="M:Lava.Data.IItemSet.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns>True is it is previously not empty, false if it is already empty.</returns>
        </member>
        <member name="M:Lava.Data.IItemSet.PutProperty(System.String,System.Object)">
            <summary>
            Puts property to store, it will overwrite when the key previously is used and trigger a property changed event.
            </summary>
            <param name="key">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Lava.Data.IItemSet.GetProperty(System.String)">
            <summary>
            Gets a property.
            </summary>
            <param name="key">The property name.</param>
            <returns>The property value, null if the key does not exist.</returns>
        </member>
        <member name="M:Lava.Data.IItemSet.AddItem(Lava.Data.IItem)">
            <summary>
            Adds the item. The values in the passed-in item will be COPIED to this item set, and
            a new item will be generated accordingly, and returned.
            </summary>
            <param name="item">The item.</param>
            <returns>A new item instance that belongs to this item set and has values from the passed-in item.</returns>
        </member>
        <member name="M:Lava.Data.IItemSet.AddItem">
            <summary>
            Adds an empty item.
            </summary>
            <returns>The empty item just created.</returns>
        </member>
        <member name="M:Lava.Data.IItemSet.GetItem(System.Int32)">
            <summary>
            Gets the item at the given index. 
            </summary>
            <param name="idx">The index of the item.</param>
            <returns>The item at the specific index.</returns>
            <exception cref="T:Lava.Exceptions.InvalidDataException">If the index is not valid.</exception>
        </member>
        <member name="M:Lava.Data.IItemSet.RemoveItem(Lava.Data.IItem)">
            <summary>
            Removes an item.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>True if the removal is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IItemSet.Contains(Lava.Data.IItem)">
            <summary>
            Determines if this item belongs to this item set.
            </summary>
            <param name="item">The item to be tested.</param>
            <returns>True if this item belongs to this item set, false otherwise.</returns>
        </member>
        <member name="P:Lava.Data.IItemSet.ItemCount">
            <summary>
            Gets the item count.
            </summary>
            <value>
            The item count.
            </value>
        </member>
        <member name="E:Lava.Data.IItemSet.PropertyChanged">
            <summary>
            Triggers when a property is changed.
            </summary>
        </member>
        <member name="P:Lava.Data.IItemSet.Items">
            <summary>
            Gets all items in this instance.
            </summary>
            <returns>All items in this instance.</returns>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.AddItem(Lava.Data.IItem)">
            <summary>
            Adds the item. The values in the passed-in item will be COPIED to this item set, and
            a new item will be generated accordingly, and returned.
            </summary>
            <param name="item">The item.</param>
            <returns>
            A new item instance that belongs to this item set and has values from the passed-in item.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.AddItem">
            <summary>
            Adds an empty item.
            </summary>
            <returns>
            The empty item just created.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.RemoveItem(Lava.Data.IItem)">
            <summary>
            Removes an item.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>
            True if the removal is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns>
            True is it is previously not empty, false if it is already empty.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.Contains(Lava.Data.IItem)">
            <summary>
            Determines if this item belongs to this item set.
            </summary>
            <param name="item">The item to be tested.</param>
            <returns>
            True if this item belongs to this item set, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.GetItem(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="idx">The index of the item.</param>
            <returns>
            The item at the specific index.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Fires all the handlers for property changes.
            </summary>
            <param name="key">The property key.</param>
            <param name="prev">The previous value.</param>
            <param name="curr">The current value.</param>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.PutProperty(System.String,System.Object)">
            <summary>
            Puts property to store, it will overwrite when the key previously is used and trigger a property changed event.
            </summary>
            <param name="key">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Lava.Data.AbstractItemSet.GetProperty(System.String)">
            <summary>
            Gets a property.
            </summary>
            <param name="key">The property name.</param>
            <returns>
            The property value, null if the key does not exist.
            </returns>
        </member>
        <member name="P:Lava.Data.AbstractItemSet.ItemCount">
            <summary>
            Gets the item count.
            </summary>
            <value>
            The item count.
            </value>
        </member>
        <member name="P:Lava.Data.AbstractItemSet.Items">
            <summary>
            Gets all items in this instance.
            </summary>
            <returns>All items in this instance.</returns>
        </member>
        <member name="E:Lava.Data.AbstractItemSet.PropertyChanged">
            <summary>
            Occurs when any of the property changes its value.
            </summary>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.CompositeItemSet"/> class.
            </summary>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.AddItem(Lava.Data.IItem)">
            <summary>
            AddItem is not supported.
            </summary>
            <param name="item">The item.</param>
            <returns>
            A new item instance that belongs to this item set and has values from the passed-in item.
            </returns>
            <exception cref="T:Lava.Exceptions.UnsupportedException">AddItem is not supported in CompositeItemSet.</exception>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.AddItem">
            <summary>
            AddItem is not supported.
            </summary>
            <returns>
            A new item instance that belongs to this item set and has values from the passed-in item.
            </returns>
            <exception cref="T:Lava.Exceptions.UnsupportedException">AddItem is not supported in CompositeItemSet.</exception>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.RemoveItem(Lava.Data.IItem)">
            <summary>
            Removes an item.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>
            True if the removal is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns>
            True is it is previously not empty, false if it is already empty.
            </returns>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.Contains(Lava.Data.IItem)">
            <summary>
            Determines if this item belongs to this item set.
            </summary>
            <param name="item">The item to be tested.</param>
            <returns>
            True if this item belongs to this item set, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.GetItem(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="idx">The index of the item.</param>
            <returns>
            The item at the specific index.
            </returns>
            <exception cref="T:Lava.Exceptions.UnsupportedException">GetItem at index is not supported in CompositeItemSet.</exception>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.AddSet(System.String,Lava.Data.IItemSet)">
            <summary>
            Adds the set to this composite item set and gives it a name for later queries.
            </summary>
            <param name="name">The name.</param>
            <param name="itemSet">The item set.</param>
            <exception cref="T:Lava.Exceptions.DuplicateNameException">If name is already used in this set.</exception>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.GetItemSet(System.String)">
            <summary>
            Gets the item set.
            </summary>
            <param name="name">The name.</param>
            <returns>The Item set with the given name.</returns>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.RemoveItemSet(System.String)">
            <summary>
            Removes an item set by its name.
            </summary>
            <param name="name">The name of the item set.</param>
            <returns>True if successfully removed, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.RemoveAllSets">
            <summary>
            Removes all sets.
            </summary>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.Contains(System.String)">
            <summary>
            Determines whether this instance contains an item set of the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>True</c> if there is a match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.CompositeItemSet.Contains(Lava.Data.IItemSet)">
            <summary>
            Determines whether this instance contains an item set.
            </summary>
            <param name="itemSet">The item set.</param>
            <returns>
              <c>True</c> if there is a match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Lava.Data.CompositeItemSet.SetChanged">
            <summary>
            Occurs when the contained item set changed. For example, an item set is added or removed.
            </summary>
        </member>
        <member name="P:Lava.Data.CompositeItemSet.ItemCount">
            <summary>
            Gets the item count.
            </summary>
            <value>
            The item count.
            </value>
        </member>
        <member name="P:Lava.Data.CompositeItemSet.Items">
            <summary>
            Gets all items in this instance.
            </summary>
            <returns>All items in this instance.</returns>
        </member>
        <member name="P:Lava.Data.CompositeItemSet.Names">
            <summary>
            Gets the names of item sets in this composite item set.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="P:Lava.Data.CompositeItemSet.ItemSets">
            <summary>
            Gets the item sets contained in this composite item set.
            </summary>
            <value>
            The item sets.
            </value>
        </member>
        <member name="T:Lava.Data.IGraph">
            <summary>
            Graph interface.
            </summary>
        </member>
        <member name="M:Lava.Data.IGraph.IsValidNode(Lava.Data.INode)">
            <summary>
            Determines whether the specified node is valid for this graph.
            </summary>
            <param name="node">The node.</param>
            <returns>
              <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.IsValidNode(System.Int32)">
            <summary>
            Determines whether the specified node is valid for this graph.
            </summary>
            <param name="nrow">The row # for the node.</param>
            <returns>
              <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.IsValidEdge(System.Int32)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="erow">The row # for the edge.</param>
            <returns>
              <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.IsValidEdge(Lava.Data.IEdge)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="edge">The edge.</param>
            <returns>
              <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.IsValidEdge(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="srow">The row number of the source node.</param>
            <param name="trow">The row number of the target node.</param>
            <returns>
              <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.IsValidEdge(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <returns>
              <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.AddEdge(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Adds an edge link between source and target.
            </summary>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <returns>
            The newly added edge.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds an edge link between source and target.
            </summary>
            <param name="srow">The row number of the source node.</param>
            <param name="trow">The row number of the target node.</param>
            <returns>
            The newly added edge.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.AddNode">
            <summary>
            Adds a new node.
            </summary>
            <returns>The newly added node.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.RemoveNode(Lava.Data.INode)">
            <summary>
            Removes the node from the graph.
            </summary>
            <param name="node">The node.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.RemoveNode(System.Int32)">
            <summary>
            Removes the node from the graph.
            </summary>
            <param name="nrow">The row number of the node.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.RemoveEdge(System.Int32)">
            <summary>
            Removes the edge from the graph.
            </summary>
            <param name="erow">The row number of the edge.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.RemoveEdge(Lava.Data.IEdge)">
            <summary>
            Removes the edge from the graph.
            </summary>
            <param name="edge">The edge.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.RemoveAdjacentEdges(System.Int32)">
            <summary>
            Removes the edges that connected to this node.
            </summary>
            <param name="nrow">The row number of the node.</param>
        </member>
        <member name="M:Lava.Data.IGraph.RemoveInEdges(System.Int32)">
            <summary>
            Removes the edges that point to this node.
            </summary>
            <param name="nrow">The row number of the node.</param>
        </member>
        <member name="M:Lava.Data.IGraph.RemoveOutEdges(System.Int32)">
            <summary>
            Removes the edges that point out from this node.
            </summary>
            <param name="nrow">The row number of the node.</param>
        </member>
        <member name="M:Lava.Data.IGraph.GetNode(System.Int32)">
            <summary>
            Gets the node.
            </summary>
            <param name="nrow">The row number of the node.</param>
            <returns>The node avatar.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetEdge(System.Int32)">
            <summary>
            Gets the edge.
            </summary>
            <param name="erow">The row number of the edge.</param>
            <returns>The edge avatar.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetSource(Lava.Data.IEdge)">
            <summary>
            Gets the source.
            </summary>
            <param name="edge">The edge.</param>
            <returns>The node avatar.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetSource(System.Int32)">
            <summary>
            Gets the source.
            </summary>
            <param name="erow">The row number for the edge.</param>
            <returns>The source row number.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetTarget(Lava.Data.IEdge)">
            <summary>
            Gets the target.
            </summary>
            <param name="edge">The edge.</param>
            <returns>The node avatar.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetTarget(System.Int32)">
            <summary>
            Gets the target.
            </summary>
            <param name="erow">The row number for the edge.</param>
            <returns>The target row number.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetAdjacent(System.Int32,System.Int32)">
            <summary>
            Given an edge and one of its end, gets the other end.
            </summary>
            <param name="erow">The edge row.</param>
            <param name="nrow">One end node of the edge.</param>
            <returns>The other end node row.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetAdjacent(Lava.Data.IEdge,Lava.Data.INode)">
            <summary>
            Given an edge and one of its end, gets the other end.
            </summary>
            <param name="edge">The edge.</param>
            <param name="node">One end node of the edge.</param>
            <returns>
            The other end node.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Gets the edge.
            </summary>
            <param name="srow">The source row.</param>
            <param name="trow">The target row.</param>
            <returns>The edge row, -1 if does not exist.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetEdge(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Gets the edge.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>The edge, null if does not exist.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetEdges(System.Int32,System.Int32)">
            <summary>
            Gets the edges that connect source and target. This is used in multi-edge cases.
            </summary>
            <param name="srow">The source row.</param>
            <param name="trow">The target row.</param>
            <returns>All edge rows that between source and target.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetEdges(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Gets the edges that connect source and target. This is used in multi-edge cases.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>All edges that between source and target.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetEdges(Lava.Data.INode)">
            <summary>
            Gets the edges that connect to the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>All adjacent edges.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetInEdges(Lava.Data.INode)">
            <summary>
            Gets the edges that point to the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The edges.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetOutEdges(Lava.Data.INode)">
            <summary>
            Gets the edges that point out from the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The edges.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetEdges(System.Int32)">
            <summary>
            Gets the edges that connect to the given node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            All adjacent edge rows.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetInEdges(System.Int32)">
            <summary>
            Gets the edges that point to the given node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>The edges.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetOutEdges(System.Int32)">
            <summary>
            Gets the edges that point out from the given node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>The edges.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetInDegree(System.Int32)">
            <summary>
            Gets in-degree of the node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>The in-degree.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetOutDegree(System.Int32)">
            <summary>
            Gets out-degree of the node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>The out-degree.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetDegree(System.Int32)">
            <summary>
            Gets degree (in + out) of the node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>The degree (in + out).</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetNeighbors(Lava.Data.INode)">
            <summary>
            Gets the neighbors.
            </summary>
            <param name="node">The node.</param>
            <returns>The neighbors.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetInNeighbors(Lava.Data.INode)">
            <summary>
            Gets the neighbors on the in-edges.
            </summary>
            <param name="node">The node.</param>
            <returns>The neighbors.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetOutNeighbors(Lava.Data.INode)">
            <summary>
            Gets the neighbors on the out-edges.
            </summary>
            <param name="node">The node.</param>
            <returns>The neighbors.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetNeighbors(System.Int32)">
            <summary>
            Gets the neighbors.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The neighbor rows.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetInNeighbors(System.Int32)">
            <summary>
            Gets the neighbors on the in-edges.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The neighbor rows.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetOutNeighbors(System.Int32)">
            <summary>
            Gets the neighbors on the out-edges.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The neighbor rows.
            </returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetSpanningTree(System.Int32)">
            <summary>
            Creates a SpanningTree start from the node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>The Spanning Tree.</returns>
        </member>
        <member name="M:Lava.Data.IGraph.GetSpanningTree(Lava.Data.INode)">
            <summary>
            Creates a SpanningTree start from the node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The Spanning Tree.
            </returns>
        </member>
        <member name="P:Lava.Data.IGraph.IsDirected">
            <summary>
            Indicates the graph is directed or undirected.
            </summary>
        </member>
        <member name="P:Lava.Data.IGraph.UseNodeKey">
            <summary>
            Indicates if the graph uses NodeKey or Row # to identify each node.
            </summary>
        </member>
        <member name="P:Lava.Data.IGraph.NodeKey">
            <summary>
            The column name of node key. The value is null when using non-generic Graph.
            </summary>
        </member>
        <member name="P:Lava.Data.IGraph.SourceKey">
            <summary>
            The column name of source node in edge table.
            </summary>
        </member>
        <member name="P:Lava.Data.IGraph.TargetKey">
            <summary>
            The column name of target node in edge table.
            </summary>
        </member>
        <member name="P:Lava.Data.IGraph.NodeCount">
            <summary>
            Gets the node count.
            </summary>
            <value>
            The node count.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.EdgeCount">
            <summary>
            Gets the edge count.
            </summary>
            <value>
            The edge count.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.Edges">
            <summary>
            Gets the edges.
            </summary>
            <value>
            The edges.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.EdgeRows">
            <summary>
            Gets the rows for all edges.
            </summary>
            <value>
            The edge rows.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.Nodes">
            <summary>
            Gets the nodes.
            </summary>
            <value>
            The nodes.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.NodeRows">
            <summary>
            Gets the rows for all nodes.
            </summary>
            <value>
            The node rows.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.NodeTable">
            <summary>
            Gets the node table.
            </summary>
            <value>
            The node table.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.EdgeTable">
            <summary>
            Gets or sets the edge table.
            </summary>
            <value>
            The edge table.
            </value>
        </member>
        <member name="P:Lava.Data.IGraph.WeakComponents">
            <summary>
            Calculates and get the weak components of the graph.
            </summary>
        </member>
        <member name="E:Lava.Data.IGraph.DegreeChanged">
            <summary>
            Occurs when the degree of a node changed.
            </summary>
        </member>
        <member name="F:Lava.Data.Graph.NODE_TABLE_NAME">
            <summary>
            The name of the node table in this composite item set.
            </summary>
        </member>
        <member name="F:Lava.Data.Graph.EDGE_TABLE_NAME">
            <summary>
            The name of the edge table in this composite item set;
            </summary>
        </member>
        <member name="F:Lava.Data.Graph.DEFAULT_NODE_KEY_COLUMN_NAME">
            <summary>
            The default node id column in the node table, which is null, meaning that we use the row number as node id to access nodes.
            </summary>
        </member>
        <member name="F:Lava.Data.Graph.DEFAULT_SOURCE_COLUMN_NAME">
            <summary>
            The default column name in the edge table to store the its source node info. If the node key is null, then it stores the row number,
            otherwise, store the key value.
            </summary>
        </member>
        <member name="F:Lava.Data.Graph.DEFAULT_TARGET_COLUMN_NAME">
            <summary>
            The default column name in the edge table to store the its target node info. If the node key is null, then it stores the row number,
            otherwise, store the key value.
            </summary>
        </member>
        <member name="F:Lava.Data.Graph._edgeEndCount">
            <summary>
            Indicates how many ends of the edge are valid node, could be zero, one or two.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.#ctor">
            <summary>
            Creates an empty graph with the default structure. The Graph is undirected.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.#ctor(System.Boolean)">
            <summary>
            Creates an empty graph with default structure.
            </summary>
            <param name="directed">If the graph is directed or not.</param>
        </member>
        <member name="M:Lava.Data.Graph.#ctor(Lava.Data.ITable,System.Boolean)">
            <summary>
            Creates a graph with a node table.
            The graph has none edge when created.
            </summary>
            <param name="nodes">The node table.</param>
            <param name="directed">If the graph is directed.</param>
        </member>
        <member name="M:Lava.Data.Graph.#ctor(Lava.Data.ITable,Lava.Data.ITable,System.Boolean)">
            <summary>
            Creates a graph with a node table and a edge table. The edge table stores the link info in 
            <see cref="F:Lava.Data.Graph.DEFAULT_SOURCE_COLUMN_NAME"/> and <see cref="F:Lava.Data.Graph.DEFAULT_TARGET_COLUMN_NAME"/> columns.
            These two columns hold integer values, indicating the rows for the source node and target node for each edge.
            </summary>
            <param name="nodes">The node table.</param>
            <param name="edges">The edge table.</param>
            <param name="directed">If the graph is directed.</param>
        </member>
        <member name="M:Lava.Data.Graph.#ctor(Lava.Data.ITable,Lava.Data.ITable,System.Boolean,System.String,System.String)">
            <summary>
            Creates a graph with a node table and edge table. The edge table stores the link info in the given two columns.
            These two columns hold integer values, indicating the rows for the source node and target node for each edge.
            </summary>
            <param name="nodes">The node table.</param>
            <param name="edges">The edge table.</param>
            <param name="directed">If the graph is directed.</param>
            <param name="sourceKey">The column name in the edge table to store the source node row.</param>
            <param name="targetKey">The column name in the edge table to store the target node row.</param>
        </member>
        <member name="M:Lava.Data.Graph.#ctor(Lava.Data.ITable,Lava.Data.ITable,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates a graph with a node table and edge table. The edge table stores the link info in the given two columns.
            These two columns hold integer values, indicating the rows for the source node and target node for each edge.
            </summary>
            <param name="nodes">The node table.</param>
            <param name="edges">The edge table.</param>
            <param name="directed">If the graph is directed.</param>
            <param name="nodeKey">The node key.</param>
            <param name="sourceKey">The column name in the edge table to store the source node row.</param>
            <param name="targetKey">The column name in the edge table to store the target node row.</param>
        </member>
        <member name="M:Lava.Data.Graph.Dispose">
            <summary>
            Disposes all things in the graph, including edge/node items, Graph structures, weak component cache...
            However, the node table and the edge table are not disposed.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.IsBlankNode(System.Int32)">
            <summary>
            Determines whether the node row is inited but has not given a key yet, when node key is used.
            If no node key is used, this function always says <c>false</c>.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
              <c>True</c> if it is blank; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.Init(Lava.Data.ITable,Lava.Data.ITable,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes the graph: checking the graph configures, building the link table, caching info necessary.
            </summary>
            <param name="nodes">The node table.</param>
            <param name="edges">The edge table.</param>
            <param name="directed">If the graph is directed.</param>
            <param name="nodeKey">The node key.</param>
            <param name="sourceKey">The column name in the edge table to store the source node row.</param>
            <param name="targetKey">The column name in the edge table to store the target node row.</param>
        </member>
        <member name="M:Lava.Data.Graph.CheckKeyMatched(Lava.Data.ITable,Lava.Data.ITable,System.String,System.String,System.String)">
            <summary>
            Checks if source/target column in edge table match node id type.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.CheckNodeKeyComparable(Lava.Data.ITable,System.String)">
            <summary>
            Checks if the node id column type is acceptable (must comparable).
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.CreateEdgeTable(System.String,System.String)">
            <summary>
            Creates an empty edge table with $sourceKey and $targetKey.
            </summary>
            <param name="sourceKey">The source node column name.</param>
            <param name="targetKey">The target node column name.</param>
            <returns>The edge table.</returns>
        </member>
        <member name="M:Lava.Data.Graph.NodeKeyChanged(Lava.Data.IColumn,System.Int32,System.Object)">
            <summary>
            Listens to the Key column in the node table, update the _link table if necessary.
            This handler is only added for the generic version of graph.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.NodeTableUpdateCache(Lava.Data.ITable,System.Int32,System.Int32,System.Int32,Lava.Data.DataEvent)">
            <summary>
            Listen to the node table, if a column is added/removed, update the _NodeKeyColumnIndex.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.OnNodeTableChanged(Lava.Data.ITable,System.Int32,System.Int32,System.Int32,Lava.Data.DataEvent)">
            <summary>
            When a row is added/removed in the node table, we update the link table.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.EdgeTableUpdateCache(Lava.Data.ITable,System.Int32,System.Int32,System.Int32,Lava.Data.DataEvent)">
            <summary>
            When a column is added/removed, we update _SourceKeyColumnIndex/_TargetColumnIndex
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.OnEdgeTableChanged(Lava.Data.ITable,System.Int32,System.Int32,System.Int32,Lava.Data.DataEvent)">
            <summary>
            If the edge table removes a row, we update the link table.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.OnSourceTargetKeyChanges(Lava.Data.IColumn,System.Int32,System.Object)">
            <summary>
            The node key version, if an edge has changed its values in source/target columns, we update
            the link table.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.OnSourceTargetRowChanges(Lava.Data.IColumn{System.Int32},System.Int32,System.Int32)">
            <summary>
            The row number version, if an edge has changed its values in source/target columns, we update
            the link table.
            </summary>
        </member>
        <member name="M:Lava.Data.Graph.IsValidNode(Lava.Data.INode)">
            <summary>
            Determines whether the specified node is valid for this graph.
            </summary>
            <param name="node">The node.</param>
            <returns>
              <c>True</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.IsValidNode(System.Int32)">
            <summary>
            Determines whether the specified node is valid for this graph.
            </summary>
            <param name="nrow">The row # for the node.</param>
            <returns>
              <c>True</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.IsValidEdge(System.Int32)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="erow">The row # for the edge.</param>
            <returns>
              <c>True</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.IsValidEdge(Lava.Data.IEdge)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="edge">The edge.</param>
            <returns>
              <c>True</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.IsValidEdge(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="srow">The row number of the source node.</param>
            <param name="trow">The row number of the target node.</param>
            <returns>
              <c>True</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.IsValidEdge(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Determines whether the specified edge is valid for this graph.
            </summary>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <returns>
              <c>True</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.AddEdge(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Adds an edge link between source and target.
            </summary>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <returns>
            The newly added edge.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds an edge link between source and target.
            </summary>
            <param name="srow">The source row.</param>
            <param name="trow">The target row.</param>
            <returns>
            The newly added edge.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.CheckNodeRow(System.Int32)">
            <summary>
            Checks the node row.
            </summary>
            <param name="nrow">The nrow.</param>
            <exception cref="T:Lava.Exceptions.InvalidDataException"></exception>
        </member>
        <member name="M:Lava.Data.Graph.CheckNode(Lava.Data.INode)">
            <summary>
            Checks the node.
            </summary>
            <param name="node">The node.</param>
            <exception cref="T:Lava.Exceptions.InvalidDataException"></exception>
        </member>
        <member name="M:Lava.Data.Graph.CheckEdge(Lava.Data.IEdge)">
            <summary>
            Checks the edge.
            </summary>
            <param name="edge">The edge.</param>
            <exception cref="T:Lava.Exceptions.InvalidDataException"></exception>
        </member>
        <member name="M:Lava.Data.Graph.AddNode">
            <summary>
            Adds a new node.
            </summary>
            <returns>
            The newly added node.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.AddNodeRow">
            <summary>
            Adds the node row.
            </summary>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Data.Graph.RemoveNode(Lava.Data.INode)">
            <summary>
            Removes the node from the graph.
            </summary>
            <param name="node">The node.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.RemoveNode(System.Int32)">
            <summary>
            Removes the node from the graph.
            </summary>
            <param name="nrow">The row number of the node.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.RemoveEdge(System.Int32)">
            <summary>
            Removes the edge from the graph.
            </summary>
            <param name="erow">The row number of the edge.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.RemoveEdge(Lava.Data.IEdge)">
            <summary>
            Removes the edge from the graph.
            </summary>
            <param name="edge">The edge.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.RemoveAdjacentEdges(System.Int32)">
            <summary>
            Removes the edges that connected to this node.
            </summary>
            <param name="nrow">The row number of the node.</param>
        </member>
        <member name="M:Lava.Data.Graph.RemoveInEdges(System.Int32)">
            <summary>
            Removes the edges that point to this node.
            </summary>
            <param name="nrow">The row number of the node.</param>
        </member>
        <member name="M:Lava.Data.Graph.RemoveOutEdges(System.Int32)">
            <summary>
            Removes the edges that point out from this node.
            </summary>
            <param name="nrow">The row number of the node.</param>
        </member>
        <member name="M:Lava.Data.Graph.GetNode(System.Int32)">
            <summary>
            Gets the node.
            </summary>
            <param name="nrow">The row number of the node.</param>
            <returns>
            The node avatar.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdge(System.Int32)">
            <summary>
            Gets the edge.
            </summary>
            <param name="erow">The row number of the edge.</param>
            <returns>
            The edge avatar.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdges(Lava.Data.INode,Lava.Data.EdgeType)">
            <summary>
            Gets the edges that are in/out/any to the given node.
            </summary>
            <param name="node">The node.</param>
            <param name="edgeType">Type of the edge.</param>
            <returns>
            All adjacent edges of the given type.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdges(System.Int32,Lava.Data.EdgeType)">
            <summary>
            Gets the edges that are in/out/any to the given node.
            </summary>
            <param name="nrow">The node row.</param>
            <param name="edgeType">Type of the edge.</param>
            <returns>
            All adjacent edge rows of the given type.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetInEdges(System.Int32)">
            <summary>
            Gets the edges that point to the given node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The edges.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetOutEdges(System.Int32)">
            <summary>
            Gets the edges that point out from the given node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The edges.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetSource(Lava.Data.IEdge)">
            <summary>
            Gets the source.
            </summary>
            <param name="edge">The edge.</param>
            <returns>
            The node avatar.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetSource(System.Int32)">
            <summary>
            Gets the source.
            </summary>
            <param name="erow">The row number for the edge.</param>
            <returns>
            The source row number.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetTarget(Lava.Data.IEdge)">
            <summary>
            Gets the target.
            </summary>
            <param name="edge">The edge.</param>
            <returns>
            The node avatar.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetTarget(System.Int32)">
            <summary>
            Gets the target row.
            </summary>
            <param name="erow">The row number for the edge.</param>
            <returns>
            The target row number.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetAdjacent(System.Int32,System.Int32)">
            <summary>
            Given an edge and one of its end, gets the other end.
            </summary>
            <param name="erow">The edge row.</param>
            <param name="nrow">One end node of the edge.</param>
            <returns>
            The other end node row.
            </returns>
            <exception cref="T:Lava.Exceptions.InvalidDataException"></exception>
        </member>
        <member name="M:Lava.Data.Graph.GetAdjacent(Lava.Data.IEdge,Lava.Data.INode)">
            <summary>
            Given an edge and one of its end, gets the other end.
            </summary>
            <param name="edge">The edge.</param>
            <param name="node">One end node of the edge.</param>
            <returns>
            The other end node.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Gets the edge.
            </summary>
            <param name="srow">The source row.</param>
            <param name="trow">The target row.</param>
            <returns>
            The edge row, -1 if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdge(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Gets the edge.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>
            The edge, null if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdges(System.Int32,System.Int32)">
            <summary>
            Gets the edges that connect source and target. This is used in multi-edge cases.
            If it is not a directed graph, the order of source and target will be ignored.
            </summary>
            <param name="srow">The source row.</param>
            <param name="trow">The target row.</param>
            <returns>
            All edge rows that between source and target.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdges(Lava.Data.INode,Lava.Data.INode)">
            <summary>
            Gets the edges that connect source and target. This is used in multi-edge cases.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>
            All edges that between source and target.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetInEdges(Lava.Data.INode)">
            <summary>
            Gets the edges that point to the given node. It should be the
            same as GetOutEdges and GetEdges if the graph is not directed.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The edges.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetOutEdges(Lava.Data.INode)">
            <summary>
            Gets the edges that point out from the given node. It should be the
            same as GetInEdges and GetEdges if the graph is not directed.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The edges.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetInDegree(System.Int32)">
            <summary>
            Gets in-degree of the node, it should be the same as out-degree if 
            the graph is not directed.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The in-degree.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetOutDegree(System.Int32)">
            <summary>
            Gets out-degree of the node, it should be the same as in-degree if
            the graph is not directed.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The out-degree.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetNeighbors(Lava.Data.INode)">
            <summary>
            Gets the neighbors.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The neighbors.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetNeighbors(System.Int32)">
            <summary>
            Gets the neighbors.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The neighbor rows.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetInNeighbors(Lava.Data.INode)">
            <summary>
            Gets the neighbors on the in-edges.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The neighbors.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetInNeighbors(System.Int32)">
            <summary>
            Gets the neighbors on the in-edges.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The neighbor rows.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetOutNeighbors(Lava.Data.INode)">
            <summary>
            Gets the neighbors on the out-edges.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The neighbors.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetOutNeighbors(System.Int32)">
            <summary>
            Gets the neighbors on the out-edges.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The neighbor rows.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetSourceKey(System.Int32)">
            <summary>
            Gets the source key for the edge.
            </summary>
            <param name="erow">The edge row.</param>
            <returns>The source key.</returns>
            <exception cref="T:System.ArgumentException">If no key is used.</exception>
        </member>
        <member name="M:Lava.Data.Graph.GetTargetKey(System.Int32)">
            <summary>
            Gets the target key for the edge.
            </summary>
            <param name="erow">The edge row.</param>
            <returns>The target key.</returns>
            <exception cref="T:System.ArgumentException">If no key is used.</exception>
        </member>
        <member name="M:Lava.Data.Graph.GetNodeRowFromNodeKey(System.IComparable)">
            <summary>
            Gets the node row from node key.
            </summary>
            <param name="node">The node key.</param>
            <returns>.</returns>
            <exception cref="T:Lava.Exceptions.IllegalStateException"></exception>
        </member>
        <member name="M:Lava.Data.Graph.CheckBlankNode(System.Int32)">
            <summary>
            If the node is blank (the node is inited but has not been given a key yet, in the generic version), an exception is thrown.
            </summary>
            <param name="nrow">The node row.</param>
        </member>
        <member name="M:Lava.Data.Graph.AddEdgeByRow(System.Int32,System.Int32)">
            <summary>
            Adds the edge by row.
            </summary>
            <param name="srow">The source row.</param>
            <param name="trow">The target row.</param>
            <returns>The edge row.</returns>
        </member>
        <member name="M:Lava.Data.Graph.AddEdgeByKey(System.IComparable,System.IComparable)">
            <summary>
            Adds the edge by key.
            </summary>
            <param name="skey">The source key.</param>
            <param name="tkey">The target key.</param>
            <returns>The edge row.</returns>
        </member>
        <member name="M:Lava.Data.Graph.IsValidKey(System.IComparable)">
            <summary>
            Determines whether the key is valid.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>True</c> if is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.CheckDuplicatedNodeKey(System.IComparable)">
            <summary>
            Checks the duplicated node key.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:Lava.Exceptions.DuplicateKeyException"></exception>
        </member>
        <member name="M:Lava.Data.Graph.OnDegreeChanged(System.Int32,Lava.Data.DegreeEvent)">
            <summary>
            Called when [degree changed].
            </summary>
            <param name="nrow">The nrow.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Lava.Data.Graph.GetEdges(System.Int32)">
            <summary>
            Gets the edges that connect to the given node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            All adjacent edge rows.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetEdges(Lava.Data.INode)">
            <summary>
            Gets the edges that connect to the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            All adjacent edges.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetDegree(System.Int32)">
            <summary>
            Gets degree of the node, if it is a directed graph, then 
            the value should be (in + out).
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The degree number.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetSpanningTree(System.Int32)">
            <summary>
            Creates a SpanningTree start from the node.
            </summary>
            <param name="nrow">The node row.</param>
            <returns>
            The Spanning Tree.
            </returns>
        </member>
        <member name="M:Lava.Data.Graph.GetSpanningTree(Lava.Data.INode)">
            <summary>
            Creates a SpanningTree start from the node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The Spanning Tree.
            </returns>
        </member>
        <member name="P:Lava.Data.Graph.NodeKey">
            <summary>
            The column name of node key. The value is null when using non-generic Graph.
            </summary>
        </member>
        <member name="P:Lava.Data.Graph.TargetKey">
            <summary>
            The column name of target node in edge table.
            </summary>
        </member>
        <member name="P:Lava.Data.Graph.SourceKey">
            <summary>
            The column name of source node in edge table.
            </summary>
        </member>
        <member name="P:Lava.Data.Graph.IsDirected">
            <summary>
            Indicates the graph is directed or undirected.
            </summary>
        </member>
        <member name="P:Lava.Data.Graph.UseNodeKey">
            <summary>
            Indicates if the graph uses NodeKey or Row # to identify each node.
            </summary>
        </member>
        <member name="P:Lava.Data.Graph.SourceColumn">
            <summary>
            Gets the source column.
            </summary>
            <value>
            The source column.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.TargetColumn">
            <summary>
            Gets the target column.
            </summary>
            <value>
            The target column.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.EdgeCount">
            <summary>
            Gets the edge count.
            </summary>
            <value>
            The edge count.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.NodeCount">
            <summary>
            Node count in the graph.
            </summary>
        </member>
        <member name="P:Lava.Data.Graph.Edges">
            <summary>
            Gets the edges.
            </summary>
            <value>
            The edges.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.EdgeRows">
            <summary>
            Gets the rows for all edges.
            </summary>
            <value>
            The edge rows.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.Nodes">
            <summary>
            Gets the nodes.
            </summary>
            <value>
            The nodes.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.NodeRows">
            <summary>
            Gets the rows for all nodes.
            </summary>
            <value>
            The node rows.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.NodeTable">
            <summary>
            Gets the node table.
            </summary>
            <value>
            The node table.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.EdgeTable">
            <summary>
            Gets or sets the edge table.
            </summary>
            <value>
            The edge table.
            </value>
        </member>
        <member name="P:Lava.Data.Graph.NKeyIndex">
            <summary>
            Node key index
            </summary>
        </member>
        <member name="E:Lava.Data.Graph.DegreeChanged">
            <summary>
            Occurs when the degree of a node changed.
            </summary>
        </member>
        <member name="P:Lava.Data.Graph.WeakComponents">
            <summary>
            Calculates and get the weak components of the graph.
            </summary>
        </member>
        <member name="T:Lava.Data.GraphComponent">
            <summary>
            a graph component.
            this is a light implement: record nodes and edges in hashset and backend graph. used in tree
            
            in some means, a graph component is a Graph, but sometimes, we don't need such heavy model, 
            use this light one will help.
            </summary>
        </member>
        <member name="M:Lava.Data.GraphComponent.#ctor(Lava.Data.IGraph)">
            <summary>
            Create an empty component
            </summary>
            <param name="graph">The back-end grap.</param>
        </member>
        <member name="M:Lava.Data.GraphComponent.ContainNode(System.Int32)">
            <summary>
            Test if the component contains the node
            </summary>
            <param name="nrow">The node ro.</param>
            <returns>does it exist.</returns>
        </member>
        <member name="M:Lava.Data.GraphComponent.ContainEdge(System.Int32)">
            <summary>
            Test if the component contains the edge
            </summary>
            <param name="erow">The edge ro.</param>
            <returns>does it exist.</returns>
        </member>
        <member name="M:Lava.Data.GraphComponent.AddNode(System.Int32)">
            <summary>
            Add a node to the component
            </summary>
            <param name="nrow">The node ro.</param>
        </member>
        <member name="M:Lava.Data.GraphComponent.AddEdge(System.Int32)">
            <summary>
            Add an edge to the component
            </summary>
            <param name="erow">The edge ro.</param>
        </member>
        <member name="M:Lava.Data.GraphComponent.AddEdges(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add multiple edges to the component
            </summary>
            <param name="erows">The edge row.</param>
        </member>
        <member name="M:Lava.Data.GraphComponent.AddNodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add multiple nodes to the component
            </summary>
            <param name="nrows">The node row.</param>
        </member>
        <member name="P:Lava.Data.GraphComponent.Graph">
            <summary>
            The back-end graph
            </summary>
        </member>
        <member name="P:Lava.Data.GraphComponent.Nodes">
            <summary>
            All the node rows in the component, based on the back-end graph
            </summary>
        </member>
        <member name="P:Lava.Data.GraphComponent.Edges">
            <summary>
            All the edge rows in the component, based on the back-end graph
            </summary>
        </member>
        <member name="T:Lava.Data.EdgeChangedHandler">
            <summary>
            Represents the method that will handle events raised when an edge is changed.
            </summary>
            <param name="graph">The graph behind this edge.</param>
            <param name="oldSource">The old source row, -1 means no source.</param>
            <param name="oldTarget">The old target row, -1 means no target.</param>
            <param name="newSource">The new source row, -1 means no source.</param>
            <param name="newTarget">The new target row, -1 means no target.</param>
        </member>
        <member name="T:Lava.Data.ITree">
            <summary>
            The interface for a tree adapter from a graph.
            </summary>
        </member>
        <member name="M:Lava.Data.ITree.GetChildCount(Lava.Data.INode)">
            <summary>
            Gets the child count.
            </summary>
            <param name="parent">The parent.</param>
            <returns>The child count.</returns>
        </member>
        <member name="M:Lava.Data.ITree.GetChildren(Lava.Data.INode)">
            <summary>
            Gets the children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>The child list, with order.</returns>
        </member>
        <member name="M:Lava.Data.ITree.GetDepth(Lava.Data.INode)">
            <summary>
            Gets the depth.
            </summary>
            <param name="node">The node.</param>
            <returns>The depth of the node.</returns>
        </member>
        <member name="M:Lava.Data.ITree.GetParent(Lava.Data.INode)">
            <summary>
            Gets the parent.
            </summary>
            <param name="child">The child.</param>
            <returns>The parent node.</returns>
        </member>
        <member name="M:Lava.Data.ITree.GetParentEdge(Lava.Data.INode)">
            <summary>
            Gets the edge connecting to the parent.
            </summary>
            <param name="child">The child.</param>
            <returns>The edge instance.</returns>
        </member>
        <member name="M:Lava.Data.ITree.GetChildEdges(Lava.Data.INode)">
            <summary>
            Gets the edges connecting to all its children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>The edges.</returns>
        </member>
        <member name="M:Lava.Data.ITree.BFS(Lava.Data.INode)">
            <summary>
            Gets all sub-nodes that rooted at the given root.
            </summary>
            <param name="node">The start node for the BFS.</param>
            <returns>All nodes in the BFS order.</returns>
        </member>
        <member name="P:Lava.Data.ITree.Graph">
            <summary>
            Gets the graph behind this tree.
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="P:Lava.Data.ITree.Root">
            <summary>
            Gets the root.
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="T:Lava.Data.Tree">
            <summary>
            The implementation of ITree.
            </summary>
        </member>
        <member name="M:Lava.Data.Tree.GetChildCount(Lava.Data.INode)">
            <summary>
            Gets the child count.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            The child count.
            </returns>
        </member>
        <member name="M:Lava.Data.Tree.GetChildren(Lava.Data.INode)">
            <summary>
            Gets the children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            The child list, with order.
            </returns>
        </member>
        <member name="M:Lava.Data.Tree.GetDepth(Lava.Data.INode)">
            <summary>
            Gets the depth.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The depth of the node.
            </returns>
        </member>
        <member name="M:Lava.Data.Tree.GetParent(Lava.Data.INode)">
            <summary>
            Gets the parent.
            </summary>
            <param name="child">The child.</param>
            <returns>
            The parent node.
            </returns>
        </member>
        <member name="M:Lava.Data.Tree.GetParentEdge(Lava.Data.INode)">
            <summary>
            Gets the edge connecting to the parent.
            </summary>
            <param name="child">The child.</param>
            <returns>
            The edge instance.
            </returns>
        </member>
        <member name="M:Lava.Data.Tree.GetChildEdges(Lava.Data.INode)">
            <summary>
            Gets the edges connecting to all its children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            The edges.
            </returns>
        </member>
        <member name="P:Lava.Data.Tree.DirectionSensitive">
            <summary>
            Gets a value indicating whether the tree is collected following only the out-edges or all edges in the input graph.
            </summary>
            <value>
              <c>true</c> if only following out-edges; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Data.Tree.Root">
            <summary>
            Gets the root.
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="P:Lava.Data.Tree.Graph">
            <summary>
            Gets the graph behind this tree.
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="T:Lava.Data.Manager.IEdgeManager">
            <summary>
            The interface for Edge Manager
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.IItemManager">
            <summary>
            Item is row entity of Table. 
            
            The duty of ItemManager includes: 
            1. Create the item instances.
            2. Cache the item instances.
            
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.IItemManager.InvalidateAll">
            <summary>
            Invalidates all items.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.IItemManager.GetItem``1(System.Int32)">
            <summary>
            Gets the item instance at row.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="trow">The row in the back end table.</param>
            <returns>The item instance.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IItemManager.Invalidate(System.Int32)">
            <summary>
            Invalidates the item, marks it as not usable.
            </summary>
            <param name="trow">The row in the back end table.</param>
        </member>
        <member name="M:Lava.Data.Manager.IItemManager.Items``1(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the item instances with given rows in the back end table.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="rows">The item rows.</param>
            <returns>The item instances.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IItemManager.Dispose">
            <summary>
            Disposes the item manager, release all items.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.IItemManager.Table">
            <summary>
            The back-end table.
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.EdgeManager">
            <summary>
            The implementation of edge manager.
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.DefaultItemManager">
            <summary>
            Implement default items manager features to manage items in default table 
            It is used in default <c>Table</c>
            
            It create and cache <c>TableItem</c>
            
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.DefaultItemManager"/> class.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.#ctor(Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.DefaultItemManager"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.Dispose">
            <summary>
            Disposes the item manager, release all items.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.InvalidateAll">
            <summary>
            Invalidates all items.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.GetItem``1(System.Int32)">
            <summary>
            Gets the item instance at row.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="trow">The row in the back end table.</param>
            <returns>
            The item instance.
            </returns>
            <exception cref="T:Lava.Exceptions.InvalidDataException"></exception>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.BuildItem(System.Int32)">
            <summary>
            Builds a item instance for this manager.
            </summary>
            <returns>An item instance.</returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.Items``1(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the item instances with given rows in the back end table.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="trows">The item rows.</param>
            <returns>The item instances.</returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultItemManager.Invalidate(System.Int32)">
            <summary>
            Invalidates the item, marks it as not usable.
            </summary>
            <param name="trow">The row in the back end table.</param>
        </member>
        <member name="P:Lava.Data.Manager.DefaultItemManager.Table">
            <summary>
            The back-end table.
            </summary>
        </member>
        <member name="F:Lava.Data.Manager.EdgeManager._graph">
            <summary>
            The _graph
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.EdgeManager.#ctor(Lava.Data.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.EdgeManager"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Lava.Data.Manager.EdgeManager.Dispose">
            <summary>
            Disposes the item manager, release all items.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.EdgeManager.BuildItem(System.Int32)">
            <summary>
            Builds a item instance for this manager.
            </summary>
            <param name="row">The row of item in this table.</param>
            <returns>
            An item instance.
            </returns>
        </member>
        <member name="P:Lava.Data.Manager.EdgeManager.Table">
            <summary>
            The back-end table.
            </summary>
            <exception cref="T:Lava.Exceptions.ForbiddenException">Set back end Table is forbidden in graph EdgeManager</exception>
        </member>
        <member name="T:Lava.Data.Manager.INodeManager">
            <summary>
            Item manager for nodes.
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.NodeManager">
            <summary>
            Item manager for nodes in graphs.
            </summary>
        </member>
        <member name="F:Lava.Data.Manager.NodeManager._graph">
            <summary>
            The _graph behind the nodes.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.NodeManager.#ctor(Lava.Data.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.NodeManager"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Lava.Data.Manager.NodeManager.Dispose">
            <summary>
            Disposes the item manager, release all items.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.NodeManager.BuildItem(System.Int32)">
            <summary>
            Builds a item instance for this manager.
            </summary>
            <param name="row">The row in the node table.</param>
            <returns>
            An item instance.
            </returns>
        </member>
        <member name="P:Lava.Data.Manager.NodeManager.Table">
            <summary>
            The back-end table, which is graph.NodeTable.
            </summary>
            <exception cref="T:Lava.Exceptions.ForbiddenException">Set back end Table is forbidden in graph EdgeManager</exception>
        </member>
        <member name="T:Lava.Data.IEdge">
            <summary>
            Item avatar to further support edge related properties.
            </summary>
        </member>
        <member name="T:Lava.Data.IGraphItem">
            <summary>
            Item avatar for further supporting graph related properties
            </summary>
        </member>
        <member name="P:Lava.Data.IGraphItem.Graph">
            <summary>
            Gets the graph instance behind this graph item (edge or node).
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="P:Lava.Data.IGraphItem.IsDirected">
            <summary>
            Gets a value indicating whether this back-end graph is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Data.IEdge.Source">
            <summary>
            Gets the row of the source node of this edge.
            </summary>
            <value>
            The source row.
            </value>
        </member>
        <member name="P:Lava.Data.IEdge.SourceNode">
            <summary>
            Gets the source node of this item.
            </summary>
            <value>
            The source node.
            </value>
        </member>
        <member name="P:Lava.Data.IEdge.Target">
            <summary>
            Gets the row of the target node of this edge.
            </summary>
            <value>
            The target row.
            </value>
        </member>
        <member name="P:Lava.Data.IEdge.TargetNode">
            <summary>
            Gets the target node.
            </summary>
            <value>
            The target node.
            </value>
        </member>
        <member name="T:Lava.Data.INode">
            <summary>
            Item avatar for further supporting node related properties.
            </summary>
        </member>
        <member name="P:Lava.Data.INode.Degree">
            <summary>
            Gets the degree of this node, including in-degree and out-degree if the graph is directed.
            </summary>
            <value>
            The degree.
            </value>
        </member>
        <member name="P:Lava.Data.INode.Indegree">
            <summary>
            Gets the in-degree of this node, which is equal to the out-degree if the graph is UN-directed.
            </summary>
            <value>
            The in-degree.
            </value>
        </member>
        <member name="P:Lava.Data.INode.Outdegree">
            <summary>
            Gets the out-degree of this node, which is equal to the in-degree if the graph is UN-directed.
            </summary>
            <value>
            The out-degree.
            </value>
        </member>
        <member name="P:Lava.Data.INode.Neighbors">
            <summary>
            Gets all the neighbors that have connecting edges to this node.
            </summary>
            <value>
            The neighbors.
            </value>
        </member>
        <member name="P:Lava.Data.INode.InNeighbors">
            <summary>
            Get all the in-neighbors that have edges pointing to this node.
            </summary>
            <value>
            The in-neighbors.
            </value>
        </member>
        <member name="P:Lava.Data.INode.OutNeighbors">
            <summary>
            Gets the out-neighbors that have edges pointing from this node.
            </summary>
            <value>
            The out-neighbors.
            </value>
        </member>
        <member name="P:Lava.Data.INode.Edges">
            <summary>
            Gets the edges taking this node as one end.
            </summary>
            <value>
            The edges.
            </value>
        </member>
        <member name="P:Lava.Data.INode.InEdges">
            <summary>
            Gets the in-edges taking this node as target node.
            </summary>
            <value>
            The in-edges.
            </value>
        </member>
        <member name="P:Lava.Data.INode.OutEdges">
            <summary>
            Gets the out-edges taking this node as source node.
            </summary>
            <value>
            The out-edges.
            </value>
        </member>
        <member name="T:Lava.Data.TableEdge">
            <summary>
            The basic implement of edge
            </summary>
        </member>
        <member name="M:Lava.Data.TableEdge.#ctor(Lava.Data.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.TableEdge"/> class.
            </summary>
            <param name="graph">The graph behind this edge.</param>
        </member>
        <member name="F:Lava.Data.TableEdge._graph">
            <summary>
            The back end graph.
            </summary>
        </member>
        <member name="P:Lava.Data.TableEdge.Table">
            <summary>
            Gets the table behind this item.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Lava.Data.TableEdge.Graph">
            <summary>
            Gets the graph instance behind this graph item (edge or node).
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="P:Lava.Data.TableEdge.IsDirected">
            <summary>
            Gets a value indicating whether this back-end graph is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Data.TableEdge.Source">
            <summary>
            Gets the row of the source node of this edge.
            </summary>
            <value>
            The source row.
            </value>
        </member>
        <member name="P:Lava.Data.TableEdge.SourceNode">
            <summary>
            Gets the source node of this item.
            </summary>
            <value>
            The source node.
            </value>
        </member>
        <member name="P:Lava.Data.TableEdge.Target">
            <summary>
            Gets the row of the target node of this edge.
            </summary>
            <value>
            The target row.
            </value>
        </member>
        <member name="P:Lava.Data.TableEdge.TargetNode">
            <summary>
            Gets the target node.
            </summary>
            <value>
            The target node.
            </value>
        </member>
        <member name="T:Lava.Data.TableNode">
            <summary>
            The basic node implement of graph
            </summary>
        </member>
        <member name="M:Lava.Data.TableNode.#ctor(Lava.Data.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.TableNode"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="F:Lava.Data.TableNode._graph">
            <summary>
            The back-end graph.
            </summary>
        </member>
        <member name="P:Lava.Data.TableNode.Table">
            <summary>
            Gets the table behind this item.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.Graph">
            <summary>
            Gets the graph instance behind this graph item (edge or node).
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.IsDirected">
            <summary>
            Gets a value indicating whether this back-end graph is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.Degree">
            <summary>
            Gets the degree of this node, including in-degree and out-degree if the graph is directed.
            </summary>
            <value>
            The degree.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.Indegree">
            <summary>
            Gets the in-degree of this node, which is equal to the out-degree if the graph is UN-directed.
            </summary>
            <value>
            The in-degree.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.Outdegree">
            <summary>
            Gets the out-degree of this node, which is equal to the in-degree if the graph is UN-directed.
            </summary>
            <value>
            The out-degree.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.Neighbors">
            <summary>
            Gets all the neighbors that have connecting edges to this node.
            </summary>
            <value>
            The neighbors.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.InNeighbors">
            <summary>
            Get all the in-neighbors that have edges pointing to this node.
            </summary>
            <value>
            The in-neighbors.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.OutNeighbors">
            <summary>
            Gets the out-neighbors that have edges pointing from this node.
            </summary>
            <value>
            The out-neighbors.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.Edges">
            <summary>
            Gets the edges taking this node as one end.
            </summary>
            <value>
            The edges.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.InEdges">
            <summary>
            Gets the in-edges taking this node as target node.
            </summary>
            <value>
            The in-edges.
            </value>
        </member>
        <member name="P:Lava.Data.TableNode.OutEdges">
            <summary>
            Gets the out-edges taking this node as source node.
            </summary>
            <value>
            The out-edges.
            </value>
        </member>
        <member name="T:Lava.Data.Parser.ArrayParser`1">
            <summary>
            Parser to handle simple array types, such as int[], etc.
            </summary>
            <typeparam name="T">The type of the array element</typeparam>
        </member>
        <member name="M:Lava.Data.Parser.ArrayParser`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Parser.ArrayParser`1"/> class.
            </summary>
            <param name="type">The exact type supported.</param>
        </member>
        <member name="T:Lava.Data.Parser.BrushParser">
            <summary>
            Brush data parser. We cannot handle all kind of brush types. In fact, 
            we use the ColorParser to convert between string and SolidColorBrush.
            Anything else will result in "ToString()" format and "null" parsing result.
            </summary>
        </member>
        <member name="T:Lava.Data.Parser.ColorParser">
            <summary> 
            Color Data parser, which converts strings like "#FF7732af" and Color instance.
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.ColorParser.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Parser.ColorParser"/> class.
            </summary>
            <param name="type">The exact type supported.</param>
        </member>
        <member name="T:Lava.Data.Parser.ConvertibleParser">
            <summary>
            Parser to handle convertible types, such as int, double, string, DataTime, etc.
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.ConvertibleParser.#ctor(System.Type)">
            <summary>
            If the string is null it will return null.
            If the string is empty it will return default value.
            </summary>
            <param name="type">The value type.</param>
        </member>
        <member name="T:Lava.Data.Parser.DictionaryParser">
            <summary>
            DictionaryParser can handle parse/format between string and Dictionary value.
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.DictionaryParser.#ctor(System.Type)">
            <summary>
            if the string is null, it will return null
            if the string is empty, it will return an empty dictionary
            </summary>
            <param name="type">The generic Dictionary typ.</param>
        </member>
        <member name="T:Lava.Data.Parser.HashSetParser`1">
            <summary>
            parse value between string and HashSet values
            </summary>
            <typeparam name="T">Value type in HashSet</typeparam>
        </member>
        <member name="M:Lava.Data.Parser.HashSetParser`1.#ctor">
            <summary>
            if the string is null, it will return null
            if the string is empty, it will return an empty HashSet
            </summary>
        </member>
        <member name="T:Lava.Data.Parser.ListParser">
            <summary>
            parse value between string and list values
            </summary>
        </member>
        <member name="F:Lava.Data.Parser.ListParser.LIST_STR">
            <summary>
            used to test if the type is really a list
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.ListParser.#ctor(System.Type)">
            <summary>
            if the string is null, it will return null
            if the string is empty, it will return an empty list
            </summary>
            <param name="type">The value type, must be generic list type. e.g. "List&lt;int&gt;.</param>
        </member>
        <member name="T:Lava.Data.Parser.ParserFactory">
            <summary> Factory for Data parsers, which Parse Data values from text Strings
            and generated formatted text Strings for Data values.
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.ParserFactory.List2Csv(System.Collections.Generic.List{System.String})">
            <summary>
            Given an List of string, convert it to a single line of string as csv
            </summary>
            <param name="strings">The array to conver.</param>
            <returns>a single string following csv format.</returns>
        </member>
        <member name="M:Lava.Data.Parser.ParserFactory.Collection2Csv(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Given an ICollection of string, convert it to a single line of string as csv
            </summary>
            <param name="strings">The array to conver.</param>
            <returns>a single string following csv format.</returns>
        </member>
        <member name="M:Lava.Data.Parser.ParserFactory.Csv2List(System.String)">
            <summary>
            Given a string following csv format, break it into a list of strings
            </summary>
            <param name="line">The string to break u.</param>
            <returns>a list of strings.</returns>
        </member>
        <member name="M:Lava.Data.Parser.ParserFactory.CreateParser(System.Type)">
            <summary>
            Create a parser for a given type. First we look up in customized dictionary, then we
            check if it is a primitive type, if it is a generic list or dictionary, if it is an
            array of simple types.
            </summary>
            <param name="type">The type to create parser fo.</param>
            <returns>a parser if we can find one, otherwise null.</returns>
        </member>
        <member name="M:Lava.Data.Parser.ParserFactory.ResetParsers">
            <summary>
            Reset the Factory to the default state
            </summary>
        </member>
        <member name="M:Lava.Data.Parser.ParserFactory.Register(System.Type,Lava.Data.Parser.IDataParser)">
            <summary>
            Register a new parser to a specific type. we will look up in here first when we want to
            to find a parser for a given type.
            </summary>
            <param name="type">The type to which a special parser is bindin.</param>
            <param name="parser">The parser to handle the given typ.</param>
        </member>
        <member name="T:Lava.Data.DefaultChildTable">
            <summary>
            The default implementation of IChildTable. When this table is built, there are no rows in it.
            If you want to add rows to it, there are two types of rows: with or without the backend parent row.
            This child table may inherit some columns from the parent table, so if a row has a linked parent row,
            when you want to read the values for the inherited columns of that row, the values in the linked
            parent row will be used. However, if the row does not have a linked parent row, exception will be thrown.
            In addition, one parent row may be linked to zero or multiple child rows. You can change the linking 
            relations when you add a new row by calling <code>AddParentRow</code> or anytime by calling 
            <code>ResetParentRow</code>.
            </summary>
        </member>
        <member name="T:Lava.Data.AbstractChildTable">
            <summary>
            Abstract class of IChildTable. implement basic functions of child table
            </summary>
        </member>
        <member name="T:Lava.Data.AbstractTable">
            <summary>
            Abstract table class, implements basic features of a table.
            </summary>
        </member>
        <member name="T:Lava.Data.ITable">
            <summary>
            The Basic Table interface, defined what can table do
            
            </summary>
        </member>
        <member name="M:Lava.Data.ITable.AddCellUpdatedHandler``1(System.String,Lava.Data.TableCellUpdatedHandler{``0})">
            <summary>
            Registers a handler to be notified when a cell in this column has a value changed.
            Although you can directly call Table.GetColumn(...).CellChanged +=... to do similar
            things, this function is safer. Because in the column version, you can only get the
            row in the column, in this version, you can get the row in the table. The row in
            the column may be different from the row in the table, even when the table contains
            the column.
            </summary>
            <typeparam name="T">The type of the values contained in the column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="handler">The handler to register.</param>
        </member>
        <member name="M:Lava.Data.ITable.RemoveCellUpdatedHandler``1(System.String,Lava.Data.TableCellUpdatedHandler{``0})">
            <summary>
            Removes the cell changed handler for a given column.
            </summary>
            <typeparam name="T">The type of the values contained in the column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="handler">The handler to be removed.</param>
        </member>
        <member name="M:Lava.Data.ITable.AddColumn``1(System.String)">
            <summary>
            Adds a standard column storing values of type T to this table, and uses the cname as its column name.
            The default value in the column is default(T).
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <returns>The column instance created.</returns>
        </member>
        <member name="M:Lava.Data.ITable.AddColumn``1(System.String,``0)">
            <summary>
            Adds a standard column storing values of type T to this table, and uses the cname as its column name.
            The default value in the column is defaultValue.
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The column instance created.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.AddConstantColumn``1(System.String,``0)">
            <summary>
            Adds a constant column storing values of type T to this table, and uses the cname as its column name.
            The value in this column will always be constValue. Changing values in this column later is not
            allowed.
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <param name="constValue">The constant value.</param>
            <returns>
            The column instance created.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.AddExpressionColumn``1(System.String,System.String)">
            <summary>
            Adds an expression column storing values of type T to this table, and uses the cname as its column name.
            The values in this column is evaluated by the expression. For example, you have two column{int}s, and you
            want to add a column{int} represents of their sums. And you want to this sum column updated automatically
            when the other two columns changes. You can added it as an expression column. The expression column has
            a cache inside it, so previously visited values are cached to speed up (in case the evaluation process is
            time consuming). Meanwhile, expression column knows to updates the cached values when their dependent
            columns have updated their values. More information can be:
            <see cref="T:Hallucination.Expressions.ExprParser"/> and <see cref="T:Lava.Data.ExprParser"/>
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <param name="expr">The string expression to be translated int IExpression instance.</param>
            <returns>
            The column instance created.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.AddFuncColumn``1(System.String,System.Func{Lava.Data.IItem,``0})">
            <summary>
            Adds an evaluation-based column to this table. Similar to expression column, func column does not store
            values in it. However, expression column does cache, but func column does not. So func columns are not
            recommended for time consuming evaluations, since every single time a cell in it is visited, the 
            evaluation will be repeated.
            </summary>
            <typeparam name="T">The type of values that this column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="func">function to generate the result.</param>
            <returns>The column instance which is newly added.</returns>
        </member>
        <member name="M:Lava.Data.ITable.ToColumnGroup">
            <summary>
            Gets the column group of the table, which record all the column types, names, and default values.
            
            </summary>
            <returns>The column group.</returns>
        </member>
        <member name="M:Lava.Data.ITable.AddColumns(Lava.Data.ColumnGroup)">
            <summary>
            Adds a group of columns into this table. If one of the column (name) already existed in the table,
            an exception will be thrown.
            
            </summary>
            <param name="columns">The group of columns to add.</param>
        </member>
        <member name="M:Lava.Data.ITable.AddColumns``1(System.String[])">
            <summary>
            Adds several columns for storing values of type T in this table, and uses the names as the names.
            The default value in the column is default(T).
            </summary>
            <typeparam name="T">The type of values stored in the columns.</typeparam>
            <param name="cnames">The column names to represent the columns.</param>
        </member>
        <member name="M:Lava.Data.ITable.EnsureColumns(Lava.Data.ColumnGroup)">
            <summary>
            Makes sure this table supports the given group of columns. If any of the columns is already in this
            table (judged by using the same name), it will be ignored, and continue to use the old one.
            
            </summary>
            <param name="columns">The group of columns this table must support.</param>
        </member>
        <member name="M:Lava.Data.ITable.RemoveColumn(System.String)">
            <summary>
            Removes the column by the column name.
            </summary>
            <param name="cname">The column name.</param>
        </member>
        <member name="M:Lava.Data.ITable.RemoveColumn(System.Int32)">
            <summary>
            Removes the column by the column index.
            </summary>
            <param name="cidx">The column index.</param>
        </member>
        <member name="M:Lava.Data.ITable.IsValidRow(System.Int32)">
            <summary>
            Tests if the table row is valid in the table. Two kinds of rows are invalid: the ones
            are bigger than MaxRow, and the ones are removed from the table already.
            </summary>
            <param name="trow">The table row for testing.</param>
            <returns>
            True if it is valid, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.IsValidColumn(System.Int32)">
            <summary>
            Determines whether this column index is a valid column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>True</c> if column index is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.IsValidColumn(System.String)">
            <summary>
            Determines whether this column name is a valid column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>True</c> if the column name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.CanGet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.CanGet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.CanSet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.CanSet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.ContainsColumn(Lava.Data.IColumn)">
            <summary>
            Determines whether the manager contains column.
            </summary>
            <param name="column">The column.</param>
            <returns>
              <c>True</c> if the manager contains column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.ContainsColumn(System.String)">
            <summary>
            Determines whether the manager contains column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>True</c> if the manager contains column name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.ContainsColumn(System.Int32)">
            <summary>
            Determines whether the manager contains column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>True</c> if the manager contains column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.ForEach(System.Action{Lava.Data.IItem},System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Makes an action to each valid item in this table. 
            </summary>
            <param name="action">The action to be performed.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.ITable.SetEach``1(System.String,``0,System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The value.</param>        
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.ITable.SetEach``1(System.String,System.Func{Lava.Data.IItem,``0},System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.ITable.SetEach``1(System.Int32,``0,System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The value.</param>        
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.ITable.SetEach``1(System.Int32,System.Func{Lava.Data.IItem,``0},System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.ITable.Set(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the value in the cell at the table row = trow and column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
            <returns>True if the update successful, false if the value is the same.</returns>
        </member>
        <member name="M:Lava.Data.ITable.Set(System.Int32,System.String,System.Object)">
            <summary>
            Sets the value in the cell at the table row = trow and column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
            <returns>True if the update successful, false if the value is the same.</returns>
        </member>
        <member name="M:Lava.Data.ITable.Set``1(System.Int32,System.Int32,``0)">
            <summary>
            Sets the value in the cell at the table row = trow and column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.Set``1(System.Int32,System.String,``0)">
            <summary>
            Sets the value in the cell at the table row = trow and column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.Get(System.Int32,System.Int32)">
            <summary>
            Gets the value from the cell at table row = trow and column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>The value stored in that cell.</returns>
        </member>
        <member name="M:Lava.Data.ITable.Get(System.Int32,System.String)">
            <summary>
            Gets the value from the cell at table row = trow and column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <returns>The value stored in that cell.</returns>
        </member>
        <member name="M:Lava.Data.ITable.Get``1(System.Int32,System.Int32)">
            <summary>
            Gets the value from the cell at table row = trow and column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.Get``1(System.Int32,System.String)">
            <summary>
            Gets the value from the cell at table row = trow and column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row.</param>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.GetDefaultValue``1(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetDefaultValue``1(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetDefaultValue(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetDefaultValue(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The default value of that column.</returns>
        </member>
        <member name="M:Lava.Data.ITable.AddRow">
            <summary>
            Adds a row to this table, returns the newly added row in the table.
            </summary>
            <returns>The row number of the newly added row.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RestoreRow(System.Int32)">
            <summary>
            Restores a previous removed table row.
            </summary>
            <param name="trow">The table row to restore.</param>
            <returns>True if the restore is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RestoreAllRows">
            <summary>
            Restores all previous removed table rows.
            </summary>
            <returns>True if some rows are restored, false if nothing is restored.</returns>
        </member>
        <member name="M:Lava.Data.ITable.EnsureRow(System.Int32)">
            <summary>
            Ensures the table to have the given row number. Adds empty rows until the table
            contains the given row.
            </summary>
            <param name="trow">The row number that this table must supports.</param>
        </member>
        <member name="M:Lava.Data.ITable.AddRows(System.Int32)">
            <summary>
            Adds the given amount of rows to this table.
            </summary>
            <param name="rowNum">The number of rows to be added.</param>
            <returns>The rows just added.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RemoveRow(System.Int32)">
            <summary>
            Removes a row in this table.
            </summary>
            <param name="trow">The table row to be removed.</param>
            <returns>True if the removal is successful, false if already removed.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumn(System.Int32)">
            <summary>
            Gets the column from a column name. 
            
            This is the object version of implementation. Use the generic one to speed up.
            
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The column instance that is stored at the column index, null if not exist.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumn``1(System.Int32)">
            <summary>
            Gets the column from a column index.
            
            This is the generic version of implementation, which is faster.
            
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <typeparam name="T">The type of values stored in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <returns>The column instance at the column index of the table.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumn(System.String)">
            <summary>
            Gets the column from a column index. 
            
            This is the object version of implementation. Use the generic one to speed up.
            
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The column instance that is stored at the column index, null if not exist.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumn``1(System.String)">
            <summary>
            Gets the column from a column index.
            
            This is the generic version of implementation, which is faster.
            
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <typeparam name="T">The type of values stored in the column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>The column instance that is stored at the column index, null if not exist.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumnIndex(Lava.Data.IColumn)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="column">The column.</param>
            <returns>The column index. -1 if this instance does not contain it.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The column index. -1 if this instance does not contain it.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumnName(System.Int32)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The column name, null if this instance does not have the column index.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumnName(Lava.Data.IColumn)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="column">The column instance.</param>
            <returns>
            The column name, null if this instance does not have the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumnType(System.Int32)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The type of values that are stored in the column, null if does not exist.</returns>
        </member>
        <member name="M:Lava.Data.ITable.GetColumnType(System.String)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The type of values that are stored in the column, null if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.RowsBetween(System.Int32,System.Int32)">
            <summary>
            Gets all the valid rows that are bigger and equal to startRow and smaller or equal to
            endRow.
            </summary>
            <param name="startRow">The start row number, included.</param>
            <param name="endRow">The end row number, included.</param>
            <returns>All rows meeting the condition.</returns>
        </member>
        <member name="M:Lava.Data.ITable.Index``1(System.String)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.Index``1(System.Int32)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.Index(System.String)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            
            </summary>
            <param name="cname">The column name.</param>
            <returns>The table indexer instance for you to query.</returns>
        </member>
        <member name="M:Lava.Data.ITable.Index(System.Int32)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.RemoveIndex(System.String)">
            <summary>
            Removes the cached table index behind the column (if the index exists). Because the indexer
            does add event handler to the table to track the updates and keep up-to-date. So removing
            it can remove the handler to reduce the burden of the table, sort of.
            </summary>
            
            <param name="cname">The column name.</param>
            <returns>True if removal successful, false if there is no index to remove.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RemoveIndex(System.Int32)">
            <summary>
            Removes the cached table index behind the column (if the index exists). Because the indexer
            does add event handler to the table to track the updates and keep up-to-date. So removing
            it can remove the handler to reduce the burden of the table, sort of.
            </summary>
            
            <param name="cidx">The column index.</param>
            <returns>True if removal successful, false if there is no index to remove.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RowsOfValue``1(System.Int32,``0)">
            <summary>
            Gets all the rows that have the value at the specific column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The value.</param>
            <returns>The rows having the value.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RowsOfValue``1(System.String,``0)">
            <summary>
            Gets all the rows that have the value at the specific column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The value.</param>
            <returns>
            The rows having the value.
            </returns>
        </member>
        <member name="M:Lava.Data.ITable.RowsSortedBy(System.String,System.Boolean)">
            <summary>
            Gets all the valid rows (from this table), and sorts them based on the given column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <param name="cname">The column name.</param>
            <param name="isAscending">Is the sort in ascending order.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RowsSortedBy(System.Int32,System.Boolean)">
            <summary>
            Gets all the valid rows (from this table), and sorts them based on the given column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="isAscending">Is the sort in ascending order.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RowsSortedBy``1(System.String,``0,``0,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of values in that column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RowsSortedBy``1(System.Int32,``0,``0,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of values in that column.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RowSortedBy(System.String,System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            
            This is the object version, which should be avoid for performance issue.
            </summary>
            <param name="cname">The column name.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="M:Lava.Data.ITable.RowSortedBy(System.Int32,System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            
            This is the object version, which should be avoid for performance issue.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="P:Lava.Data.ITable.RowManager">
            <summary>
            Gets the row manager.
            </summary>
            <value>
            The row manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IRowManager"/>
        </member>
        <member name="P:Lava.Data.ITable.ColumnManager">
            <summary>
            Gets the column manager.
            </summary>
            <value>
            The column manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IColumnManager"/>
        </member>
        <member name="P:Lava.Data.ITable.ItemManager">
            <summary>
            Gets the item manager.
            </summary>
            <value>
            The item manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IItemManager"/>
        </member>
        <member name="E:Lava.Data.ITable.TableChanged">
             <summary>
             Occurs when the table has changed or will change. Events include: 1) add/remove a row/column, 2) a cell is updated
             inside the table. When the type is <c>Insert</c>, it could mean either a row (startRow == endRow and cidx &lt; 0), 
             or a column (startRow == sender.MinRow and endRow == sender.MaxRow and cidx &gt;= 0). When the type is <c>Update</c>, 
             it means that a cell is updated (startRow == endRow and cidx &gt;=0). When the type is <c>Delete</c>, it also could 
             mean a row or column, just like when type is <c>Insert</c>.
             
             **Important notice**: for <c>Insert</c> and <c>Update</c> events, the Handlers are called *AFTER* things are 
             changed. However, for <c>Delete</c> event, the handlers are called *BEFORE* things are actually deleted.
            
             </summary>
        </member>
        <member name="E:Lava.Data.ITable.TableColumnChanged">
            <summary>
            Occurs when the table has a column changed, such as adding/removing a column.
            
            **Important notice**: for <c>Insert</c> event, the Handlers are called *AFTER* things are changed. 
            However, for <c>Delete</c> event, the handlers are called *BEFORE* things are actually deleted.
            
            </summary>
        </member>
        <member name="P:Lava.Data.ITable.RowCount">
            <summary>
            Gets the row count.
            </summary>
            <value>
            The row count.
            </value>
        </member>
        <member name="P:Lava.Data.ITable.MaxRow">
            <summary>
            Gets the max valid row in this table.
            </summary>
            <value>
            The max row.
            </value>
        </member>
        <member name="P:Lava.Data.ITable.MinRow">
            <summary>
            Gets the min valid row in this table.
            </summary>
            <value>
            The min row.
            </value>
        </member>
        <member name="P:Lava.Data.ITable.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="P:Lava.Data.ITable.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="M:Lava.Data.AbstractTable.#ctor">
            <summary>
            For internal use only. Because RowManager and ColumnManager need to be set right away.
            But they can only be set internally.
            </summary>
        </member>
        <member name="M:Lava.Data.AbstractTable.Dispose">
            <summary>
            Disposes the table, including all event handlers, table indexes and managers.
            </summary>
        </member>
        <member name="M:Lava.Data.AbstractTable.Set(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the value in the cell at the table row = trow and column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Set``1(System.Int32,System.Int32,``0)">
            <summary>
            Sets the value in the cell at the table row = trow and column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Get(System.Int32,System.Int32)">
            <summary>
            Gets the value from the cell at table row = trow and column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Get``1(System.Int32,System.Int32)">
            <summary>
            Gets the value from the cell at table row = trow and column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.ForEach(System.Action{Lava.Data.IItem},System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Makes an action to each valid item in this table.
            </summary>
            <param name="action">The action to be performed.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.SetEach``1(System.String,``0,System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.SetEach``1(System.String,System.Func{Lava.Data.IItem,``0},System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.SetEach``1(System.Int32,``0,System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.SetEach``1(System.Int32,System.Func{Lava.Data.IItem,``0},System.Func{Lava.Data.IItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.Set(System.Int32,System.String,System.Object)">
            <summary>
            Sets the value in the cell at the table row = trow and column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Set``1(System.Int32,System.String,``0)">
            <summary>
            Sets the value in the cell at the table row = trow and column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Get(System.Int32,System.String)">
            <summary>
            Gets the value from the cell at table row = trow and column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Get``1(System.Int32,System.String)">
            <summary>
            Gets the value from the cell at table row = trow and column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The table row.</param>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddRow">
            <summary>
            Adds a row to this table, returns the newly added row in the table.
            </summary>
            <returns>
            The row number of the newly added row.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.EnsureRow(System.Int32)">
            <summary>
            Ensures the table to have the given row number. Adds empty rows until the table
            contains the given row.
            </summary>
            <param name="trow">The row number that this table must supports.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.RestoreRow(System.Int32)">
            <summary>
            Restores a previous removed table row.
            </summary>
            <param name="trow">The table row to restore.</param>
            <returns>
            True if the restore is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RestoreAllRows">
            <summary>
            Restores all previous removed table rows.
            </summary>
            <returns>
            True if some rows are restored, false if nothing is restored.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RemoveRow(System.Int32)">
            <summary>
            Removes a row in this table.
            </summary>
            <param name="trow">The table row to be removed.</param>
            <returns>
            True if the removal is successful, false if already removed.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowsBetween(System.Int32,System.Int32)">
            <summary>
            Gets all the valid rows that are bigger and equal to startRow and smaller or equal to
            endRow.
            </summary>
            <param name="startRow">The start row number, included.</param>
            <param name="endRow">The end row number, included.</param>
            <returns>
            All rows meeting the condition.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns>
            True is it is previously not empty, false if it is already empty.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddRows(System.Int32)">
            <summary>
            Adds the given amount of rows to this table.
            </summary>
            <param name="rowNum">The number of rows to be added.</param>
            <returns>
            The rows just added.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddItem">
            <summary>
            Add an empty item.
            </summary>
            <returns>
            The empty item just created.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddItem(Lava.Data.IItem)">
            <summary>
            Adds the item. The values in the passed-in item will be copied to this item set, and
            a new item will be generated accordingly, and returned. This is a low efficiency operation.
            So you should not use it unless you have no choice.
            </summary>
            <param name="item">The item.</param>
            <returns>
            A new item instance that belongs to this item set and has values from the passed-in item.
            </returns>
            <exception cref="T:System.ArgumentException">The passed-in item is invalid</exception>
            <exception cref="T:Lava.Exceptions.InvalidDataException">
            </exception>
        </member>
        <member name="M:Lava.Data.AbstractTable.RemoveItem(Lava.Data.IItem)">
            <summary>
            Removes an item.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>
            True if the removal is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Contains(Lava.Data.IItem)">
            <summary>
            Determines if this item belongs to this item set.
            </summary>
            <param name="item">The item to be tested.</param>
            <returns>
            True if this item belongs to this item set, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetItem(System.Int32)">
            <summary>
            Gets the item at the given table row. 
            </summary>
            <param name="trow">The row in the table.</param>
            <returns>The item at the row.</returns>
            <exception cref="T:Lava.Exceptions.InvalidDataException">If the index is not valid.</exception>
        </member>
        <member name="M:Lava.Data.AbstractTable.SetupColumn(System.String,Lava.Data.IColumn)">
            <summary>
            Setups the column.
            </summary>
            <param name="cname">The column name.</param>
            <param name="column">The column instance.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The column index. -1 if this instance does not contain it.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RemoveColumn(System.Int32)">
            <summary>
            Removes the column by the column index.
            </summary>
            <param name="cidx">The column index.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumnIndex(Lava.Data.IColumn)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="column">The column.</param>
            <returns>
            The column index. -1 if this instance does not contain it.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumn(System.Int32)">
            <summary>
            Gets the column from a column name.
            This is the object version of implementation. Use the generic one to speed up.
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column instance that is stored at the column index, null if not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumnName(System.Int32)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column name, null if this instance does not have the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumnType(System.Int32)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The type of values that are stored in the column, null if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddColumns(Lava.Data.ColumnGroup)">
            <summary>
            Adds a group of columns into this table. If one of the column (name) already existed in the table,
            an exception will be thrown.
            </summary>
            <param name="columns">The group of columns to add.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.EnsureColumns(Lava.Data.ColumnGroup)">
            <summary>
            Makes sure this table supports the given group of columns. If any of the columns is already in this
            table (judged by using the same name), it will be ignored, and continue to use the old one.
            </summary>
            <param name="columns">The group of columns this table must support.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddColumn``1(System.String)">
            <summary>
            Adds a standard column storing values of type T to this table, and uses the cname as its column name.
            The default value in the column is default(T).
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <returns>
            The column instance created.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddColumns``1(System.String[])">
            <summary>
            Adds several columns for storing values of type T in this table, and uses the names as the names.
            The default value in the column is default(T).
            </summary>
            <typeparam name="T">The type of values stored in the columns.</typeparam>
            <param name="cnames">The column names to represent the columns.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddColumn``1(System.String,``0)">
            <summary>
            Adds a standard column storing values of type T to this table, and uses the cname as its column name.
            The default value in the column is defaultValue.
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The column instance created.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddConstantColumn``1(System.String,``0)">
            <summary>
            Adds a constant column storing values of type T to this table, and uses the cname as its column name.
            The value in this column will always be constValue. Changing values in this column later is not
            allowed.
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <param name="constValue">The constant value.</param>
            <returns>
            The column instance created.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddExpressionColumn``1(System.String,System.String)">
            <summary>
            Adds an expression column storing values of type T to this table, and uses the cname as its column name.
            The values in this column is evaluated by the expression. For example, you have two column{int}s, and you
            want to add a column{int} represents of their sums. And you want to this sum column updated automatically
            when the other two columns changes. You can added it as an expression column. The expression column has
            a cache inside it, so previously visited values are cached to speed up (in case the evaluation process is
            time consuming). Meanwhile, expression column knows to updates the cached values when their dependent
            columns have updated their values. More information can be:
            <see cref="T:Hallucination.Expressions.ExprParser"/> and <see cref="T:Lava.Data.ExprParser"/>
            </summary>
            <typeparam name="T">The type of values stored in this column.</typeparam>
            <param name="cname">The column name to represent this column.</param>
            <param name="expr">The string expression to be translated int IExpression instance.</param>
            <returns>
            The column instance created.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddFuncColumn``1(System.String,System.Func{Lava.Data.IItem,``0})">
            <summary>
            Adds an evaluation-based column to this table. Similar to expression column, func column does not store
            values in it. However, expression column does cache, but func column does not. So func columns are not
            recommended for time consuming evaluations, since every single time a cell in it is visited, the 
            evaluation will be repeated.
            </summary>
            <typeparam name="T">The type of values that this column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="func">function to generate the result.</param>
            <returns>The column instance which is newly added.</returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RemoveColumn(System.String)">
            <summary>
            Removes the column by the column name.
            </summary>
            <param name="cname">The column name.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumn``1(System.Int32)">
            <summary>
            Gets the column from a column index.
            This is the generic version of implementation, which is faster.
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <typeparam name="T">The type of values stored in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <returns>
            The column instance at the column index of the table.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumn(System.String)">
            <summary>
            Gets the column from a column index.
            This is the object version of implementation. Use the generic one to speed up.
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The column instance that is stored at the column index, null if not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumn``1(System.String)">
            <summary>
            Gets the column from a column index.
            This is the generic version of implementation, which is faster.
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <typeparam name="T">The type of values stored in the column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>
            The column instance that is stored at the column index, null if not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumnType(System.String)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The type of values that are stored in the column, null if does not exist.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetColumnName(Lava.Data.IColumn)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="column">The column instance.</param>
            <returns>
            The column name, null if this instance does not have the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.CanSet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.CanGet(System.Int32,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">Type to chec.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.IsValidRow(System.Int32)">
            <summary>
            Tests if the table row is valid in the table. Two kinds of rows are invalid: the ones
            are bigger than MaxRow, and the ones are removed from the table already.
            </summary>
            <param name="trow">The table row for testing.</param>
            <returns>
            True if it is valid, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.IsValidColumn(System.Int32)">
            <summary>
            Determines whether this column index is a valid column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>True</c> if column index is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.CanGet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.CanSet(System.String,System.Type)">
            <summary>
            Indicates if the Get/Set method can be called without throwing exceptions.
            </summary>
            <param name="cname">The column name.</param>
            <param name="type">Type to check.</param>
            <returns>
            True if is supported by this column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.IsValidColumn(System.String)">
            <summary>
            Determines whether this column name is a valid column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>True</c> if the column name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Index(System.Int32)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Index``1(System.Int32)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Index``1(System.String)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RemoveIndex(System.Int32)">
            <summary>
            Removes the cached table index behind the column (if the index exists). Because the indexer
            does add event handler to the table to track the updates and keep up-to-date. So removing
            it can remove the handler to reduce the burden of the table, sort of.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            True if removal successful, false if there is no index to remove.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.Index(System.String)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RemoveIndex(System.String)">
            <summary>
            Removes the cached table index behind the column (if the index exists). Because the indexer
            does add event handler to the table to track the updates and keep up-to-date. So removing
            it can remove the handler to reduce the burden of the table, sort of.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            True if removal successful, false if there is no index to remove.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowsSortedBy(System.String,System.Boolean)">
            <summary>
            Gets all the valid rows (from this table), and sorts them based on the given column.        
            </summary>
            <param name="cname">The column name.</param>
            <param name="isAscending">Is the sort in ascending order.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowsSortedBy(System.Int32,System.Boolean)">
            <summary>
            Gets all the valid rows (from this table), and sorts them based on the given column.        
            </summary>
            <param name="cidx">The column index.</param>
            <param name="isAscending">Is the sort in ascending order.</param>
            <returns>All the valid rows sorted according to the condition.</returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowsOfValue``1(System.Int32,``0)">
            <summary>
            Gets all the rows that have the value at the specific column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The value.</param>
            <returns>
            The rows having the value.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowsOfValue``1(System.String,``0)">
            <summary>
            Gets all the rows that have the value at the specific column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of value in the column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The value.</param>
            <returns>
            The rows having the value.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowsSortedBy``1(System.String,``0,``0,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of values in that column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>
            All the valid rows sorted according to the condition.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowsSortedBy``1(System.Int32,``0,``0,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            </summary>
            <typeparam name="T">The type of values in that column.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>
            All the valid rows sorted according to the condition.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowSortedBy(System.Int32,System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            This is the object version, which should be avoid for performance issue.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>
            All the valid rows sorted according to the condition.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.RowSortedBy(System.String,System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Given a lower bound, a upper bound, and a column, Gets all the valid rows from this table,
            which have values falling into the range in that column. This function will call <c>Index(...)</c> implicitly.
            This is the object version, which should be avoid for performance issue.
            </summary>
            <param name="cname">The column name.</param>
            <param name="lo">The lower bound, included or not depending on the mode.</param>
            <param name="hi">The upper bound, included or not depending on the mode.</param>
            <param name="mode">The sorting mode.</param>
            <returns>
            All the valid rows sorted according to the condition.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.OnCellChanged``1(System.Int32,Lava.Data.TableCellUpdatedHandler{``0})">
            <summary>
            Registers a handler to be notified when a cell in this column has a value changed.
            Although you can directly call Table.GetColumn(...).CellChanged +=... to do similar
            things, this function is safer. Because in the column version, you can only get the
            row in the column, in this version, you can get the row in the table. The row in
            the column may be different from the row in the table, even when the table contains
            the column.
            </summary>
            <typeparam name="T">The type of the values contained in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="handler">The handler to register.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.AddCellUpdatedHandler``1(System.String,Lava.Data.TableCellUpdatedHandler{``0})">
            <summary>
            Registers a handler to be notified when a cell in this column has a value changed.
            Although you can directly call Table.GetColumn(...).CellChanged +=... to do similar
            things, this function is safer. Because in the column version, you can only get the
            row in the column, in this version, you can get the row in the table. The row in
            the column may be different from the row in the table, even when the table contains
            the column.
            </summary>
            <typeparam name="T">The type of the values contained in the column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="handler">The handler to register.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.RemoveCellUpdatedHandler``1(System.String,Lava.Data.TableCellUpdatedHandler{``0})">
            <summary>
            Removes the cell changed handler for a given column.
            </summary>
            <typeparam name="T">The type of the values contained in the column.</typeparam>
            <param name="cname">The column name.</param>
            <param name="handler">The handler to be removed.</param>        
        </member>
        <member name="M:Lava.Data.AbstractTable.OnTableChanged(System.Int32,System.Int32,System.Int32,Lava.Data.DataEvent)">
            <summary>
            Called to invoke all table change event handlers.
            </summary>
            <param name="start">The start row in the table.</param>
            <param name="end">The end row in the table.</param>
            <param name="cidx">The column index.</param>
            <param name="type">The type of the event.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.OnTableColumnChanged(System.Int32,System.String,Lava.Data.DataEvent)">
            <summary>
            Called to invoke all table column change event handlers.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="cname">The column name.</param>
            <param name="type">The type of the event.</param>
        </member>
        <member name="M:Lava.Data.AbstractTable.ToColumnGroup">
            <summary>
            Gets the column group of the table, which record all the column types, names, and default values.
            </summary>
            <returns>
            The column group.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.ContainsColumn(Lava.Data.IColumn)">
            <summary>
            Determines whether the manager contains column.
            </summary>
            <param name="column">The column.</param>
            <returns>
              <c>True</c> if the manager contains column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.ContainsColumn(System.String)">
            <summary>
            Determines whether the manager contains column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>True</c> if the manager contains column name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.ContainsColumn(System.Int32)">
            <summary>
            Determines whether the manager contains column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>True</c> if the manager contains column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetDefaultValue``1(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetDefaultValue``1(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value typo supported in that column.</typeparam>
            <param name="cname">The column name.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetDefaultValue(System.Int32)">
            <summary>
            Gets the default value of the column at the column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractTable.GetDefaultValue(System.String)">
            <summary>
            Gets the default value of the column at the column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The default value of that column.
            </returns>
        </member>
        <member name="P:Lava.Data.AbstractTable.Items">
            <summary>
            Gets all items in this instance.
            </summary>
            <returns>
            All items in this instance.
            </returns>
        </member>
        <member name="P:Lava.Data.AbstractTable.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="P:Lava.Data.AbstractTable.RowManager">
            <summary>
            Gets the row manager.
            </summary>
            <value>
            The row manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IRowManager"/>
        </member>
        <member name="P:Lava.Data.AbstractTable.ColumnManager">
            <summary>
            Gets the column manager.
            </summary>
            <value>
            The column manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IColumnManager"/>
        </member>
        <member name="P:Lava.Data.AbstractTable.ItemManager">
            <summary>
            Gets/Sets the item manager.
            </summary>
            <value>
            The item manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IItemManager"/>
            <exception cref="T:Lava.Exceptions.MismatchException">Tables do not match!</exception>
        </member>
        <member name="E:Lava.Data.AbstractTable.TableChanged">
             <summary>
             Occurs when the table has changed or will change. Events include: 1) add/remove a row/column, 2) a cell is updated
             inside the table. When the type is <c>Insert</c>, it could mean either a row (startRow == endRow and cidx &lt; 0), 
             or a column (startRow == sender.MinRow and endRow == sender.MaxRow and cidx &gt;= 0). When the type is <c>Update</c>, 
             it means that a cell is updated (startRow == endRow and cidx &gt;=0). When the type is <c>Delete</c>, it also could 
             mean a row or column, just like when type is <c>Insert</c>.
             
             **Important notice**: for <c>Insert</c> and <c>Update</c> events, the Handlers are called *AFTER* things are 
             changed. However, for <c>Delete</c> event, the handlers are called *BEFORE* things are actually deleted.
            
             </summary>
        </member>
        <member name="E:Lava.Data.AbstractTable.TableColumnChanged">
            <summary>
            Occurs when the table has a column changed, such as adding/removing a column.
            
            **Important notice**: for <c>Insert</c> event, the Handlers are called *AFTER* things are changed. 
            However, for <c>Delete</c> event, the handlers are called *BEFORE* things are actually deleted.
            
            </summary>
        </member>
        <member name="E:Lava.Data.AbstractTable.InternalPriorTableChanged">
            <summary>
            Internal table event handlers. It is the same as the regular table event handlers. But it is invoked before
            the regular ones.
            </summary>
        </member>
        <member name="P:Lava.Data.AbstractTable.ItemCount">
            <summary>
            Gets the item count.
            </summary>
            <value>
            The item count.
            </value>
        </member>
        <member name="P:Lava.Data.AbstractTable.RowCount">
            <summary>
            Gets the row count.
            </summary>
            <value>
            The row count.
            </value>
        </member>
        <member name="P:Lava.Data.AbstractTable.MaxRow">
            <summary>
            Gets the max valid row in this table.
            </summary>
            <value>
            The max row.
            </value>
        </member>
        <member name="P:Lava.Data.AbstractTable.MinRow">
            <summary>
            Gets the min valid row in this table.
            </summary>
            <value>
            The min row.
            </value>
        </member>
        <member name="P:Lava.Data.AbstractTable.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="T:Lava.Data.IChildTable">
            <summary>
            The interface of child table.
            
            Child Table inherit some columns of its parent. (All parent columns by default) 
            And it can contain columns by itself. 
            Change the cell in Child Table will make the same cell in parent table change. 
            Because they are the same copy from the same column instance.
            
            </summary>
        </member>
        <member name="M:Lava.Data.IChildTable.ExcludeParentColumn(System.String)">
            <summary>
            Excludes a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be excluded.</param>
        </member>
        <member name="M:Lava.Data.IChildTable.IncludeParentColumn(System.String)">
            <summary>
            Adds a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be added.</param>
        </member>
        <member name="M:Lava.Data.IChildTable.IncludeParentColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds parent columns by their names, no effect when it is already included.
            </summary>
            <param name="pnames">The names of the columns in the parent table to be added.</param>
        </member>
        <member name="M:Lava.Data.IChildTable.IsChildColumn(System.String)">
            <summary>
            Checks if the column is a local column.
            </summary>
            <param name="cname">The name of the column in the tbale.</param>
            <returns>True if the column is local column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.IsChildColumn(System.Int32)">
            <summary>
            Checks if the column is a local column.
            </summary>
            <param name="cidx">The column name in this child table.</param>
            <returns>True if the column is local column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.IsParentColumn(System.Int32)">
            <summary>
            Checks if the column is a parent column.
            </summary>
            <param name="cidx">The column index in this child table.</param>
            <returns>True if the column is parent column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.IsParentColumn(System.String)">
            <summary>
            Checks if the column is a parent column.
            </summary>
            <param name="cname">The name of the column in the table.</param>
            <returns>True if the column is parent column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.GetParentRow(System.Int32)">
            <summary>
            Given a row in this table, finds the back end row in the parent table.
            </summary>
            <param name="trow">The row in this table.</param>
            <returns>The mapped row in its parent table, -1 if there is no mapped row.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.GetChildRow(System.Int32)">
            <summary>
            Given a row in its parent table, finds the first mapping row in this table.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>The first mapped row in this table, -1 if there is no mapped row.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.GetChildRows(System.Int32)">
            <summary>
            Given a row in its parent table, finds all the mapping rows in this table. Since one
            parent row can be used in multiple rows in the child table, you may get multiple child rows.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>All the mapping rows in this table, empty if there is no mapping rows.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.GetChildColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the child table when you know the parent column index of the column.
            </summary>
            <param name="pcidx">The column index in the parent table.</param>
            <returns>The column index in the child table.</returns>
        </member>
        <member name="M:Lava.Data.IChildTable.GetParentColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the parent table when you know the column index in this child table.
            </summary>
            <param name="tcidx">The column index in the child table.</param>
            <returns>The column index in the parent table. -1 if could not find it.</returns>
        </member>
        <member name="P:Lava.Data.IChildTable.Parent">
            <summary>
            The parent table of this child table. The child table can have its own columns or
            inherit some columns from its parent table. 
            </summary>
        </member>
        <member name="P:Lava.Data.IChildTable.ChildColumnCount">
            <summary>
            The number of child columns.
            </summary>
            <value>
            The child column count.
            </value>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.#ctor(Lava.Data.ITable,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.AbstractChildTable"/> class.
            </summary>
            <param name="parent">The parent table.</param>
            <param name="columnFilter">The column filter deciding what parent columns are included.</param>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Set(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the value in the cell at the table row = trow and column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Set``1(System.Int32,System.Int32,``0)">
            <summary>
            Sets the value in the cell at the table row = trow and column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Set(System.Int32,System.String,System.Object)">
            <summary>
            Sets the value in the cell at the table row = trow and column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Set``1(System.Int32,System.String,``0)">
            <summary>
            Sets the value in the cell at the table row = trow and column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <param name="value">The new value.</param>
            <returns>
            True if the update successful, false if the value is the same.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Get(System.Int32,System.Int32)">
            <summary>
            Gets the value from the cell at table row = trow and column index = cidx.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Get``1(System.Int32,System.Int32)">
            <summary>
            Gets the value from the cell at table row = trow and column index = cidx.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The row.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Get(System.Int32,System.String)">
            <summary>
            Gets the value from the cell at table row = trow and column name = cname.
            This is the object version, so if you know the type, please use the generic
            version to improve the performance.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Get``1(System.Int32,System.String)">
            <summary>
            Gets the value from the cell at table row = trow and column name = cname.
            This is the generic version, which is faster than the object version.
            </summary>
            <typeparam name="T">The value type that column supports.</typeparam>
            <param name="trow">The table row.</param>
            <param name="cname">The column name.</param>
            <returns>
            The value stored in that cell.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.GetChildColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the child table when you know the parent column index of the column.
            </summary>
            <param name="pcidx">The column index in the parent table.</param>
            <returns>
            The column index in the child table.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.OnCellChanged``1(System.Int32,Lava.Data.TableCellUpdatedHandler{``0})">
            <summary>
            Registers a handler to be notified when a cell in this column has a value changed.
            Although you can directly call Table.GetColumn(...).CellChanged +=... to do similar
            things, this function is safer. Because in the column version, you can only get the
            row in the column, in this version, you can get the row in the table. The row in
            the column may be different from the row in the table, even when the table contains
            the column.
            </summary>
            <typeparam name="T">The type of the values contained in the column.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="handler">The handler to register.</param>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.GetParentColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the parent table when you know the column index in this child table.
            </summary>
            <param name="tcidx">The column index in the child table.</param>
            <returns>
            The column index in the parent table. -1 if could not find it.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.Dispose">
            <summary>
            Disposes the table, including all event handlers, table indexes and managers.
            </summary>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.SetupColumn(System.String,Lava.Data.IColumn)">
            <summary>
            Setups the column.
            </summary>
            <param name="cname">The column name.</param>
            <param name="column">The column instance.</param>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.ExcludeParentColumn(System.String)">
            <summary>
            Excludes a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be excluded.</param>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.IncludeParentColumn(System.String)">
            <summary>
            Adds a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be added.</param>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.IncludeParentColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds parent columns by their names, no effect when it is already included.
            </summary>
            <param name="pnames">The names of the columns in the parent table to be added.</param>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.IsChildColumn(System.Int32)">
            <summary>
            Checks if the column is a local column.
            </summary>
            <param name="cidx">The column name in this child table.</param>
            <returns>True if the column is local column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.IsParentColumn(System.Int32)">
            <summary>
            Checks if the column is a parent column.
            </summary>
            <param name="cidx">The column index in this child table.</param>
            <returns>True if the column is parent column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.IsParentColumn(System.String)">
            <summary>
            Checks if the column is a parent column.
            </summary>
            <param name="cname">The name of the column in the table.</param>
            <returns>
            True if the column is parent column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.IsChildColumn(System.String)">
            <summary>
            Checks if the column is a local column.
            </summary>
            <param name="cname">The name of the column in the tbale.</param>
            <returns>
            True if the column is local column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.GetParentRow(System.Int32)">
            <summary>
            Given a row in this table, finds the back end row in the parent table.
            </summary>
            <param name="trow">The row in this table.</param>
            <returns>
            The mapped row in its parent table, -1 if there is no mapped row.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.GetChildRow(System.Int32)">
            <summary>
            Given a row in its parent table, finds the first mapping row in this table.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>
            The first mapped row in this table, -1 if there is no mapped row.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.GetChildRows(System.Int32)">
            <summary>
            Given a row in its parent table, finds all the mapping rows in this table. Since one
            parent row can be used in multiple rows in the child table, you may get multiple child rows.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>
            All the mapping rows in this table, empty if there is no mapping rows.
            </returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.BaseAddRow">
            <summary>
            Adds a row using the base.AddRow function, only for internal use.
            </summary>
            <returns>The row newly added.</returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.BaseRemoveRow(System.Int32)">
            <summary>
            Removes a row using the base.RemoveRow function, only for internal use.
            </summary>
            <returns>True if the removal is successful.</returns>
        </member>
        <member name="M:Lava.Data.AbstractChildTable.BaseClear">
            <summary>
            Clears this table using the base.Clear function, only for internal use.
            </summary>
            <returns>True if the clear operation is successful.</returns>
        </member>
        <member name="P:Lava.Data.AbstractChildTable.Parent">
            <summary>
            The parent table of this child table. The child table can have its own columns or
            inherit some columns from its parent table.
            </summary>
        </member>
        <member name="P:Lava.Data.AbstractChildTable.ChildColumnCount">
            <summary>
            The number of child columns.
            </summary>
            <value>
            The child column count.
            </value>
        </member>
        <member name="P:Lava.Data.AbstractChildTable.ColumnFilter">
            <summary>
            The rule that decide what parent columns are included in this child table.
            </summary>
        </member>
        <member name="P:Lava.Data.AbstractChildTable.RowManager">
            <summary>
            Gets the row manager.
            </summary>
            <value>
            The row manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IRowManager"/>
        </member>
        <member name="P:Lava.Data.AbstractChildTable.ColumnManager">
            <summary>
            Gets the column manager.
            </summary>
            <value>
            The column manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IColumnManager"/>
        </member>
        <member name="M:Lava.Data.DefaultChildTable.#ctor(Lava.Data.ITable,System.Func{System.String,System.Boolean})">
            <summary>
            Build a default child table. The child table has no rows in it.
            You can call 1) AddRow to add a row in this child table but has no backend parent row; 2)
            or AddParentRow to add a row in this table but has the backend parent row.
            </summary>
            <param name="parent">The parent table.</param>
            <param name="columnFilter">The filter to decide which columns to included in this table.</param>
        </member>
        <member name="M:Lava.Data.DefaultChildTable.IsParentRowLinked(System.Int32)">
            <summary>
            Tests if the given parent row is used somewhere in this child table.
            </summary>
            <param name="prow">The parent row.</param>
            <returns>True if this parent row is used at least once in this table, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.DefaultChildTable.RemoveLinkedRows(System.Int32)">
            <summary>
            If the parent row is linked in this child table, removes all related child rows.
            </summary>
            <param name="prow">The parent row.</param>
            <returns>if one or more child rows are removed.</returns>
        </member>
        <member name="M:Lava.Data.DefaultChildTable.ClearParentRowLinks(System.Int32)">
            <summary>
            If the parent row is linked in this child table, clears all the links, and
            makes all the linked child rows link to nothing.
            </summary>
            <param name="prow">The parent row.</param>
            <returns>True if one or more child child rows are reset.</returns>
        </member>
        <member name="M:Lava.Data.DefaultChildTable.AddRowAndLink(System.Int32)">
            <summary>
            Add a row in this child table and link it to the given parent row.
            </summary>
            <param name="prow">The parent row.</param>
            <returns>The newly created row in this table.</returns>
        </member>
        <member name="M:Lava.Data.DefaultChildTable.RelinkParentRow(System.Int32,System.Int32)">
            <summary>
            Re-link the child row and the parent row together. The old parent row
            that linked to the child row is replaced.
            </summary>
            <param name="childRow">The child row.</param>
            <param name="parentRow">The parent row. -1 if just want to remove the old link.</param>
            <returns>The parent row this table row used to link.</returns>
        </member>
        <member name="P:Lava.Data.DefaultChildTable.RowManager">
            <summary>
            Gets the row manager.
            </summary>
            <value>
            The row manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IRowManager"/>
        </member>
        <member name="T:Lava.Data.GhostChildTable">
            <summary>
            This table is a child table that faithfully reflect its parent table.
            All parent columns are included in this child table. All rows are
            literally mapped to this child table. Adding/Removing rows are allowed
            in the child table and parent table. Events are also linked together.
            This table allows you to add column to the child table, while the parent 
            table stays unknown about them, which is very useful to VisualTable.
            
            </summary>
        </member>
        <member name="M:Lava.Data.GhostChildTable.#ctor(Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.GhostChildTable"/> class.
            </summary>
            <param name="parent">The parent table.</param>
        </member>
        <member name="M:Lava.Data.GhostChildTable.AddRow">
            <summary>
            Adds a row to this table, returns the newly added row in the table.
            </summary>
            <returns>
            The row number of the newly added row.
            </returns>
        </member>
        <member name="M:Lava.Data.GhostChildTable.RemoveRow(System.Int32)">
            <summary>
            Removes a row in this table.
            </summary>
            <param name="trow">The table row to be removed.</param>
            <returns>
            True if the removal is successful, false if already removed.
            </returns>
        </member>
        <member name="M:Lava.Data.GhostChildTable.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns>
            True is it is previously not empty, false if it is already empty.
            </returns>
        </member>
        <member name="M:Lava.Data.GhostChildTable.Index(System.Int32)">
            <summary>
            Gets the indexer for a given column (build one if necessary). The type in the column should be
            comparable, otherwise, an exception will be thrown. Using the indexer, you can do queries (give
            values and get hit rows...) efficiently.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The table indexer instance for you to query.
            </returns>
        </member>
        <member name="M:Lava.Data.GhostChildTable.RemoveIndex(System.Int32)">
            <summary>
            Removes the cached table index behind the column (if the index exists). Because the indexer
            does add event handler to the table to track the updates and keep up-to-date. So removing
            it can remove the handler to reduce the burden of the table, sort of.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            True if removal successful, false if there is no index to remove.
            </returns>
        </member>
        <member name="P:Lava.Data.GhostChildTable.RowManager">
            <summary>
            Gets the row manager.
            </summary>
            <value>
            The row manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IRowManager"/>
            <exception cref="T:Lava.Exceptions.ForbiddenException">It's forbidden to set row manager to GhostChildTable.</exception>
        </member>
        <member name="T:Lava.Data.IPredicateTable">
            <summary>
            <para>
            IPredicateTable is a type of IChildTable that the mapping mechanism is using a RowFilter
            that decided which rows are included in this child table. Therefore, every row in this
            table has a back end row in its parent table. And every row in the parent table has at
            most one row in this child table.
            </para>
            
            <seealso cref="T:Lava.Data.ITable"/>
            </summary>
        </member>
        <member name="P:Lava.Data.IPredicateTable.RowFilter">
            <summary>
            The predicate to filter rows.
            </summary>
        </member>
        <member name="T:Lava.Data.PredicateTable">
            <summary>
            A type of child table that is defined by a RowFilter. Setting this value will
            trigger this table to include all the rows of that parent table that meet the
            condition. You cannot add any rows, but you can remove rows or clear the table.
            
            </summary>
        </member>
        <member name="M:Lava.Data.PredicateTable.#ctor(Lava.Data.ITable,Hallucination.Expressions.IPredicate,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.PredicateTable"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="filter">The filter.</param>
            <param name="columnFilter">The column filter.</param>
        </member>
        <member name="M:Lava.Data.PredicateTable.#ctor(Lava.Data.ITable,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.PredicateTable"/> class.
            </summary>
            <param name="parent">The parent table.</param>
            <param name="columnFilter">The column filter deciding what parent columns are included.</param>
        </member>
        <member name="M:Lava.Data.PredicateTable.AddRow">
            <summary>
            This method is disabled for predicate table. However, you can add a row to this child table 
            by adding a row to the parent that meets the predicate.
            </summary>
            <returns>The newly added row number.</returns>
        </member>
        <member name="P:Lava.Data.PredicateTable.RowFilter">
            <summary>
            The predicate to filter rows.
            </summary>
        </member>
        <member name="P:Lava.Data.PredicateTable.RowManager">
            <summary>
            Gets the row manager.
            </summary>
            <value>
            The row manager.
            </value>
            <seealso cref="T:Lava.Data.Manager.IRowManager"/>
        </member>
        <member name="T:Lava.Data.Table">
            <summary>
            Default Table. Use TableItem as Item.
            
            </summary>
        </member>
        <member name="M:Lava.Data.Table.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Table"/> class.
            </summary>
        </member>
        <member name="M:Lava.Data.Table.#ctor(Lava.Data.ColumnGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Table"/> class.
            </summary>
            <param name="columns">The columns.</param>
        </member>
        <member name="T:Lava.Data.IndexMode">
            <summary>
            Table index mode. Used when you read data with the table index.
            
            It is a "Flags" enum. You MUST be clear that:
            It is dangerous to set both Ascending and Descending.
            It is dangerous to set both LeftInclusive and LeftExclusive.
            It is dangerous to set both RightInclusive and RightExclusive.
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.Ascending">
            <summary>
            Ascending order
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.Descending">
            <summary>
            Descending order
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.LeftInclusive">
            <summary>
            Include left (minimal) value you assigned
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.LeftExclusive">
            <summary>
            exclude left (minimal) value you assigned
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.RightInclusive">
            <summary>
            Include right (maximal) value you assigned
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.RightExclusive">
            <summary>
            exclude right (maximal) value you assigned
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.AII">
            <summary>
            Ascending and LeftInclusive and RightInclusive
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.AEI">
            <summary>
            Ascending and LeftExclusive and RightInclusive
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.AIE">
            <summary>
            Ascending and LeftInclusive and RightExclusive
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.AEE">
            <summary>
            Ascending and LeftExclusive and RightExclusive
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.DII">
            <summary>
            Descending and LeftInclusive and RightInclusive
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.DEI">
            <summary>
            Descending and LeftExclusive and RightInclusive
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.DIE">
            <summary>
            Descending and LeftInclusive and RightExclusive
            </summary>
        </member>
        <member name="F:Lava.Data.IndexMode.DEE">
            <summary>
            Descending and LeftExclusive and RightExclusive
            </summary>
        </member>
        <member name="T:Lava.Data.IndexModeExtensionMethods">
            <summary>
            Define some help methods of IndexMode.
            Test its mode feature.
            </summary>
        </member>
        <member name="T:Lava.Data.ITableIndex">
            <summary>
            Define table index. This helper class monitors a column within a table, and supports
            some fast data query operations. There are two version of this Index class. If you 
            know the value type, you had better converse it to generic version to avoid boxing/unboxing
            to improve performance.
            
            </summary>
        </member>
        <member name="M:Lava.Data.ITableIndex.Index">
            <summary>
            Builds the index. This function only needs to be called once. Calling it multiple times
            has no side-effects.
            </summary>
        </member>
        <member name="M:Lava.Data.ITableIndex.AllRows(Lava.Data.IndexMode)">
            <summary>
            Enumerates all rows (including rows for min and max) with the index mode.
            Only the ascending/descending flag is used in the mode parameter.
            </summary>
            <param name="mode">Index mode.</param>
            <returns>All rows ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.Rows(System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Enumerates rows of the values that are between the specific two values. Whether lo or hi are
            included are determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>All legitimate rows ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.AllValues(Lava.Data.IndexMode)">
            <summary>
            Enumerates values (including min and max values) with the index mode. If a value is duplicated,
            they will be enumerated one by one as well. Only the ascending/descending flag is used in the
            mode parameter.
            </summary>
            <param name="mode">Index mode.</param>
            <returns>All values ordered by the index rule.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.Rows(System.IComparable)">
            <summary>
            Enumerates rows of the values that exactly the same as the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            All legitimate rows in the ascending order.
            </returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.Values(System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Enumerates all values between the specific two values. Whether lo or hi are included is
            determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>All legitimate values ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.First(System.IComparable)">
            <summary>
            Gets the first row found with the given data value.
            </summary>
            <param name="value">The value for searching.</param>
            <returns>The row found. -1 if not found.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.Contains(System.IComparable)">
            <summary>
            Tests if the column contains the specific value.
            </summary>
            <param name="value">The value for testing.</param>
            <returns>True if it is contained.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.IsUnique(System.IComparable)">
            <summary>
            Tests if the value is unique in the column.
            </summary>
            <param name="value">The value for testing.</param>
            <returns>True if the value is unique.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.CountValue(System.IComparable)">
            <summary>
            Gets the appearance number of the specific value in this column.
            </summary>
            <param name="value">The value for counting.</param>
            <returns>The count of rows which contain the value.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex.Dispose">
            <summary>
            Disposes the table index. Releases anything held within this class, such as data structures and event handlers...
            </summary>
        </member>
        <member name="P:Lava.Data.ITableIndex.Table">
            <summary>
            Back-end table.
            </summary>
        </member>
        <member name="P:Lava.Data.ITableIndex.MinimumRow">
            <summary> 
            Gets the row (or one of the rows) with the minimum Data value.
            </summary>
            <returns>
            A row with a minimum Data value.
            </returns>
        </member>
        <member name="P:Lava.Data.ITableIndex.MaximumRow">
            <summary>
            Gets the row (or one of the rows) with the maximum Data value.
            </summary>
            <returns>
            A row with a maximum Data value.
            </returns>
        </member>
        <member name="P:Lava.Data.ITableIndex.Minimum">
            <summary>
            Gets the minimum data.
            </summary>
        </member>
        <member name="P:Lava.Data.ITableIndex.Maximum">
            <summary>
            Gets maximum data.
            </summary>
        </member>
        <member name="P:Lava.Data.ITableIndex.MedianRow">
            <summary> 
            Gets the row (or one of the rows) with the median Data value.
            </summary>
            <returns> 
            A row with a median Data value.
            </returns>
        </member>
        <member name="P:Lava.Data.ITableIndex.UniqueCount">
            <summary> 
            Gets the number of unique Data values in the Index.
            </summary>
            <returns> 
            The number of unique Data values.
            </returns>
        </member>
        <member name="P:Lava.Data.ITableIndex.Count">
            <summary> 
            Gets the size of this Index, the number of (value, row) pairs included.
            </summary>
            <returns> 
            The size of the Index.
            </returns>
        </member>
        <member name="T:Lava.Data.ITableIndex`1">
            <summary>
            Generic define of table index. Some functions are override or newed to improve the performance.
            
            </summary>
            <typeparam name="T">value type</typeparam>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.Rows(`0,`0,Lava.Data.IndexMode)">
            <summary>
            Enumerates rows of the values that are between the specific two values. Whether lo or hi are
            included are determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>All legitimate rows ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.Rows(`0)">
            <summary>
            Enumerates rows of the values that exactly the same as the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            All legitimate rows in the ascending order.
            </returns>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.Values(`0,`0,Lava.Data.IndexMode)">
            <summary>
            Enumerates all values between the specific two values. Whether lo or hi are included is
            determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>All legitimate values ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.AllValues(Lava.Data.IndexMode)">
            <summary>
            Enumerates values (including min and max values) with the index mode. If a value is duplicated,
            they will be enumerated one by one as well. Only the ascending/descending flag is used in the
            mode parameter.
            </summary>
            <param name="mode">Index mode.</param>
            <returns>All values ordered by the index rule.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.First(`0)">
            <summary>
            Gets the first row found with the given data value.
            </summary>
            <param name="value">The value for searching.</param>
            <returns>The row found. -1 if not found.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.Contains(`0)">
            <summary>
            Tests if the column contains the specific value.
            </summary>
            <param name="value">The value for testing.</param>
            <returns>True if it is contained.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.IsUnique(`0)">
            <summary>
            Tests if the value is unique in the column.
            </summary>
            <param name="value">The value for testing.</param>
            <returns>True if the value is unique.</returns>
        </member>
        <member name="M:Lava.Data.ITableIndex`1.CountValue(`0)">
            <summary>
            Gets the appearance number of the specific value in this column.
            </summary>
            <param name="value">The value for counting.</param>
            <returns>The count of rows which contain the value.</returns>
        </member>
        <member name="P:Lava.Data.ITableIndex`1.Minimum">
            <summary>
            Gets the minimum data.
            </summary>
        </member>
        <member name="P:Lava.Data.ITableIndex`1.Maximum">
            <summary>
            Gets maximum data.
            </summary>
        </member>
        <member name="T:Lava.Data.Index.TableIndex`1">
            <summary>
            Define table index. This helper class monitors a column within a table, and supports
            some fast data query operations. There are two version of this Index class. If you
            know the value type, you had better converse it to generic version to avoid boxing/unboxing
            to improve performance.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.#ctor(Lava.Data.AbstractTable,Lava.Data.IColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Index.TableIndex`1"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.#ctor(Lava.Data.AbstractTable,Lava.Data.Column.AbstractColumn{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Index.TableIndex`1"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
            <exception cref="T:Lava.Exceptions.MismatchException">The indexed column does NOT exist in the table.</exception>
            <exception cref="T:Lava.Exceptions.ForbiddenException">Indexing constant column is meaningless.</exception>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Index">
            <summary>
            Builds the index. This function only needs to be called once. Calling it multiple times
            has no side-effects.
            </summary>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Dispose">
            <summary>
            Disposes the table index. Releases anything held within this class, such as data structures and event handlers...
            </summary>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.AllRows(Lava.Data.IndexMode)">
            <summary>
            Enumerates all rows (including rows for min and max) with the index mode.
            Only the ascending/descending flag is used in the mode parameter.
            </summary>
            <param name="mode">Index mode.</param>
            <returns>
            All rows ordered by the index mode.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Rows(`0)">
            <summary>
            Enumerates rows of the values that exactly the same as the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            All legitimate rows in the ascending order.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Rows(System.IComparable)">
            <summary>
            Enumerates rows of the values that exactly the same as the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            All legitimate rows in the ascending order.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Rows(`0,`0,Lava.Data.IndexMode)">
            <summary>
            Enumerates rows of the values that are between the specific two values. Whether lo or hi are
            included are determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>All legitimate rows ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.First(`0)">
            <summary>
            Gets the first row found with the given data value.
            </summary>
            <param name="value">The value for searching.</param>
            <returns>The row found. -1 if not found.</returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Rows(System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Enumerates rows of the values that are between the specific two values. Whether lo or hi are
            included are determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>
            All legitimate rows ordered by the index mode.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.First(System.IComparable)">
            <summary>
            Gets the first row found with the given data value.
            </summary>
            <param name="value">The value for searching.</param>
            <returns>
            The row found. -1 if not found.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Contains(`0)">
            <summary>
            Determines whether contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>True</c> if contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Contains(System.IComparable)">
            <summary>
            Tests if the column contains the specific value.
            </summary>
            <param name="value">The value for testing.</param>
            <returns>
            True if it is contained.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.IsUnique(System.IComparable)">
            <summary>
            Tests if the value is unique in the column.
            </summary>
            <param name="value">The value for testing.</param>
            <returns>
            True if the value is unique.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.IsUnique(`0)">
            <summary>
            Determines whether the specified value is unique.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>True</c> if the specified value is unique; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.CountValue(`0)">
            <summary>
            Gets the appearance number of the specific value in this column.
            </summary>
            <param name="value">The value for counting.</param>
            <returns>
            The count of rows which contain the value.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.CountValue(System.IComparable)">
            <summary>
            Gets the appearance number of the specific value in this column.
            </summary>
            <param name="value">The value for counting.</param>
            <returns>
            The count of rows which contain the value.
            </returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Values(`0,`0,Lava.Data.IndexMode)">
            <summary>
            Enumerates all values between the specific two values. Whether lo or hi are included is
            determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>All legitimate values ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Lava#Data#ITableIndex#AllValues(Lava.Data.IndexMode)">
            <summary>
            Enumerates values (including min and max values) with the index mode. If a value is duplicated,
            they will be enumerated one by one as well. Only the ascending/descending flag is used in the
            mode parameter.
            </summary>
            <param name="mode">Index mode.</param>
            <returns>All values ordered by the index rule.</returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Values(System.IComparable,System.IComparable,Lava.Data.IndexMode)">
            <summary>
            Enumerates all values between the specific two values. Whether lo or hi are included is
            determined by the index mode.
            </summary>
            <param name="lo">Low value.</param>
            <param name="hi">High value.</param>
            <param name="mode">Index mode.</param>
            <returns>All legitimate values ordered by the index mode.</returns>
        </member>
        <member name="M:Lava.Data.Index.TableIndex`1.Lava#Data#ITableIndex{T}#AllValues(Lava.Data.IndexMode)">
            <summary>
            Enumerates values (including min and max values) with the index mode. If a value is duplicated,
            they will be enumerated one by one as well. Only the ascending/descending flag is used in the
            mode parameter.
            </summary>
            <param name="mode">Index mode.</param>
            <returns>All values ordered by the index rule.</returns>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.Table">
            <summary>
            Back-end table.
            </summary>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.Column">
            <summary>
            The indexed column.
            </summary>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.Count">
            <summary>
            Gets the size of this Index, the number of (value, row) pairs included.
            </summary>
            <returns>
            The size of the Index.
              .</returns>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.MinimumRow">
            <summary>
            Gets the row (or one of the rows) with the minimum Data value.
            </summary>
            <returns>
            A row with a minimum Data value.
              .</returns>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.MaximumRow">
            <summary>
            Gets the row (or one of the rows) with the maximum Data value.
            </summary>
            <returns>
            A row with a maximum Data value.
              .</returns>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.MedianRow">
            <summary>
            Gets the row (or one of the rows) with the median Data value.
            </summary>
            <returns>
            A row with a median Data value.
              .</returns>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.Minimum">
            <summary>
            Gets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.Maximum">
            <summary>
            Gets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.UniqueCount">
            <summary>
            Gets the number of unique Data values in the Index.
            </summary>
            <returns>
            The number of unique Data values.
              .</returns>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.Lava#Data#ITableIndex#Minimum">
            <summary>
            Gets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:Lava.Data.Index.TableIndex`1.Lava#Data#ITableIndex#Maximum">
            <summary>
            Gets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="T:Lava.Data.Manager.AbstractColumnManager">
            <summary>
            Basic features of column manager:
            See also: <c>IColumnManager</c>
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.IColumnManager">
            <summary>
            ColumnManager Manage columns in table.
            Its duties include:
            1. Contain Column instances and meta-data.
            2. Manage the relations among column instance, column name, column index.
            3. Update Column Information: Add/Remove Column.
            
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.IsValidColumn(System.Int32)">
            <summary>
            Determines whether this column index is a valid column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>true</c> if column index is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.ContainsColumn(Lava.Data.IColumn)">
            <summary>
            Determines whether the manager contains column.
            </summary>
            <param name="column">The column.</param>
            <returns>
              <c>true</c> if the manager contains column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.ContainsColumn(System.String)">
            <summary>
            Determines whether the manager contains column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>true</c> if the manager contains column name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.ContainsColumn(System.Int32)">
            <summary>
            Determines whether the manager contains column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>true</c> if the manager contains column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.CanGet(System.Int32,System.Type)">
            <summary>
            Determines whether this instance can get a certain type from the specified column index.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance can get a certain type from the specified column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.CanSet(System.Int32,System.Type)">
            <summary>
            Determines whether this instance can set a certain type from the specified column index.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance can set a certain type from the specified column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.GetColumn(System.Int32)">
            <summary>
            Gets the column from a column index. 
            
            This is the object version of implementation. Use the generic one to speed up.
            
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The column instance that is stored at the column index, null if not exist.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.GetColumn``1(System.Int32)">
            <summary>
            Gets the column from a column index.
            
            This is the generic version of implementation, which is faster.
            
            Operating columns directly is dangerous, usually you let the table do it. Because
            there is a mapping relation between column rows and table rows. Changing a value
            at a column row may change the value in a unexpected table row.
            </summary>
            <typeparam name="T">The type of values stored in the column.</typeparam>
            <param name="cidx">The cidx.</param>
            <returns>The column instance that is stored at the column index, null if not exist.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.GetColumnIndex(Lava.Data.IColumn)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="column">The column.</param>
            <returns>The column index. -1 if this instance does not contain it.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>The column index. -1 if this instance does not contain it.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.GetColumnName(System.Int32)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The column name, null if this instance does not have the column index.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.AddColumn(System.String,Lava.Data.IColumn)">
            <summary>
            Adds the column to this instance.
            </summary>
            <param name="cname">The column name used to represent this column.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.RemoveColumn(System.Int32)">
            <summary>
            Removes the column.
            </summary>
            <param name="cidx">The column index.</param>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.GetColumnType(System.Int32)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The type of values that are stored in the column.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IColumnManager.Dispose">
            <summary>
            Disposes the manager. Removes all event handlers (if has any).
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.IColumnManager.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="P:Lava.Data.Manager.IColumnManager.Table">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Lava.Data.Manager.IColumnManager.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
            <value>
            The column names.
            </value>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.RemoveColumn(System.Int32)">
            <summary>
            Removes the column.
            </summary>
            <param name="cidx">The column index.</param>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.AddColumn(System.String,Lava.Data.IColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="name">The name.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.GetColumn(System.Int32)">
            <summary>
            Gets the column from a column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column instance that is stored at the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.GetColumnIndex(Lava.Data.IColumn)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="column">The column.</param>
            <returns>
            The column index. -1 if this instance does not contain it.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The column index. -1 if this instance does not contain it.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.GetColumnName(System.Int32)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column name, null if this instance does not have the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.Dispose">
            <summary>
            Disposes the manager. Removes all event handlers (if has any).
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.#ctor(Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.AbstractColumnManager"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.IsValidColumn(System.Int32)">
            <summary>
            Determines whether this column index is a valid column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>true</c> if column index is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.ContainsColumn(System.String)">
            <summary>
            Determines whether the manager contains column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>true</c> if the manager contains column name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.ContainsColumn(System.Int32)">
            <summary>
            Determines whether the manager contains column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
              <c>true</c> if the manager contains column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.GetColumnType(System.Int32)">
            <summary>
            Gets the type of values that are stored in the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The type of values that are stored in the column.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.CanGet(System.Int32,System.Type)">
            <summary>
            Determines whether this instance can get a certain type from the specified column index.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance can get a certain type from the specified column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.CanSet(System.Int32,System.Type)">
            <summary>
            Determines whether this instance can set a certain type from the specified column index.
            </summary>
            <param name="cidx">The column index.</param>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance can set a certain type from the specified column index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.GetColumn``1(System.Int32)">
            <summary>
            Gets the column from a column index.
            </summary>
            <typeparam name="T">The type of values stored in the column.</typeparam>
            <param name="cidx">The cidx.</param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Data.Manager.AbstractColumnManager.ContainsColumn(Lava.Data.IColumn)">
            <summary>
            Determines whether the manager contains column.
            </summary>
            <param name="column">The column.</param>
            <returns>
              <c>true</c> if the manager contains column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Lava.Data.Manager.AbstractColumnManager.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="P:Lava.Data.Manager.AbstractColumnManager.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
            <value>
            The column names.
            </value>
        </member>
        <member name="P:Lava.Data.Manager.AbstractColumnManager.Table">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="T:Lava.Data.Manager.IChildColumnManager">
            <summary>
            Manages the relations of columns between the child and parent table.
            
            This interface defines the addition features.
            
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.IncludeParentColumn(System.String)">
            <summary>
            Adds a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be added.</param>
            <returns>True if the column is included, false otherwise, such as it does not exist, or already added.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.ExcludeParentColumn(System.String)">
            <summary>
            Excludes a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be excluded.</param>
            <returns>True if the column is successfully excluded, false if anything else.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.GetParentColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the parent table when you know the column index in this child table.
            </summary>
            <param name="cidx">The column index in the child table.</param>
            <returns>The column index in the parent table. -1 if could not find it.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.GetChildColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the child table when you know the parent column index of the column.
            </summary>
            <param name="pcidx">The column index in the parent table.</param>
            <returns>The column index in the child table.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.IsParentColumn(System.Int32)">
            <summary>
            Checks if the column is a parent column.
            </summary>
            <param name="cidx">The column index in this child table.</param>
            <returns>True if the column is parent column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.IsChildColumn(System.Int32)">
            <summary>
            Checks if the column is a local column.
            </summary>
            <param name="cidx">The column name in this child table.</param>
            <returns>True if the column is local column, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.SetAlias(System.String,System.String)">
            <summary>
            Gives a alias name for a column in this table.
            </summary>
            <param name="pname">The column name.</param>
            <param name="alias">The alias.</param>
            <returns>True if the alias is set successfully, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.GetAlias(System.Int32)">
            <summary>
            Gets the alias of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>The column alias.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildColumnManager.GetAliasIndex(System.String)">
            <summary>
            Gets the column index given its alias.
            </summary>
            <param name="alias">The column name alias.</param>
            <returns>The column index.</returns>
        </member>
        <member name="P:Lava.Data.Manager.IChildColumnManager.ChildColumnCount">
            <summary>
            The number of child columns.
            </summary>
            <value>
            The child column count.
            </value>
        </member>
        <member name="T:Lava.Data.Manager.ChildColumnManager">
            <summary>
            Manage columns in child table.
            
            Implement the addition features in child column manager extends default column manager.
            
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.DefaultColumnManager">
            <summary>
            Default column manager implementation of IColumnManager.
            
            </summary>
        </member>
        <member name="F:Lava.Data.Manager.DefaultColumnManager._names">
            <summary>
            Column names, used with _columns, decide the order of the column names
            </summary>
        </member>
        <member name="F:Lava.Data.Manager.DefaultColumnManager._name2Index">
            <summary>
            Column information
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.#ctor(Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.DefaultColumnManager"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.Dispose">
            <summary>
            Disposes the manager. Removes all event handlers (if has any).
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.GetColumn``1(System.Int32)">
            <summary>
            Gets the column from a column index.
            </summary>
            <typeparam name="T">The type of values stored in the column.</typeparam>
            <param name="cidx">The cidx.</param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.GetColumn(System.Int32)">
            <summary>
            Gets the column from a column index.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column instance that is stored at the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.RemoveColumn(System.Int32)">
            <summary>
            Removes the column.
            </summary>
            <param name="cidx">The column index.</param>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.AddColumn(System.String,Lava.Data.IColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="name">The name.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.InsertColumn(System.String,System.Int32,Lava.Data.IColumn)">
            <summary>
            Inserts the column to a specific index.
            </summary>
            <param name="name">The name.</param>
            <param name="index">The index.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.GetColumnIndex(Lava.Data.IColumn)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="column">The column.</param>
            <returns>
            The column index. -1 if this instance does not contain it.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
            The column index. -1 if this instance does not contain it.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.GetColumnName(System.Int32)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column name, null if this instance does not have the column index.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultColumnManager.ContainsColumn(System.String)">
            <summary>
            Determines whether the manager contains column name.
            </summary>
            <param name="cname">The column name.</param>
            <returns>
              <c>True</c> if the manager contains column name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Lava.Data.Manager.DefaultColumnManager.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="P:Lava.Data.Manager.DefaultColumnManager.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
            <value>
            The column names.
            </value>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.#ctor(Lava.Data.ITable,Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.ChildColumnManager"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.GetParentColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the parent table when you know the column index in this child table.
            </summary>
            <param name="cidx">The column index in the child table.</param>
            <returns>
            The column index in the parent table. -1 if could not find it.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.GetChildColumnIndex(System.Int32)">
            <summary>
            Gets the column index in the child table when you know the parent column index of the column.
            </summary>
            <param name="pcidx">The column index in the parent table.</param>
            <returns>
            The column index in the child table.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.Dispose">
            <summary>
            Disposes the manager. Removes all event handlers (if has any).
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.RemoveColumn(System.Int32)">
            <summary>
            Removes the column.
            </summary>
            <param name="cidx">The column index.</param>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.AddColumn(System.String,Lava.Data.IColumn)">
            <summary>
            Adds the column as a local column to this child table. 
            </summary>
            <param name="name">The name.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.IncludeParentColumn(System.String)">
            <summary>
            Adds a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be added.</param>
            <returns>
            True if the column is included, false otherwise, such as it does not exist, or already added.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.ExcludeParentColumn(System.String)">
            <summary>
            Excludes a parent column by its name, no effect when it is already included.
            </summary>
            <param name="pname">The name of the column in the parent table to be excluded.</param>
            <returns>
            True if the column is successfully excluded, false if anything else.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.IsParentColumn(System.Int32)">
            <summary>
            Checks if the column is a parent column.
            </summary>
            <param name="cidx">The column index in this child table.</param>
            <returns>
            True if the column is parent column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.IsChildColumn(System.Int32)">
            <summary>
            Checks if the column is a local column.
            </summary>
            <param name="cidx">The column name in this child table.</param>
            <returns>
            True if the column is local column, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.SetAlias(System.String,System.String)">
            <summary>
            Sets the alias.
            </summary>
            <param name="cname">The cname.</param>
            <param name="alias">The alias.</param>
            <returns>.</returns>
            <exception cref="T:System.ArgumentException">Alias has already existed.</exception>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.GetAlias(System.Int32)">
            <summary>
            Gets the alias of the column.
            </summary>
            <param name="cidx">The column index.</param>
            <returns>
            The column alias.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildColumnManager.GetAliasIndex(System.String)">
            <summary>
            Gets the column index given its alias.
            </summary>
            <param name="alias">The column name alias.</param>
            <returns>
            The column index.
            </returns>
        </member>
        <member name="P:Lava.Data.Manager.ChildColumnManager.ChildColumnCount">
            <summary>
            The number of child columns. In this implementation, the Column Index that &gt;=0 and &lt;ChildColumnCount
            is child column.
            </summary>
            <value>
            The child column count.
            </value>
        </member>
        <member name="T:Lava.Data.Manager.ChildRowManager">
            <summary>
            Implement how to manage rows in child table extends from DefaultRowManager
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.DefaultRowManager">
            <summary>
            Default row manager features to manage rows in normal tables. In this manager, 
            the table row and column are the same.
            
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.IRowManager">
            <summary>
            The manager to manage the mapping between the column rows and table rows. For the same row in the table,
            different columns may store the data in different column rows.
            
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.GetColumnRow(System.Int32,System.Int32)">
            <summary>
            Gets the column row in the column that holds the value in the table row.
            </summary>
            <param name="trow">The table row.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>The column row. -1 if the table row is invalided.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.GetTableRow(System.Int32,System.Int32)">
            <summary>
            Gets the table row from known column row in a specific column.
            </summary>
            <param name="crow">The column row.</param>
            <param name="cidx">The column index in this table.</param>
            <returns>The table row, -1 if the column row is not included in this table.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.IsValidRow(System.Int32)">
            <summary>
            Tests if the table row is valid in the table. Two kinds of rows are invalid: the ones 
            are bigger than MaxRow, and the ones are removed from the table already.
            </summary>
            <param name="trow">The table row for testing.</param>
            <returns>True if it is valid, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.AddRow">
            <summary>
            Adds a new row to the table. If there are removed rows, the one with smallest row # will
            be reused, Otherwise, MaxRow will be increased and used.
            </summary>
            <returns>The table row of the newly added row.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.RemoveRow(System.Int32)">
            <summary>
            Removes a row, we marked it as invalid, so that you can not access it any more.
            If the row is already invalid when calling this function, do nothing, return false.
            </summary>
            <param name="trow">The table row to remove.</param>
            <returns>True if this operation is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.RestoreRow(System.Int32)">
            <summary>
            Restores a previously removed table row.
            </summary>
            <param name="trow">The table row to restore.</param>
            <returns>True if the restore is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.RestoreAllRows">
            <summary>
            Restores all previously removed table rows.
            </summary>
            <returns>True if some rows are restored, false if nothing is restored.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.Clear">
            <summary>
            Clears all rows in this table.
            </summary>
            <returns>True if something really happens, false if it is already empty.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IRowManager.Dispose">
            <summary>
            Disposes the row manager. Remove all event handlers (if has any)
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.IRowManager.Table">
            <summary>
            The back-end table.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.IRowManager.MaxRow">
            <summary>
            Indicates the biggest table row that holds valid data.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.IRowManager.MinRow">
            <summary>
            Indicates the smallest table row that holds valid data.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.IRowManager.RowCount">
            <summary>
            Gets the total # of all the valid table rows. It is not necessarily equal to
            MaxRow - MinRow, because some rows in middle may be invalid.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.IRowManager.Rows">
            <summary>
            Enumerates all table rows in the table.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.Dispose">
            <summary>
            Disposes the row manager. Remove all event handlers (if has any)
            </summary>
        </member>
        <member name="F:Lava.Data.Manager.DefaultRowManager._freeRows">
            <summary>
            Keeps a sorted list of the empty table rows that can be used when
            wanting to insert a new table row (from small to big)
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.#ctor(Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.DefaultRowManager"/> class.
            </summary>
            <param name="table">The table to manage.</param>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.IsValidRow(System.Int32)">
            <summary>
            Tests if the table row is valid in the table. Two kinds of rows are invalid: the ones
            are bigger than MaxRow, and the ones are removed from the table already.
            </summary>
            <param name="trow">The table row for testing.</param>
            <returns>
            True if it is valid, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.GetColumnRow(System.Int32,System.Int32)">
            <summary>
            Gets the column row in the column that holds the value in the table row.
            </summary>
            <param name="trow">The table row.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The column row. -1 if the table row is invalided.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.PeekTheNewRow">
            <summary>
            Peeks the new row number if you want to add a row.
            </summary>
            <returns>The new row number (you will get if you want to call AddRow function).</returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.RestoreRow(System.Int32)">
            <summary>
            Restores a previously removed table row.
            </summary>
            <param name="trow">The table row to restore.</param>
            <returns>
            True if the restore is successful, false otherwise
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.RestoreAllRows">
            <summary>
            Restores all previously removed table rows.
            </summary>
            <returns>True if some rows are restored, false if nothing is restored.</returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.AddRow">
            <summary>
            Adds a new row to the table. If there are removed rows, the one with smallest row # will
            be reused, Otherwise, MaxRow will be increased and used.
            </summary>
            <returns>
            The table row of the newly added row.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.PrepareRow(System.Int32)">
            <summary>
            When adding a new table row, it needs to be inited.
            </summary>
            <param name="trow">The table row that needs to be cleared</param>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.RemoveRow(System.Int32)">
            <summary>
            Removes a row, flag it invalid, so that you can not access it any more.
            The row index will be reused next time add a row.
            
            If the row is already invalid when call remove, do nothing, return false.
            </summary>
            <param name="trow">The row to remove.</param>
            <returns>True if the row is successfully removed, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.Clear">
            <summary>
            Clears all rows in this table.
            </summary>
            <returns>
            True if something really happens, false if it is already empty.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.DefaultRowManager.GetTableRow(System.Int32,System.Int32)">
            <summary>
            Gets the table row from known column row in a specific column.
            </summary>
            <param name="crow">The column row.</param>
            <param name="cidx">The column index in this table.</param>
            <returns>
            The table row, -1 if the column row is not included in this table.
            </returns>
        </member>
        <member name="E:Lava.Data.Manager.DefaultRowManager.RowRestored">
            <summary>
            Occurs after a row or multiple rows are restored.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.DefaultRowManager.Table">
            <summary>
            The back-end table.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.DefaultRowManager.MaxRow">
            <summary>
            Indicates the biggest table row that holds valid data.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.DefaultRowManager.MinRow">
            <summary>
            Indicates the smallest table row that holds valid data.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.DefaultRowManager.PeakRow">
            <summary>
            Keeps the max row index, no matter valid or invalid
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.DefaultRowManager.RowCount">
            <summary>
            Gets the total # of all the valid table rows. It is not necessarily equal to
            MaxRow - MinRow, because some rows in middle may be invalid.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.DefaultRowManager.Rows">
            <summary>
            Enumerates all table rows in the table.
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.IChildRowManager">
            <summary>
            Manager handling the relations between a child table and its parent table.
            
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.IChildRowManager.GetParentRow(System.Int32)">
            <summary>
            Given a row in this table, finds the back end row in the parent table.
            </summary>
            <param name="trow">The row in this table.</param>
            <returns>The mapped row in its parent table, -1 if there is no mapped row.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildRowManager.GetChildRow(System.Int32)">
            <summary>
            Given a row in its parent table, finds the first mapping row in this table.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>The first mapped row in this table, -1 if there is no mapped row.</returns>
        </member>
        <member name="M:Lava.Data.Manager.IChildRowManager.GetChildRows(System.Int32)">
            <summary>
            Given a row in its parent table, finds all the mapping rows in this table. Since one
            parent row can be used in multiple rows in the child table, you may get multiple child rows.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>All the mapping rows in this table, empty if there is no mapping rows.</returns>
        </member>
        <member name="P:Lava.Data.Manager.IChildRowManager.Parent">
            <summary>
            The parent table.
            </summary>
        </member>
        <member name="F:Lava.Data.Manager.ChildRowManager._child2Parent">
            <summary>
            Child to parent row mapping.
            </summary>
        </member>
        <member name="F:Lava.Data.Manager.ChildRowManager._parent2Child">
            <summary>
            Parent to child rows mapping. Possible one->multiple.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.#ctor(Lava.Data.ITable,Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.ChildRowManager"/> class.
            </summary>
            <param name="table">The child table.</param>
            <param name="parent">The parent table.</param>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.RestoreRow(System.Int32)">
            <summary>
            Restores a previously removed table row. This function is disabled for this class.
            </summary>
            <param name="trow">The table row to restore.</param>
            <returns>
            True if the restore is successful, false otherwise
            </returns>
            <exception cref="T:Lava.Exceptions.UnsupportedException">Restore rows is forbidden for ChildRowManager</exception>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.RestoreAllRows">
            <summary>
            Restores all previously removed table rows.
            </summary>
            <returns>
            True if some rows are restored, false if nothing is restored.
            </returns>
            <exception cref="T:Lava.Exceptions.UnsupportedException">Restore rows is forbidden for ChildRowManager</exception>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.Dispose">
            <summary>
            Disposes the row manager. Remove all event handlers (if has any)
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.GetTableRow(System.Int32,System.Int32)">
            <summary>
            Gets the table row from known column row in a specific column. If the column is in the parent table,
            it is possible that that column row has multiple appearances in the child table, in which case only
            one of them is returned. If all of them are needed, please use <c>GetTableRows</c> function.
            </summary>
            <param name="crow">The column row.</param>
            <param name="cidx">The column index in this table.</param>
            <returns>
            The table row, -1 if the column row is not included in this table.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.GetTableRows(System.Int32,System.Int32)">
            <summary>
            Get table row (index) from known column row (physical column row index) 
            ATTENTION: column UN-checked
            </summary>
            <param name="crow">column row (physical column row index.</param>
            <param name="cidx">column index in this tabl.</param>
            <returns>Table row (index), -1 if the column row is not included in this table.</returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.GetColumnRow(System.Int32,System.Int32)">
            <summary>
            Gets the column row in the column that holds the value in the table row.
            </summary>
            <param name="trow">The table row.</param>
            <param name="cidx">The column index in the table.</param>
            <returns>
            The column row. -1 if the table row is invalided.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.GetParentRow(System.Int32)">
            <summary>
            Given a row in this table, finds the back end row in the parent table.
            </summary>
            <param name="trow">The row in this table.</param>
            <returns>
            The mapped row in its parent table, -1 if there is no mapped row.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.GetChildRow(System.Int32)">
            <summary>
            Given a row in its parent table, finds the first mapping row in this table.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>
            The first mapped row in this table, -1 if there is no mapped row.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.RemoveParentRow(System.Int32)">
            <summary>
            If the parent row is linked in this child table, removes all related child rows.
            </summary>
            <param name="prow">The parent row.</param>
            <returns>if one or more child rows are removed.</returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.AddParentRow(System.Int32)">
            <summary>
            Given a parent row, creates a new row in this table and maps them.
            </summary>
            <param name="prow">The parent row.</param>
            <returns>The child row.</returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.ClearParentRow(System.Int32)">
            <summary>
            If the parent row is linked in this child table, clears all the links, and
            makes all the linked child rows link to nothing.
            </summary>
            <param name="prow">The parent row.</param>
            <returns>True if one or more child child rows are reset.</returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.ResetParentRow(System.Int32,System.Int32)">
            <summary>
            Re-links the row in the table to another row in the parent table.
            No events are triggered.
            </summary>
            <param name="trow">The row in the table.</param>
            <param name="prow">The row in the parent table.</param>
            <returns>The parent row this table row used to link.</returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.PrepareRow(System.Int32)">
            <summary>
            When adding a new table row, it needs to be inited.
            </summary>
            <param name="trow">The table row that needs to be cleare.</param>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.RemoveRow(System.Int32)">
            <summary>
            Removes a row, flag it invalid, so that you can not access it any more.
            The row index will be reused next time add a row.
            If the row is already invalid when call remove, do nothing, return false.
            </summary>
            <param name="trow">The row to remove.</param>
            <returns>
            True if the row is successfully removed, false otherwise.
            </returns>        
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.GetChildRows(System.Int32)">
            <summary>
            Given a row in its parent table, finds all the mapping rows in this table. Since one
            parent row can be used in multiple rows in the child table, you may get multiple child rows.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>
            All the mapping rows in this table, empty if there is no mapping rows.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.AddParent2ChildMap(System.Int32,System.Int32)">
            <summary>
            Adds the parent -> child row map.
            </summary>
            <param name="prow">The parent row.</param>
            <param name="trow">The child row.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.RemoveParent2ChildMap(System.Int32,System.Int32)">
            <summary>
            Removes the parent -> child map.
            </summary>
            <param name="prow">The prow.</param>
            <param name="trow">The trow.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.ContainsParentRow(System.Int32)">
            <summary>
            Determines whether the parent is used in this child table.
            </summary>
            <param name="prow">The parent row prow.</param>
            <returns>
              <c>True</c> if the parent row is mapped to at least one child row; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.ChildRowManager.Clear">
            <summary>
            Clears all rows in this table.
            </summary>
            <returns>
            True if something really happens, false if it is already empty.
            </returns>
        </member>
        <member name="P:Lava.Data.Manager.ChildRowManager.Table">
            <summary>
            The back-end table.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.ChildRowManager.Parent">
            <summary>
            The parent table.
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.RowRestoredHandler">
            <summary>
            Handler for the events of row restore.
            </summary>
            <param name="sender">The sender.</param>
            <param name="row">The row. -1 means all rows.</param>
        </member>
        <member name="T:Lava.Data.Manager.GhostChildRowManager">
            <summary>
            Internal class, only used in GhostChildTable.
            It manages rows in a ghost child table.
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.GhostChildRowManager.#ctor(Lava.Data.ITable,Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.GhostChildRowManager"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Lava.Data.Manager.GhostChildRowManager.PrepareRow(System.Int32)">
            <summary>
            When adding a new table row, it needs to be inited.
            </summary>
            <param name="trow">The table row that needs to be cleare.</param>
        </member>
        <member name="M:Lava.Data.Manager.GhostChildRowManager.GetParentRow(System.Int32)">
            <summary>
            Given a row in this table, finds the back end row in the parent table.
            </summary>
            <param name="trow">The row in this table.</param>
            <returns>
            The mapped row in its parent table, -1 if there is no mapped row.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.GhostChildRowManager.GetChildRow(System.Int32)">
            <summary>
            Given a row in its parent table, finds the first mapping row in this table.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>
            The first mapped row in this table, -1 if there is no mapped row.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.GhostChildRowManager.GetChildRows(System.Int32)">
            <summary>
            Given a row in its parent table, finds all the mapping rows in this table. Since one
            parent row can be used in multiple rows in the child table, you may get multiple child rows.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>
            All the mapping rows in this table, empty if there is no mapping rows.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.GhostChildRowManager.Dispose">
            <summary>
            Disposes the row manager. Remove all event handlers (if has any)
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.GhostChildRowManager.Table">
            <summary>
            The back-end table.
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.GhostChildRowManager.Parent">
            <summary>
            The parent table.
            </summary>
        </member>
        <member name="T:Lava.Data.Manager.PredicateRowManager">
            <summary>
            The row manager for predicate table. This is a special child -- parent mapping schema.
            A parent row *at most* will be mapped to a child row. Basically you can think it as
            a row filter. The resulting child table is the result of filtering the parent table.
            
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.PredicateRowManager.#ctor(Lava.Data.ITable,Lava.Data.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Data.Manager.PredicateRowManager"/> class.
            </summary>
            <param name="table">The child table.</param>
            <param name="parent">The parent table.</param>
        </member>
        <member name="M:Lava.Data.Manager.PredicateRowManager.Clear">
            <summary>
            Clears all rows in this table.
            </summary>
            <returns>
            True if something really happens, false if it is already empty.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.PredicateRowManager.ContainsParentRow(System.Int32)">
            <summary>
            Determines whether the parent is used in this child table.
            </summary>
            <param name="prow">The parent row prow.</param>
            <returns>
              <c>True</c> if the parent row is mapped to at least one child row; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.PredicateRowManager.RemoveParent2ChildMap(System.Int32,System.Int32)">
            <summary>
            Removes the parent -&gt; child map.
            </summary>
            <param name="prow">The prow.</param>
            <param name="trow">The trow.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.PredicateRowManager.AddParent2ChildMap(System.Int32,System.Int32)">
            <summary>
            Adds the parent -&gt; child row map.
            </summary>
            <param name="prow">The parent row.</param>
            <param name="trow">The child row.</param>
            <returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.PredicateRowManager.GetChildRows(System.Int32)">
            <summary>
            Given a row in its parent table, finds all the mapping rows in this table. Since one
            parent row can be used in multiple rows in the child table, you may get multiple child rows.
            </summary>
            <param name="prow">The row in its parent table.</param>
            <returns>
            All the mapping rows in this table, empty if there is no mapping rows.
            </returns>
        </member>
        <member name="M:Lava.Data.Manager.PredicateRowManager.Dispose">
            <summary>
            Disposes the row manager. Remove all event handlers (if has any)
            </summary>
        </member>
        <member name="P:Lava.Data.Manager.PredicateRowManager.RowFilter">
            <summary>
            Row filter, setting it will cause to totally re-filter the parent table again, and
            keep every parent row that passes the RowFilter.
            </summary>
        </member>
        <member name="M:Lava.Data.Util.EnumerableUtil.GetItems``1(Lava.Data.IItemSet,Hallucination.Expressions.IPredicate,Lava.Data.Util.Sorter)">
            <summary>
            not implement good. ignore sorter recently.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemSet"></param>
            <param name="filter"></param>
            <param name="sorter"></param>
            <returns>.</returns>
        </member>
        <member name="T:Lava.Data.Util.Sorter">
            <summary>
            Un-implement and un-used now.
            </summary>
        </member>
        <member name="T:Lava.Exceptions.LavaException">
            <summary>
            Lava Exception base class
            </summary>
        </member>
        <member name="M:Lava.Exceptions.LavaException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.LavaException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.LavaException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Lava.Exceptions.MistakeException.#ctor">
            <summary> Create a new DataIOException.</summary>
        </member>
        <member name="M:Lava.Exceptions.MistakeException.#ctor(System.String)">
             <summary> Create a new DataIOException.</summary>
             <param name="message">a descriptive error message
            .</param>
        </member>
        <member name="M:Lava.Exceptions.MistakeException.#ctor(System.String,System.Exception)">
             <summary> Create a new DataIOException.</summary>
             <param name="message">a descriptive error message
            .</param>
             <param name="cause">a Throwable (e.g., error or exception) that was the cause
             for this exception being thrown
            .</param>
        </member>
        <member name="M:Lava.Exceptions.MistakeException.#ctor(System.Exception)">
             <summary> Create a new DataIOException.</summary>
             <param name="cause">a Throwable (e.g., error or exception) that was the cause
             for this exception being thrown
            .</param>
        </member>
        <member name="T:Lava.Exceptions.DataIOException">
            <summary>
            Throw it when data io meet some exceptions
            </summary>
        </member>
        <member name="M:Lava.Exceptions.DataIOException.#ctor">
            <summary> Create a new DataIOException.</summary>
        </member>
        <member name="M:Lava.Exceptions.DataIOException.#ctor(System.String)">
             <summary> Create a new DataIOException.</summary>
             <param name="message">a descriptive error message
            .</param>
        </member>
        <member name="M:Lava.Exceptions.DataIOException.#ctor(System.String,System.Exception)">
             <summary> Create a new DataIOException.</summary>
             <param name="message">a descriptive error message
            .</param>
             <param name="cause">a Throwable (e.g., error or exception) that was the cause
             for this exception being thrown
            .</param>
        </member>
        <member name="M:Lava.Exceptions.DataIOException.#ctor(System.Exception)">
             <summary> Create a new DataIOException.</summary>
             <param name="cause">a Throwable (e.g., error or exception) that was the cause
             for this exception being thrown
            .</param>
        </member>
        <member name="T:Lava.Exceptions.DataParseException">
            <summary>
            Throw it when meet exception when parse data.
            </summary>
        </member>
        <member name="M:Lava.Exceptions.DataParseException.#ctor">
            <summary>
            Create a DataParseException
            </summary>
        </member>
        <member name="M:Lava.Exceptions.DataParseException.#ctor(System.String)">
            <summary>
            Create a DataParseException
            </summary>
            <param name="message">message strin.</param>
        </member>
        <member name="M:Lava.Exceptions.DataParseException.#ctor(System.String,System.Exception)">
            <summary>
            Create a DataParseException
            </summary>
            <param name="message">message strin.</param>
            <param name="cause">caused exceptio.</param>
        </member>
        <member name="M:Lava.Exceptions.DataParseException.#ctor(System.Exception)">
            <summary>
            Create a DataParseException
            </summary>
            <param name="cause">caused exceptio.</param>
        </member>
        <member name="T:Lava.Exceptions.DuplicateKeyException">
            <summary>
            throw this exception when meet duplicate name/id/key
            </summary>
        </member>
        <member name="M:Lava.Exceptions.DuplicateKeyException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.DuplicateKeyException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.DuplicateKeyException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="T:Lava.Exceptions.DuplicateNameException">
            <summary>
            throw this exception when meet duplicate name
            </summary>
        </member>
        <member name="M:Lava.Exceptions.DuplicateNameException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.DuplicateNameException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.DuplicateNameException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="T:Lava.Exceptions.ForbiddenException">
            <summary>
            throw this exception when trying to call a forbidden function
            or try to access forbidden data
            </summary>
        </member>
        <member name="M:Lava.Exceptions.ForbiddenException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.ForbiddenException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.ForbiddenException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="T:Lava.Exceptions.IllegalStateException">
            <summary>
            throw this exception when a component is not in right state
            </summary>
        </member>
        <member name="M:Lava.Exceptions.IllegalStateException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.IllegalStateException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.IllegalStateException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="T:Lava.Exceptions.InvalidDataException">
            <summary>
            throw this exception when trying read/write invalid data.
            </summary>
        </member>
        <member name="M:Lava.Exceptions.InvalidDataException.#ctor">
            <summary>
            Create a DataParseException
            </summary>
        </member>
        <member name="M:Lava.Exceptions.InvalidDataException.#ctor(System.String)">
            <summary>
            Create a DataParseException
            </summary>
            <param name="message">message strin.</param>
        </member>
        <member name="M:Lava.Exceptions.InvalidDataException.#ctor(System.String,System.Exception)">
            <summary>
            Create a DataParseException
            </summary>
            <param name="message">message strin.</param>
            <param name="cause">caused exceptio.</param>
        </member>
        <member name="M:Lava.Exceptions.InvalidDataException.#ctor(System.Exception)">
            <summary>
            Create a DataParseException
            </summary>
            <param name="cause">caused exceptio.</param>
        </member>
        <member name="T:Lava.Exceptions.MismatchException">
            <summary>
            throw this exception when a component does not match (configure, key or something else)
            </summary>
        </member>
        <member name="M:Lava.Exceptions.MismatchException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.MismatchException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.MismatchException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="T:Lava.Exceptions.NotExistException">
            <summary>
            throw this exception when trying to read/write a data not exist
            </summary>
        </member>
        <member name="M:Lava.Exceptions.NotExistException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.NotExistException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.NotExistException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="T:Lava.Exceptions.UnsupportedException">
            <summary>
            throw this exception when trying to call a Unsupported operation
            </summary>
        </member>
        <member name="M:Lava.Exceptions.UnsupportedException.#ctor">
            <summary>
            construct with base
            </summary>
        </member>
        <member name="M:Lava.Exceptions.UnsupportedException.#ctor(System.String)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lava.Exceptions.UnsupportedException.#ctor(System.String,System.Exception)">
            <summary>
            construct with base
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
        </member>
        <member name="T:Lava.Data.ExprParser">
            <summary>
            <strong><remarks>Lava Related Functions</remarks></strong>
            These functions can only be used when the objects are considered as <c>IItem</c>s or <c>IVisualItem</c>s:
            (More general function could be found in <c>Hallucination.Expressions.ExprParser</c>)
            <list type="bullet">
            <item><strong><c>ROW()</c></strong></item><br/>
            <description>Returns the table row number (or -1 if none) of the current IItem.</description>
            <item><strong><c>ISNODE()</c></strong></item><br/>
            <description>Returns true if the current iitem is a graph Node.</description>
            <item><strong><c>ISEDGE()</c></strong></item><br/>
            <description>Returns true if the current iitem is a graph Edge.</description>
            <item><strong><c>DEGREE(), INDEGREE(), OUTDEGREE()</c></strong></item><br/>
            <description>
               If the current iitem is graph Node, returns the Node degree/indegree/outdegree,
               Otherwise returns 0.
            </description>
            <item><strong><c>CHILDCOUNT()</c></strong></item><br/>
            <description>
               If the current IItem is tree Node, returns the number of tree
               children nodes. If the IItem is not a tree Node, this method returns 0.
            </description>
            <item><strong><c>TREEDEPTH()</c></strong></item><br/>
            <description>
               If the current iitem is tree Node, returns the depth of this Node
               in its Tree or SpanningTree. If the iitem is not a tree Node, this method
               returns 0. 
            </description>
            <item><strong><c>GROUPSIZE(group)</c></strong></item><br/>
            <description><strong>NOT supported now.</strong>Returns the number of members in the data group <c>group</c></description>
            <item><strong><c>INGROUP(group)</c></strong></item><br/>
            <description><strong>NOT supported now.</strong>Returns true if the current VisualItem is a member of data group <c>group</c></description>
            <item><strong><c>MATCH(group, includeAll)</c></strong></item><br/>
            <description>
               <strong>NOT supported now.</strong>
               Returns true if the current VisualItem is currently a search match. This is similar
               to <c>INGROUP(group)</c>, but also includes a possible special case when no
               query has been issued and all items should be counted as "matches" (indicated
               by <c>includeAll</c> being true).
            </description>
            <item><strong><c>QUERY(group)</c></strong></item><br/>
            <description><strong>NOT supported now.</strong>Returns the current search query string in a search group of name <c>group</c></description>
            <item><strong><c>VISIBLE()</c></strong></item><br/>
            <description>Returns true if the current VisualItem is visible, equivalent to <c>_visible</c></description>
            <item><strong><c>VALIDATED()</c></strong></item><br/>
            <description><strong>NOT supported now.</strong>Returns true if the current VisualItem's bounds have been validated, equivalent to <c>_validated</c></description>
            </list>
            </summary>
        </member>
        <member name="M:Lava.Data.ExprParser.Parse(System.String,System.Boolean)">
            <summary>
            Parse a expression string to IExpression object instance.
            </summary>
            <param name="expr">The expression strin.</param>
            <param name="throwException">Throw an Exception when the expression string is illegal.</param>
            <returns>The expression object instance.</returns>
        </member>
        <member name="M:Lava.Data.ExprParser.Predicate(System.String,System.Boolean)">
            <summary>
            Parse a expression string to IPredicate object instance.
            In function view, IPredicate is the same thing as IExpression
            </summary>
            <param name="expr">The expression strin.</param>
            <param name="throwException">Throw an Exception when the expression string is illegal.</param>
            <returns>The IPredicate object instance.</returns>
        </member>
        <member name="P:Lava.Data.ExprParser.Factory">
            <summary>
            Expression function factory.
            You can add your own expression function here
            </summary>
        </member>
        <member name="P:Lava.Data.ExprParser.Interpreter">
            <summary>
            Value readers
            </summary>
        </member>
        <member name="T:Lava.Util.Properties">
            <summary>
            A simple implement for Properties file and configure items.
            It can read a properties file and build it as configure items.
            So that you can request the configure value with the configure item name string.
            
            </summary>
        </member>
        <member name="F:Lava.Util.Properties._list">
            <summary>
            Store properties
            </summary>
        </member>
        <member name="F:Lava.Util.Properties._filename">
            <summary>
            back-end file path
            </summary>
        </member>
        <member name="M:Lava.Util.Properties.#ctor">
            <summary>
            Create an empty configure Properties 
            </summary>
        </member>
        <member name="M:Lava.Util.Properties.#ctor(System.String)">
            <summary>
            Create a configure Properties from a properties file.
            
            If the file does not exist, it will create a empty file.
            </summary>
            <param name="file">The file pat.</param>
        </member>
        <member name="M:Lava.Util.Properties.Get(System.String,System.String)">
            <summary>
            Get the configure value with the field name.
            
            If the field does not exist, it will return the default value $defValue
            </summary>
            <param name="field">The field nam.</param>
            <param name="defValue">The default valu.</param>
            <returns>The field value. return defValue if the field does not exist.</returns>
        </member>
        <member name="M:Lava.Util.Properties.Get(System.String)">
            <summary>
            Get the configure value with the field name.
            
            If the field does not exist, it will return null
            </summary>
            <param name="field">The field nam.</param>
            <returns>The field value. return null if the field does not exist.</returns>
        </member>
        <member name="M:Lava.Util.Properties.Set(System.String,System.Object)">
            <summary>
            set a field value.
            the value will be convert to string by call <c>Object.ToString</c>
            
            If the value is null, it throws exception
            </summary>
            <param name="field">The field nam.</param>
            <param name="value">The field valu.</param>
        </member>
        <member name="M:Lava.Util.Properties.Save">
            <summary>
            save the properties back to its back-end file.
            
            If you did not set the back-end file,
            please use Save(String filename)
            </summary>
        </member>
        <member name="M:Lava.Util.Properties.Save(System.String)">
            <summary>
            Set or change the back-end file.
            And save the properties to it.
            
            If the file does not exist, it will create one.
            </summary>
            <param name="filename">The file pat.</param>
        </member>
        <member name="M:Lava.Util.Properties.Reload">
            <summary>
            Reload properties from the back-end file
            </summary>
        </member>
        <member name="M:Lava.Util.Properties.Reload(System.String)">
            <summary>
            Set or change the back-end file.
            And reload the properties from it.
            
            If the file does not exist, it will create one.
            </summary>
            <param name="filename">The file pat.</param>
        </member>
        <member name="M:Lava.Util.Properties.LoadFromFile(System.String)">
            <summary>
            Read the properties file line by line to load all configures
            </summary>
            <param name="file">The file pat.</param>
        </member>
        <member name="M:Lava.Util.Properties.Merge(Lava.Util.Properties)">
            <summary>
            Merge another Properties configures.
            The old items will be override.
            </summary>
            <param name="p">another Properties configure.</param>
        </member>
        <member name="P:Lava.Util.Properties.Names">
            <summary>
            Enumerate all configure names
            </summary>
        </member>
        <member name="T:Lava.Util.TypeLib">
            <summary>
            Some help functions for Type check
            </summary>
        </member>
        <member name="M:Lava.Util.TypeLib.IsComparable(System.Type)">
            <summary>
            Check does the type implement IComparable and IComparable T
            </summary>
            <param name="type">The type to be teste.</param>
            <returns>is it a comparable type.</returns>
        </member>
        <member name="M:Lava.Util.TypeLib.IsNumber(System.Type)">
            <summary>
            Checks if the type is a number type, such as int and double.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if it is a number type, false otherwise.</returns>
        </member>
        <member name="M:Lava.Util.TypeLib.IsInt(System.Type)">
            <summary>
            Checks if the type is an int-like type, such as int and long.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if it is an int-like type, false otherwise.</returns>
        </member>
        <member name="M:Lava.Util.TypeLib.IsFloat(System.Type)">
            <summary>
            Checks if the type is a float-like type, such as float and double.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if it is an float-like type, false otherwise.</returns>
        </member>
        <member name="T:Lava.Util.InterpolatorLib">
            <summary>
            Interpolator is a type of function, return a value between two given values according pace rule.
            
            This class defined some Interpolators for common value types.
            Include:int 	byte 	long 	float 	double 	decimal 	Color 	Point
                    int? 	byte? 	long? 	float? 	double? 	decimal? 	Color? 	Point?
                    
            </summary>
        </member>
        <member name="F:Lava.Util.InterpolatorLib._interpolatorCache">
            <summary>
            Cache the requested Interpolator delegate instance for improve performance
            </summary>
        </member>
        <member name="F:Lava.Util.InterpolatorLib._supportedTypes">
            <summary>
            Hash stored supported types for quick search.
            </summary>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Instance``1">
            <summary>
            Use this to get a predefined Interpolator.
            
            If the type is not supported in the lib, you will get the null.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <returns>The Interpolator, null if the value type is not supported.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Int32,System.Int32,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for int
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for int?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Byte,System.Byte,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for byte
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for byte?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Int64,System.Int64,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for long
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for long?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Single,System.Single,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for float
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Single},System.Nullable{System.Single},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for float?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Double,System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for double
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Double},System.Nullable{System.Double},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for double?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Decimal,System.Decimal,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for decimal
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for decimal?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Windows.Point,System.Windows.Point,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for Point
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Windows.Point},System.Nullable{System.Windows.Point},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for Point?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Boolean,System.Boolean,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for bool
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for bool?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Windows.Media.Color,System.Windows.Media.Color,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for Color
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="M:Lava.Util.InterpolatorLib.Interp(System.Nullable{System.Windows.Media.Color},System.Nullable{System.Windows.Media.Color},System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Interpolator for Color?
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="progress">The progress between the start and end.</param>
            <param name="pace">The pace rule, null means linear.</param>
            <returns>The value at the progress.</returns>
        </member>
        <member name="T:Lava.Util.Interpolator`1">
            <summary>
            An Interpolator function. return the value at {pos}.
            pos: the normalized data position [0, 1]
            
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="from">The start valu.</param>
            <param name="to">The end valu.</param>
            <param name="progress">The progress [0, 1.</param>
            <param name="pace">The Pace rul.</param>
            <returns>The result value.</returns>
        </member>
        <member name="T:Lava.Util.Fraction`1">
            <summary>
            Invertor is the inverse function of Interpolator.
            When you know {from} value and {to} value,
            It returns {value}'s progress in double
            
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">The value to judg.</param>
            <returns>The progress of {value}'s position.</returns>
        </member>
        <member name="T:Lava.Util.FractionLib">
            <summary>
            Predefined some Fraction functions for common value types
            
            </summary>
        </member>
        <member name="M:Lava.Util.FractionLib.Instance``1">
            <summary>
            Uses this to get a predefined Fraction.
            
            If the type is not supported in the lib, you will get the null.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <returns>The Fraction, null if the value type is not supported.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fraction for int
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Fraction for int?
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Byte,System.Byte,System.Byte)">
            <summary>
            Fraction for byte
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Fraction for byte?
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Int64,System.Int64,System.Int64)">
            <summary>
            Fraction for long
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Fraction for long?
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Single,System.Single,System.Single)">
            <summary>
            Fraction for float
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Fraction for float?
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Fraction for double?
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Double,System.Double,System.Double)">
            <summary>
            Fraction for double
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Fraction for decimal?
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="M:Lava.Util.FractionLib.Frac(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Fraction for decimal
            </summary>
            <param name="from">from valu.</param>
            <param name="to">To valu.</param>
            <param name="value">current valu.</param>
            <returns>current progress.</returns>
        </member>
        <member name="T:Lava.Util.Scales.IScale`2">
            <summary>
            "Scales" are functions that map from an "input domain" to an "output range".
            
            </summary>
            <typeparam name="TInput">domain value type</typeparam>
            <typeparam name="TOutput">range value type</typeparam>
        </member>
        <member name="M:Lava.Util.Scales.IScale`2.Map(`0)">
            <summary>
            get the value in the range which is mapped from the domain value
            
            Use <c>ScaleFunc</c> for more quickly usage.
            </summary>
            <param name="val">The domain valu.</param>
            <returns>The range value.</returns>
        </member>
        <member name="M:Lava.Util.Scales.IScale`2.Set(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1})">
            <summary>
            Set domain and range at same time.
            
            Especially the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
            <param name="domain"></param>
            <param name="range"></param>
        </member>
        <member name="P:Lava.Util.Scales.IScale`2.InputStops">
            <summary>
            Value Domain of the scale.
            If the value number is not matched the value number of Range, It will throw an exception
            
            If the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.IScale`2.OutputStops">
            <summary>
            Mapped to value Range of the scale
            If the value number is not matched the value number of Domain, It will throw an exception
            
            If the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.IScale`2.InputFraction">
            <summary>
            Invertor for domain value.
            
            If your domain value type is not supported, you must set it before you use a scale.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.IScale`2.OutputInterpolator">
            <summary>
            Interpolator for Range value.
            
            If your Interpolator value type is not supported, you must set it before you use a scale.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.IScale`2.OutputPace">
            <summary>
            Pace rule.
            Default is Linear pace.
            </summary>
        </member>
        <member name="T:Lava.Util.Scales.ScaleFunc`2">
            <summary>
            Scale function definition.
            
            You can assign the "Map" function in scale instance to the delegate from much more quickly use.
            
            </summary>
            <typeparam name="TD">Domain Value Type</typeparam>
            <typeparam name="TR">Range Value Type</typeparam>
            <param name="val">value in Domain to transfor.</param>
            <returns>Transform result value in Range.</returns>
        </member>
        <member name="T:Lava.Util.Scales.SingleRangeScale`2">
            <summary>
            "Scales" are functions that map from an "input domain" to an "output range".
            BiValueScale accept two-value domain and range.
            
            </summary>
            <typeparam name="TInput">domain value type</typeparam>
            <typeparam name="TOutput">range value type</typeparam>
        </member>
        <member name="M:Lava.Util.Scales.SingleRangeScale`2.#ctor">
            <summary>
            Initialize value configures.
            protected constructor
            </summary>
        </member>
        <member name="M:Lava.Util.Scales.SingleRangeScale`2.#ctor(`0,`0,`1,`1)">
            <summary>
            Create a BiValueScale assign "from/to" values of domain and range
            </summary>
            <param name="df">"from" value of domai.</param>
            <param name="dt">"to" value of domai.</param>
            <param name="rf">"from" value of rang.</param>
            <param name="rt">"to" value of rang.</param>
        </member>
        <member name="M:Lava.Util.Scales.SingleRangeScale`2.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1})">
            <summary>
            Create a BiValueScale assign "from/to" values of domain and range.
            
            If the domain/range you assigned is invalid (null or count is not two),
            It will throw an Exception
            </summary>
            <param name="domain">"from/to" values of domai.</param>
            <param name="range">"from/to" values of rang.</param>
        </member>
        <member name="M:Lava.Util.Scales.SingleRangeScale`2.Set(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1})">
            <summary>
            Set domain and range at same time.
            
            Especially the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
            <param name="domain"></param>
            <param name="range"></param>
        </member>
        <member name="M:Lava.Util.Scales.SingleRangeScale`2.Set(`0,`0,`1,`1)">
            <summary>
            assign "from/to" values of domain and range
            </summary>
            <param name="df">"from" value of domai.</param>
            <param name="dt">"to" value of domai.</param>
            <param name="rf">"from" value of rang.</param>
            <param name="rt">"to" value of rang.</param>
        </member>
        <member name="M:Lava.Util.Scales.SingleRangeScale`2.Map(`0)">
            <summary>
            get the value in the range which is mapped from the domain value
            
            Use <c>ScaleFunc</c> for more quickly usage.
            </summary>
            <param name="val">The domain valu.</param>
            <returns>The range value.</returns>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.InputStart">
            <summary>
            "From" value of Domain
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.InputEnd">
            <summary>
            "To" value of Domain
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.OutputStart">
            <summary>
            "From" value of Range
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.OutputEnd">
            <summary>
            "To" value of Range
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.InputStops">
            <summary>
            Value Domain of the scale.
            If the value number is not matched the value number of Range, It will throw an exception
            
            If the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.OutputStops">
            <summary>
            Mapped to value Range of the scale
            If the value number is not matched the value number of Domain, It will throw an exception
            
            If the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.InputFraction">
            <summary>
            Invertor for domain value.
            
            If your domain value type is not supported, you must set it before you use a scale.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.OutputInterpolator">
            <summary>
            Interpolator for Range value.
            
            If your Interpolator value type is not supported, you must set it before you use a scale.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.SingleRangeScale`2.OutputPace">
            <summary>
            Pace rule.
            Default is Linear pace.
            </summary>
        </member>
        <member name="T:Lava.Util.Scales.MultiRangeScale`2">
            <summary>
            "Scales" are functions that map from an "input domain" to an "output range".
            PolyValueScale accept multi-value domain and range.
            (Two or more than two values)
            
            </summary>
            <typeparam name="TInput">domain value type</typeparam>
            <typeparam name="TOutput">range value type</typeparam>
        </member>
        <member name="M:Lava.Util.Scales.MultiRangeScale`2.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1})">
            <summary>
            Create a PolyValueScale by assign its domain and range.
            
            If the domain/range is not valid (null or count mismatch),
            it will throw an Exception
            </summary>
            <param name="domain">The domain value.</param>
            <param name="range">The range value.</param>
        </member>
        <member name="M:Lava.Util.Scales.MultiRangeScale`2.Set(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1})">
            <summary>
            Set domain and range at same time.
            
            Especially the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
            <param name="domain"></param>
            <param name="range"></param>
        </member>
        <member name="M:Lava.Util.Scales.MultiRangeScale`2.Map(`0)">
            <summary>
            get the value in the range which is mapped from the domain value
            
            Use <c>ScaleFunc</c> for more quickly usage.
            </summary>
            <param name="val">The domain valu.</param>
            <returns>The range value.</returns>
        </member>
        <member name="P:Lava.Util.Scales.MultiRangeScale`2.InputStops">
            <summary>
            Value Domain of the scale.
            If the value number is not matched the value number of Range, It will throw an exception
            
            If the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.MultiRangeScale`2.OutputStops">
            <summary>
            Mapped to value Range of the scale
            If the value number is not matched the value number of Domain, It will throw an exception
            
            If the value count is different from the previous domain/range,
            You had better use this to change it.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.MultiRangeScale`2.InputFraction">
            <summary>
            Invertor for domain value.
            
            If your domain value type is not supported, you must set it before you use a scale.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.MultiRangeScale`2.OutputInterpolator">
            <summary>
            Interpolator for Range value.
            
            If your Interpolator value type is not supported, you must set it before you use a scale.
            </summary>
        </member>
        <member name="P:Lava.Util.Scales.MultiRangeScale`2.OutputPace">
            <summary>
            Pace rule.
            Default is Linear pace.
            </summary>
        </member>
        <member name="T:Lava.Visual.Styles">
            <summary>
            Predefined Styles (name, column type, default value)<br/>
            
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Prefix">
            <summary>
            Style column name prefix string. Default is "_Visual_"
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Render">
            <summary>
            <strong>Render</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Layer">
            <summary>
            <strong>Layer</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Visible">
            <summary>
            <strong>Visible</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.ListenMouse">
            <summary>
            <strong>ListenMouse</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.X">
            <summary>
            <strong>X</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Y">
            <summary>
            <strong>Y</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Width">
            <summary>
            <strong>Width</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Height">
            <summary>
            <strong>Height</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Opacity">
            <summary>
            <strong>Opacity</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.FillBrush">
            <summary>
            <strong>FillBrush</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.StrokeBrush">
            <summary>
            <strong>StrokeBrush</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.StrokeWidth">
            <summary>
            <strong>StrokeWidth</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Hover">
            <summary>
            <strong>Hover</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Fixed">
            <summary>
            <strong>Fixed</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Text">
            <summary>
            <strong>Text</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.X1">
            <summary>
            <strong>X1</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Y1">
            <summary>
            <strong>Y1</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.X2">
            <summary>
            <strong>X2</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Y2">
            <summary>
            <strong>Y2</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.Path">
            <summary>
            <strong>Path</strong> Style name (Column name)
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultLayer">
            <summary>
            Default <c>Layer</c> value is <strong>0</strong>
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultVisible">
            <summary>
            default <c>Visible</c> value: true
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultListenMouse">
            <summary>
            default <c>ListenMouse</c> value: true
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultHover">
            <summary>
            default <c>Hover</c> value: false
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultFixed">
            <summary>
            default <c>Fixed</c> value: false
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultX">
            <summary>
            default <c>X</c> value: 0.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultY">
            <summary>
            default <c>Y</c> value: 0.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultWidth">
            <summary>
            default <c>Width</c> value: 10.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultHeight">
            <summary>
            default <c>Height</c> value: 10.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultOpacity">
            <summary>
            default <c>Opacity</c> value: 1.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultFillBrush">
            <summary>
            default <c>FillBrush</c> value: #FF4682B4
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultStrokeBrush">
            <summary>
            default <c>StrokeBrush</c> value: #FFFF6347
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultStrokeWidth">
            <summary>
            default <c>StrokeWidth</c> value: 1.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultX1">
            <summary>
            default <c>X1</c> value: 0.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultY1">
            <summary>
            default <c>Y1</c> value: 0.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultX2">
            <summary>
            default <c>X2</c> value: 0.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultY2">
            <summary>
            default <c>Y2</c> value: 0.0
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultText">
            <summary>
            default <c>Text</c> value: ""
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultPath">
            <summary>
            default <c>Path</c> value: ""
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.BasicStyles">
            <summary>
            Column Group Contains Basic Render Styles
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.AllStyles">
            <summary>
            All columns supported by the platform
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultVisualFields">
            <summary>
            Define Basic visual fields in VisualTable. include base fields and basic styles
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultEdgeVisualFields">
            <summary>
            Default styles of visual edge table
            </summary>
        </member>
        <member name="F:Lava.Visual.Styles.DefaultNodeVisualFields">
            <summary>
            Default styles of visual node table
            </summary>
        </member>
        <member name="M:Lava.Visual.Styles.#cctor">
            <summary>
            Initialize <c>BasicStyles</c>, <c>AllStyles</c>, <c>EssionalStyles</c>,
            <c>DefaultVisualFields</c>, <c>DefaultEdgeVisualFields</c>, <c>DefaultNodeVisualFields</c>,
            </summary>
        </member>
        <member name="T:Lava.Visual.Visualization">
            <summary>
            Central data structure representing an interactive Visualization. 
            This class is responsible for managing the mappings between source 
            data and on screen VisualItems, maintaining a list of Display instances 
            responsible for rendering of and interaction with the contents of 
            this visualization, and providing a collection of named Action 
            instances for performing data processing such as layout, animation.
            
            <list type="bullet">
            
            <item><strong>manage Tables/Graphs with a unique group name</strong></item>
            <description>
            First, It could manage Tables/Graphs with a unique group name of them. 
            When you need the data, you can get it from the Visualization with its 
            group name. So that if you hold a Visualizaion instance global, you can 
            get the data you need anywhere. That really makes the application clean.
            </description>
            
            <item><strong>manage the Displays with their unique group name</strong></item>
            <description>
            You may design multiple views in an application. Make a Display for every 
            view in the application. Visualizaion could help us to manage the Displays 
            with their unique group name. So that we can get the Display we need anywhere. 
            And assign a Display bind to a visual table.
            </description>
            
            <item><strong>manage the activities with their unique group names</strong></item>
            <description>
            Normally, we need a series of activities in an application. In Lava, 
            activities include Animation, Layout. We may want to run it in some 
            conditions instead call it as soon as construct. These situations are 
            very common. Visualization could also manage the activities with their 
            unique group names. So that we can get it out whenever we need it.
            </description>
            
            <item><strong>Build Visual Table/Graph in Lava</strong></item>
            <description>
            With the Displays, Visualizaion provides the only way to Build Visual 
            Table/Graph in Lava. It binds a Display to a specific visual table 
            when it is created. After build Visual Table/Graph. It stored them 
            with their group names.
            </description>
            
            <item><strong>Attach/Detach debugger</strong></item>
            <description>
            At last, Lava provides a very powerful debugger panel to observe 
            Tables/Graphs items. We can also select with expression or update 
            data with debugger. Visualization provides the interface to attach 
            debugger.
            </description>
            
            <item><strong>Select items from it by a Expression</strong></item>
            <description>
            In another hand, when the Lava data contained in the Visualization, 
            it becomes a big Item Set, contains all Items in it. So it provides 
            another powerful function: Select items from it by a Expression.
            </description>
            </list>
            </summary>
        </member>
        <member name="M:Lava.Visual.Visualization.#ctor(Lava.Visual.IDisplay)">
            <summary>
            Create a Visualizaion manager with the default display.
            </summary>
            <param name="display">The display, named as "DefaultDisplay", used for showing visual items unless you specify otherwise.</param>
        </member>
        <member name="M:Lava.Visual.Visualization.#ctor">
            <summary>
            Create a empty Visualizaion manager. This visualization has no display yet.
            So before you build any visual items, you should at least add one display.
            </summary>
        </member>
        <member name="M:Lava.Visual.Visualization.ContainsActivity(System.String)">
            <summary>
            Test is there an activity named $name
            </summary>
            <param name="name">The activity nam.</param>
            <returns>contains?.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.AddActivity(System.String,System.Action)">
            <summary>
            Add an activity with name
            </summary>
            <param name="name">The activity nam.</param>
            <param name="activity">The activit.</param>
        </member>
        <member name="M:Lava.Visual.Visualization.GetActivity(System.String)">
            <summary>
            Get an activity with name
            </summary>
            <param name="name">The activity nam.</param>
            <returns>The activity, null if un-exist.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.RemoveActivity(System.String)">
            <summary>
            Remove an activity with name
            </summary>
            <param name="name">The activity nam.</param>
            <returns>is success.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.AddDisplay(System.String,Lava.Visual.IDisplay)">
            <summary>
            Adds a <c>Display</c> to the Visualization to manage. The first display added will be used as
            the default display.
            </summary>
            <param name="name">The display name.</param>
            <param name="display">The display to be added.</param>
            <exception cref="T:Lava.Exceptions.DuplicateNameException"></exception>
            <exception cref="T:System.ArgumentException">Display is already assigned with a visualization.</exception>
        </member>
        <member name="M:Lava.Visual.Visualization.RemoveDisplay(System.String)">
            <summary>
            Removes the display of the given name. If the one is used as the default display, default display will
            be set to null as well.
            </summary>
            <param name="name">The name of the display to be removed.</param>
            <returns>True if successfully removed, false if the name does not exist.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.ContainsDisplay(System.String)">
            <summary>
            Determines whether the specified display is contained by this visualization.
            </summary>
            <param name="displayName">The display name.</param>
            <returns>
              <c>True</c> if the specified display is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.GetDisplay(System.String)">
            <summary>
            Gets the display for a given name.
            </summary>
            <param name="displayName">The display name.</param>
            <returns>
            The display instance.
            </returns>
            <exception cref="T:Lava.Exceptions.NotExistException"></exception>
        </member>
        <member name="M:Lava.Visual.Visualization.BuildVisualTable(System.String,System.String,System.Int32)">
            <summary>
            Builds an empty visual table. It is given the name of "group", shown in the given display, and drawn on the given layer.
            </summary>
            <param name="group">The group name of the visual table.</param>
            <param name="displayName">The display name to show every item in the visual table.</param>
            <param name="dftLayer">The default layer the items are drawn on, which can be changed for individual items.</param>
            <returns>
            The resulting visual table.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.BuildVisualTable(System.String,Lava.Visual.IDisplay,System.Int32)">
            <summary>
            Builds an empty visual table. It is given the name of "group", shown in the given display, and drawn on the given layer.
            </summary>
            <param name="group">The group name of the visual table.</param>
            <param name="display">The display to show every item in the visual table.</param>
            <param name="dftLayer">The default layer the items are drawn on, which can be changed for individual items.</param>
            <returns>
            The resulting visual table.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.BuildVisualTable(System.String,Lava.Data.ITable,System.String,System.Int32)">
            <summary>
            Builds an visual table based on a given table. It is given the name of "group", shown in the given display, and drawn on the given layer.
            </summary>
            <param name="group">The group name of the visual table.</param>
            <param name="table">The parent that the visual table is built on.</param>
            <param name="displayName">The display name to show every item in the visual table.</param>
            <param name="dftLayer">The default layer the items are drawn on, which can be changed for individual items.</param>
            <returns>
            The resulting visual table.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.BuildVisualTable(System.String,Lava.Data.ITable,Lava.Visual.IDisplay,System.Int32)">
            <summary>
            Builds an visual table based on a given table. It is given the name of "group", shown in the given display, and drawn on the given layer.
            </summary>
            <param name="group">The group name of the visual table.</param>
            <param name="table">The parent that the visual table is built on.</param>
            <param name="display">The display to show every item in the visual table.</param>
            <param name="dftLayer">The default layer the items are drawn on, which can be changed for individual items.</param>
            <returns>
            The resulting visual table.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.BuildVisualGraph(System.String,Lava.Data.Graph,System.String,System.Int32)">
            <summary>
            Adds a graph to the visualization. The node table and edge table in it will be converted to visual tables.
            A new visual graph will be generated.
            </summary>
            <param name="group">The group name of the graph.</param>
            <param name="graph">The graph to be built to visual.</param>
            <param name="displayName">The name of the display.</param>
            <param name="edgeLayer">The edge layer, where all the edges will be drawn. The node layer is one level above it.</param>
            <returns>
            The visual graph generated based on the graph.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.BuildVisualGraph(System.String,Lava.Data.Graph,Lava.Visual.IDisplay,System.Int32)">
            <summary>
            Adds a graph to the visualization. The node table and edge table in it will be converted to visual tables.
            A new visual graph will be generated.
            </summary>
            <param name="group">The group name of the graph.</param>
            <param name="graph">The graph to be built to visual.</param>
            <param name="display">The display instance.</param>
            <param name="edgeLayer">The edge layer, where all the edges will be drawn. The node layer is one level above it.</param>
            <returns>
            The visual graph generated based on the graph.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.RemoveGroup(System.String)">
            <summary>
            Removes the group of visual item set from this visualization. 
            You can only remove visual table and visual group for now.
            Removing a visual node/edge table inside a visual graph will result in throwing out an exception.
            </summary>
            <param name="group">The group.</param>
            <returns>The original data set used for building this visual item set.</returns>
            <exception cref="T:System.ArgumentException">
            NodeTable/EdgeTable cannot be removed, please remove graph group instead!
            or
            Unknown type of IVisualItemSet: +itemset.GetType()
            </exception>
        </member>
        <member name="M:Lava.Visual.Visualization.ContainsGroup(System.String)">
            <summary>
            Determines whether the given group name is already used in this visualization.
            </summary>
            <param name="group">The group name.</param>
            <returns>
              <c>True</c> if there is a visual item set behind it; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.GetVisualSet(System.String)">
            <summary>
            Gets the visual set, given the group name.
            </summary>
            <param name="group">The group name.</param>
            <returns>
            The visual set with the given name.
            </returns>
        </member>
        <member name="M:Lava.Visual.Visualization.GetVisualGraph(System.String)">
            <summary>
            Gets the visual graph, given the group name.
            </summary>
            <param name="group">The group name.</param>
            <returns>The visual graph with the given name.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.GetVisualTable(System.String)">
            <summary>
            Gets the visual table with group name.
            </summary>
            <param name="group">The group name.</param>
            <returns>The visual table.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.GetSourceSet(System.String)">
            <summary>
            Gets the source item set behind the visual item set of the given name.
            </summary>
            <param name="group">The group name.</param>
            <returns>The source item set, null if the visual item set has no such thing.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.SourceItems">
            <summary>
            Gets all the source items behind each visual table. Please notice that they are usually
            not visual items. Instead, they are items used to build visual items.
            </summary>
            <returns>All the source items.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.SourceItems(Hallucination.Expressions.IPredicate)">
            <summary>
            Gets all the source items that meet the given predicate behind each visual table. 
            Please notice that they are usually not visual items. 
            Instead, they are items used to build visual items.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>All the source items meeting the predicate.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.SourceItems(System.String)">
            <summary>
            Gets all the source items that are in the given group.
            </summary>
            <param name="group">The group name.</param>
            <returns>All the source items in the group.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.SourceItems(System.String,Hallucination.Expressions.IPredicate)">
            <summary>
            Gets all the source items that are in the given group and pass the predicate.
            </summary>
            <param name="group">The group name.</param>
            <param name="predicate">The predicate filter.</param>
            <returns>All the source items based on the condition.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.VisualItems">
            <summary>
            Gets all drawn items, including visual items, visual nodes, visual edges.
            </summary>
            <returns>All the visual items.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.VisualItems(Hallucination.Expressions.IPredicate)">
            <summary>
            Gets all the visual items (from all groups) passing through the given predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>All qualified visual items from all groups.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.VisualItems(System.String)">
            <summary>
            Gets all visual items in the group.
            </summary>
            <param name="group">The group name.</param>
            <returns>All visual items in the group.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.VisualItems(System.String,Hallucination.Expressions.IPredicate)">
            <summary>
            Gets all the visual items from the given group and pass through the given predicate.
            </summary>
            <param name="group">The group name.</param>
            <param name="predicate">The predicate.</param>
            <returns>All qualified visual items from the given group.</returns>
        </member>
        <member name="M:Lava.Visual.Visualization.IsInGroup(Lava.Data.IVisualItem,System.String)">
            <summary>
            Determines whether the visual item is in the given group.
            </summary>
            <param name="visualItem">The visual item.</param>
            <param name="group">The group.</param>
            <returns>
              <c>True</c> if is in the given group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Lava.Visual.Visualization.DefaultDisplay">
            <summary>
            Primary Display is the default display to use.
            It is the first display you added into Visualization.
            You can set it to a display which is already contained .
            </summary>
        </member>
        <member name="E:Lava.Visual.Visualization.DisplayChanged">
            <summary>
            Occurs when a display is inserted or removed.
            </summary>
        </member>
        <member name="E:Lava.Visual.Visualization.GroupChanged">
            <summary>
            Occurs when a visual/data group is inserted/removed from the visualization.
            </summary>
        </member>
        <member name="P:Lava.Visual.Visualization.VisualGroups">
            <summary>
            Gets the visual groups.
            </summary>
            <value>
            The visual groups.
            </value>
        </member>
        <member name="P:Lava.Visual.Visualization.VisualItemSets">
            <summary>
            Gets all the visual item sets stored in this visualization, such as visual tables, visual graphs, etc.
            </summary>
            <value>
            The visual item sets.
            </value>
        </member>
        <member name="P:Lava.Visual.Visualization.VisualTables">
            <summary>
            Gets all the visual tables that actually store data, which including all the visual tables, 
            visual node table, and visual edge table. But all the visual graphs/trees are ignored, because
            they are just wrappers.
            </summary>
            <value>
            The visual tables.
            </value>
        </member>
        <member name="T:Lava.Visual.AbstractLayoutAnimation">
            <summary>
            Define basic functions of animation layout.
            Animation Layout "takes some actions when a tick comes to make elements more close to stable state.".
            
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractLayoutAnimation.Layout(System.Int64)">
            <summary>
            layout when ticks come.
            Implement your layout by override the method
            </summary>
            <param name="step">The passed time, in millisecond.</param>
            <returns>is success.</returns>
        </member>
        <member name="M:Lava.Visual.AbstractLayoutAnimation.Layout">
            <summary>
            default call Layout(0)
            </summary>
            <returns>is success.</returns>
        </member>
        <member name="P:Lava.Visual.AbstractLayoutAnimation.Anchor">
            <summary>
            The layout anchor at which to center or root the layout. How this
            point is used (if it is used at all) is dependent on the particular
            Layout implementation.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractLayoutAnimation.Bounds">
            <summary>
            The Layout Bounds helps layout algorithm layout element on the display.
            How this Bounds is used (if it is used at all) is dependent on the particular
            Layout implementation.
            </summary>
        </member>
        <member name="M:Lava.Visual.AbstractControl.BindDisplay">
            <summary>
            Binds the display.
            </summary>
            <returns>True if the binding is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Visual.AbstractControl.UnbindDisplay">
            <summary>
            Unbinds the display.
            </summary>
            <returns>True if the unbinding is successful, false otherwise.</returns>
        </member>
        <member name="M:Lava.Visual.AbstractControl.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatEnterHandler">
            <summary>
            Registers RatEnter event handler for moving the cursor into a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatLeaveHandler">
            <summary>
            Registers RatLeave event handler for moving the cursor out of a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatLeftButtonDownHandler">
            <summary>
            Registers RatLeftButtonDown event handler for left-button-down on a visual item.;
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatLeftButtonUpHandler">
            <summary>
            Registers RatLeftButtonUp event handler for left-button-up on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatRightButtonDownHandler">
            <summary>
            Registers RatRightButtonDown event handler for right-button-down on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatRightButtonUpHandler">
            <summary>
            Registers RatRightButtonUp event handler for right-button-up on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatClickHandler">
            <summary>
            Registers RatClick event handler for clicking on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatDoubleClickHandler">
            <summary>
            Register RatDoubleClick event handler for double-clicking on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.RatMoveHandler">
            <summary>
            Register RatMove event handler for moving the cursor.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.Filter">
            <summary>
            Gets or sets the rule to specify what items this control can control.
            </summary>
        </member>
        <member name="P:Lava.Visual.AbstractControl.Enabled">
            <summary>
            Enables or disables this control.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Lava.Visual.AbstractControl.Display">
            <summary>
            Gets or sets the display that this control is binded to. 
            Set the value to make the control work on that display.
            When the value is null, remove the control from the display.
            </summary>
        </member>
        <member name="T:Lava.Visual.DragControl">
            <summary>
            A Normal drag controller to control drag behavior.
            
            It has two Modes:
            DragVisualItem: only visual item look can trigger drag event
            DrayAny: every where on display can trigger drag event
            
            Register your handler to drag events to operate drag:
            DragStart, DragEnd, DragEnter, DragLeave, Dragging
            
            </summary>
        </member>
        <member name="M:Lava.Visual.DragControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.DragControl"/> class. DragMode is
            DragMode.VisualItem. MouseMode is MouseMode.Left. ModifierKey is ModifierKeys.None.
            </summary>
        </member>
        <member name="M:Lava.Visual.DragControl.#ctor(Lava.Visual.DragMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.DragControl"/> class. 
            MouseMode is MouseMode.Left. ModifierKey is ModifierKeys.None.
            </summary>
            <param name="dragMode">The drag mode.</param>
        </member>
        <member name="M:Lava.Visual.DragControl.#ctor(Lava.Visual.MouseMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.DragControl"/> class.DragMode is
            DragMode.VisualItem. ModifierKey is ModifierKeys.None.
            </summary>
            <param name="mouseMode">The drag mouse BTN.</param>
        </member>
        <member name="M:Lava.Visual.DragControl.#ctor(Lava.Visual.DragMode,Lava.Visual.MouseMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.DragControl"/> class.
            ModifierKey is ModifierKeys.None.
            </summary>
            <param name="dragMode">The drag mode.</param>
            <param name="mouseMode">The mouse mode.</param>
        </member>
        <member name="F:Lava.Visual.DragControl.Dragging">
            <summary>
            Occurs every dragging move
            </summary>
        </member>
        <member name="F:Lava.Visual.DragControl._draggingDisplay">
            <summary>
            The Dragging Display. (Use to capture the mouse)
            </summary>
        </member>
        <member name="P:Lava.Visual.DragControl.IsDragging">
            <summary>
            Gets the dragging status, if something is currently dragged.
            </summary>
        </member>
        <member name="P:Lava.Visual.DragControl.DragMode">
            <summary>
            Gets or sets the mode of the drag control, If the value is DragMode.VisualItem, only
            visual items can trigger the events. Otherwise if the value is DragMode.Anything,
            everything can trigger the events, even the empty display space. The default value is
            DragMode.VisualItem.
            </summary>
        </member>
        <member name="P:Lava.Visual.DragControl.ModifierKey">
            <summary>
            Gets or set the modifier key for the control. For example, if you want to Alt+Drag behavior,
            you should set this value accordingly. The default value is ModifierKeys.None.
            </summary>
        </member>
        <member name="P:Lava.Visual.DragControl.MouseMode">
            <summary>
            Gets the mouse button for the control, Do you want to use left button or right button to do
            the dragging?
            </summary>
        </member>
        <member name="E:Lava.Visual.DragControl.DragStart">
            <summary>
            Occurs when a drag behavior starts.
            </summary>
        </member>
        <member name="E:Lava.Visual.DragControl.DragEnd">
            <summary>
            Occurs when a drag behavior ends.
            </summary>
        </member>
        <member name="T:Lava.Visual.DragMode">
            <summary>
            Drag modes for <c>DragControl</c>.
            </summary>
        </member>
        <member name="F:Lava.Visual.DragMode.VisualItem">
            <summary>
            Only visual items can trigger drag event.
            </summary>
        </member>
        <member name="F:Lava.Visual.DragMode.Anything">
            <summary>
            Anything can trigger drag event.
            </summary>
        </member>
        <member name="T:Lava.Visual.DraggingEventHandler">
            <summary>
            event handler for dragging event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Lava.Visual.RatEventArgs"/> instance containing the event data.</param>
            <param name="dx">The delta x of the drag.</param>
            <param name="dy">The delta y of the drag.</param>
        </member>
        <member name="T:Lava.Visual.FocusControl">
            <summary>
            Focus Control show user's focus element on display
            by send the element to Top Layer.
            It has four Modes:
            MouseCover: Act when mouse cursor covers an element
            MouseDown: Act when mouse down (include left/right button) on an element.
            MouseLeftDown: Act when mouse left button down on an element.
            MouseRightDown: Act when mouse right button down on an element.
            Register handlers on two focus events:
            Focus, Unfocus
            </summary>
        </member>
        <member name="M:Lava.Visual.FocusControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.FocusControl"/> class.
            Using MouseLeftButtonDown as trigger, and top layer as focus layer.
            </summary>
        </member>
        <member name="M:Lava.Visual.FocusControl.#ctor(Lava.Visual.FocusTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.FocusControl"/> class.
            Use top layer as focus layer.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Lava.Visual.FocusControl.#ctor(Lava.Visual.FocusTrigger,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lava.Visual.FocusControl"/> class.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="focusLayer">The layer the focused item will be bring to when it is focused.</param>
        </member>
        <member name="M:Lava.Visual.FocusControl.BindDisplay">
            <summary>
            Binds the display.
            </summary>
            <returns>
            True if the binding is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Visual.FocusControl.UnbindDisplay">
            <summary>
            Unbinds the display.
            </summary>
            <returns>
            True if the unbinding is successful, false otherwise.
            </returns>
        </member>
        <member name="P:Lava.Visual.FocusControl.Trigger">
            <summary>
            focus mode
            </summary>
        </member>
        <member name="P:Lava.Visual.FocusControl.RatEnterHandler">
            <summary>
            Registers RatEnter event handler for moving the cursor into a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FocusControl.RatLeaveHandler">
            <summary>
            Registers RatLeave event handler for moving the cursor out of a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FocusControl.RatLeftButtonDownHandler">
            <summary>
            Registers RatLeftButtonDown event handler for left-button-down on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FocusControl.RatRightButtonDownHandler">
            <summary>
            Registers RatRightButtonDown event handler for right-button-down on a visual item.
            </summary>
        </member>
        <member name="P:Lava.Visual.FocusControl.FocusLayer">
            <summary>
            Gets the layer the focused item will be bring to when it is focused.
            </summary>
        </member>
        <member name="E:Lava.Visual.FocusControl.Focused">
            <summary>
            Occurs when user focus an element on display.
            by mouse cover, left down or right down.
            focus behavior defined by FocusMode
            </summary>
        </member>
        <member name="E:Lava.Visual.FocusControl.Unfocused">
            <summary>
            Occurs when user Unfocus an element on display
            </summary>
        </member>
        <member name="T:Lava.Visual.FocusTrigger">
            <summary>
            FocusMode for FocusControl
            
            MouseCover: Act when mouse cursor covers an element
            MouseDown: Act when mouse down (include left/right button) on an element.
            MouseLeftDown: Act when mouse left button down on an element.
            MouseRightDown: Act when mouse right button down on an element.
            </summary>
        </member>
        <member name="F:Lava.Visual.FocusTrigger.MouseHover">
            <summary>
            Act when mouse cursor covers an element
            </summary>
        </member>
        <member name="F:Lava.Visual.FocusTrigger.MouseLeftButtonDown">
            <summary>
             Act when mouse left button down on an element.
            </summary>
        </member>
        <member name="F:Lava.Visual.FocusTrigger.MouseRightButtonDown">
            <summary>
            Act when mouse right button down on an element.
            </summary>
        </member>
        <member name="T:Lava.Visual.Layer">
            <summary>
            the layer enum
            </summary>
        </member>
        <member name="F:Lava.Visual.Layer.Top">
            <summary>
            top layer is -1
            </summary>
        </member>
        <member name="F:Lava.Visual.Layer.Bottom">
            <summary>
            Bottom layer is -2
            </summary>
        </member>
        <member name="F:Lava.Visual.Layer.Default">
            <summary>
            default layer is 0
            </summary>
        </member>
        <member name="T:Lava.Visual.RatEventConf">
            <summary>
            default rat event configure
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventConf.DoubleClickThreshold">
            <summary>
            tow click interval is less than 250ms, it is a double click
            </summary>
        </member>
        <member name="T:Lava.Visual.DisplayEvent">
            <summary>
            Insert/Delete display to Visualizaion
            
            </summary>
        </member>
        <member name="F:Lava.Visual.DisplayEvent.Insert">
            <summary>
            a display inserted in the Visualizaion
            </summary>
        </member>
        <member name="F:Lava.Visual.DisplayEvent.Delete">
            <summary>
            a display deleted in the Visualizaion
            </summary>
        </member>
        <member name="T:Lava.Visual.DiplayEventHandler">
            <summary>
            Display changed event hander
            
            </summary>
            <param name="displayName">The display nam.</param>
            <param name="eventType">The event type Insert or Delet.</param>
        </member>
        <member name="T:Lava.Visual.GroupEvent">
            <summary>
            Group event type: Insert or Delete
            
            </summary>
        </member>
        <member name="F:Lava.Visual.GroupEvent.Insert">
            <summary>
            the group is inserted
            </summary>
        </member>
        <member name="F:Lava.Visual.GroupEvent.Delete">
            <summary>
            the group is deleted
            </summary>
        </member>
        <member name="T:Lava.Visual.GroupEventHandler">
            <summary>
            Group changed event handler delegate
            
            </summary>
            <param name="group">The group nam.</param>
            <param name="eventType">The event type: Insert or Delet.</param>
        </member>
        <member name="T:Lava.Visual.MouseMode">
            <summary>
            Help flag mouse interaction mode.
            </summary>
        </member>
        <member name="F:Lava.Visual.MouseMode.Left">
            <summary>
            Left Button mouse event
            </summary>
        </member>
        <member name="F:Lava.Visual.MouseMode.Right">
            <summary>
            Right Button mouse event
            </summary>
        </member>
        <member name="F:Lava.Visual.MouseMode.Any">
            <summary>
            Any (include Left and Right) Button mouse event
            </summary>
        </member>
        <member name="T:Lava.Visual.MouseModeExtensionMethods">
            <summary>
            help methods for MouseMode
            </summary>
        </member>
        <member name="M:Lava.Visual.MouseModeExtensionMethods.IsLeft(Lava.Visual.MouseMode)">
            <summary>
            is left button event in the mouse mode
            include (MouseMode.Left and MouseMode.Any)
            </summary>
            <param name="mode">The moude mod.</param>
            <returns>is include left.</returns>
        </member>
        <member name="M:Lava.Visual.MouseModeExtensionMethods.IsRight(Lava.Visual.MouseMode)">
            <summary>
            is right button event in the mouse mode
            include (MouseMode.Right and MouseMode.Any)
            </summary>
            <param name="mode">The moude mod.</param>
            <returns>is include right.</returns>
        </member>
        <member name="M:Lava.Visual.MouseModeExtensionMethods.IsAny(Lava.Visual.MouseMode)">
            <summary>
            is any button event is OK in this mode
            is it MouseMode.Any
            </summary>
            <param name="mode">The moude mod.</param>
            <returns>is it MouseMode.Any.</returns>
        </member>
        <member name="T:Lava.Visual.RatEventArgs">
            <summary>
            This event args entity is emitted when rat events happened
            </summary>
        </member>
        <member name="M:Lava.Visual.RatEventArgs.#ctor(System.Windows.Input.MouseEventArgs,Lava.Visual.ILook,Lava.Visual.RatEventType)">
            <summary>
            Create a RatEventArgs
            </summary>
            <param name="e">Routed original mouse even.</param>
            <param name="look">The look responsible for this even.</param>
            <param name="type">The Event type of this even.</param>
        </member>
        <member name="P:Lava.Visual.RatEventArgs.MouseEvent">
            <summary>
            Routed from original mouse event
            </summary>
        </member>
        <member name="P:Lava.Visual.RatEventArgs.VisualItem">
            <summary>
            The Visual item which is hit, null if hit none item.
            </summary>
        </member>
        <member name="P:Lava.Visual.RatEventArgs.EventType">
            <summary>
            The Event type of this event
            </summary>
        </member>
        <member name="P:Lava.Visual.RatEventArgs.Look">
            <summary>
            The look responsible for the event, in case this visual item has multiple looks
            </summary>
        </member>
        <member name="T:Lava.Visual.RatEventHandler">
            <summary>
            Handler for LAVA-related mouse events.
            </summary>
            <param name="sender">The sender, the display or visual item that triggers the event.</param>
            <param name="e">The <see cref="T:Lava.Visual.RatEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Lava.Visual.RatEventType">
            <summary>
            Rat event type
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.Unknown">
            <summary>
            Unknown type used in control.
            If the control is not sure the event type
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.Enter">
            <summary>
            rat enter event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.Leave">
            <summary>
            Rat Leave event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.LeftButtonDown">
            <summary>
            Rat LeftButtonDown event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.LeftButtonUp">
            <summary>
            Rat LeftButtonUp event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.RightButtonDown">
            <summary>
            Rat RightButtonDown event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.RightButtonUp">
            <summary>
            Rat RightButtonUp event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.Click">
            <summary>
            Rat Click event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.DoubleClick">
            <summary>
            Rat DoubleClick event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.Move">
            <summary>
            Rat Move event
            </summary>
        </member>
        <member name="F:Lava.Visual.RatEventType.WheelChange">
            <summary>
            wheel change event
            </summary>
        </member>
        <member name="T:Lava.Visual.PanEventArgs">
            <summary>
            Pan Event Args used in PanAndZoomViewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.PrevLocation">
            <summary>
            Previous location, relative to the viewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.PrevX">
            <summary>
            X-coordinate of previous location, relative to the viewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.PrevY">
            <summary>
            Y-coordinate of previous location, relative to the viewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.CurrentLocation">
            <summary>
            Current location, relative to the viewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.CurrentX">
            <summary>
            X-coordinate of Current location, relative to the viewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.CurrentY">
            <summary>
            Y-coordinate of Current location, relative to the viewer
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.DX">
            <summary>
            Delta x-coordinate: CurrentX - PrevX
            </summary>
        </member>
        <member name="P:Lava.Visual.PanEventArgs.DY">
            <summary>
            Delta y-coordinate: CurrentY - PrevY
            </summary>
        </member>
        <member name="T:Lava.Visual.ZoomEventArgs">
            <summary>
            Zoom Event Args used in PanAndZoomViewer
            </summary>
        </member>
        <member name="P:Lava.Visual.ZoomEventArgs.PrevScale">
            <summary>
            Previous scale
            </summary>
        </member>
        <member name="P:Lava.Visual.ZoomEventArgs.CurrentScale">
            <summary>
            Current Scale
            </summary>
        </member>
        <member name="P:Lava.Visual.ZoomEventArgs.DeltaScale">
            <summary>
            Delta Scale = CurrentScale / PrevScale
            </summary>
        </member>
        <member name="T:Lava.Data.IVisualItemSet">
            <summary>
            Visual item set.
            Inherited from IItemSet.
            Visual Table is an IVisualItemSet
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItemSet.Visualization">
            <summary>
            back-end Visualization manager
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItemSet.Group">
            <summary>
            The group name
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItemSet.Source">
            <summary>
            The data item set behind this visual set, null if not existing.
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualItemSet.Items">
            <summary>
            Gets all visual items in this visual item set.
            </summary>
            <returns>All valid visual items.</returns>
        </member>
        <member name="T:Lava.Data.VisualEdge">
            <summary>
            A visual edge item. It assign back end graph.
            Its location properties define:
            X1: source node X
            Y1: source node Y
            X2: target node X
            Y2: target node Y
            
            These location style columns do NOT need to be defined in edge visual table.
            </summary>    
        </member>
        <member name="M:Lava.Data.VisualEdge.#ctor(Lava.Data.IVisualTable,Lava.Data.IGraph)">
            <summary>
            Create the visual edge.
            We must assign the visual node table.
            Because use the node table in the graph can NOT
            ensure the table is visual node table.
            Because the state of the graph may change.
            
            Managed by Edge item manager
            </summary>
            <param name="table">Back-end edge tabl.</param>
            <param name="graph">back-end grap.</param>
        </member>
        <member name="P:Lava.Data.VisualEdge.Graph">
            <summary>
            the back-end graph
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.IsDirected">
            <summary>
            Is the graph directed
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.SourceNode">
            <summary>
            the source node
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.Lava#Data#IEdge#SourceNode">
            <summary>
            the source node
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.Source">
            <summary>
            the source node row
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.Target">
            <summary>
            the target node row
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.TargetNode">
            <summary>
            the target node
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.Lava#Data#IEdge#TargetNode">
            <summary>
            the target node
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.X">
            <summary>
            X style is not supported in visual edge
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.Y">
            <summary>
            Y style is not supported in visual edge
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.X1">
            <summary>
            X1 style
            X1 style of source node
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.Y1">
            <summary>
            Y1 Style
            
            Y1 style of source node
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.X2">
            <summary>
            X2 Style
            X2 style of target node
            </summary>
        </member>
        <member name="P:Lava.Data.VisualEdge.Y2">
            <summary>
            Y2 Style
            Y2 style of target node
            </summary>
        </member>
        <member name="T:Lava.Data.VisualNode">
            <summary>
            Visual node item (node in visual graph)
            </summary>
        </member>
        <member name="M:Lava.Data.VisualNode.#ctor(Lava.Data.IVisualTable,Lava.Data.IGraph)">
            <summary>
            Create visual node item
            </summary>
            <param name="table">back-end node tabl.</param>
            <param name="graph">back-end grap.</param>
        </member>
        <member name="P:Lava.Data.VisualNode.Graph">
            <summary>
            back-end graph
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Degree">
            <summary>
            degree
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Indegree">
            <summary>
            in degree
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Outdegree">
            <summary>
            out degree
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Neighbors">
            <summary>
            Neighbors
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Lava#Data#INode#Neighbors">
            <summary>
            Neighbors
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.InNeighbors">
            <summary>
            In Neighbors
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Lava#Data#INode#InNeighbors">
            <summary>
            In Neighbors
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.OutNeighbors">
            <summary>
            Out Neighbors
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Lava#Data#INode#OutNeighbors">
            <summary>
            Out Neighbors
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Edges">
            <summary>
            Edges
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Lava#Data#INode#Edges">
            <summary>
            Edges
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.InEdges">
            <summary>
            In Edges
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Lava#Data#INode#InEdges">
            <summary>
            In Edges
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.OutEdges">
            <summary>
            Out Edges
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.Lava#Data#INode#OutEdges">
            <summary>
            Out Edges
            </summary>
        </member>
        <member name="P:Lava.Data.VisualNode.IsDirected">
            <summary>
            Is the graph directed
            </summary>
        </member>
        <member name="T:Lava.Visual.StyleUpdaters">
            <summary>
            A helper class to shorten the name of Dictionary{string, Func{ILook, bool}}.
            </summary>
        </member>
        <member name="T:Lava.Visual.LabelRender">
            <summary>
            Draw label for visual items
            </summary>
        </member>
        <member name="M:Lava.Visual.LabelRender.#ctor">
            <summary>
            Create a LabelRender, 
            add the updater, when the Text (Styles.Text) style changed,
            Repaint the look
            </summary>
        </member>
        <member name="M:Lava.Visual.LabelRender.CreateLook(Lava.Data.IVisualItem)">
            <summary>
            create a LabelLook for the visual item
            </summary>
            <param name="vi">The visual ite.</param>
            <returns>The newly created look.</returns>
        </member>
        <member name="F:Lava.Visual.LabelRender.DefaultColumns">
            <summary>
            default label styles column group
            </summary>
        </member>
        <member name="M:Lava.Visual.LabelRender.#cctor">
            <summary>
            initialize default label styles column group
            </summary>
        </member>
        <member name="T:Lava.Data.IVisualTable">
            <summary>
            We store the Visual Abstraction into Visual Table.
            Visual Table is a child table of original data table
            NOTICE: Please notice that all the quick API setting/getting here are decided alias, not column names!
            </summary>
        </member>
        <member name="M:Lava.Data.IVisualTable.RevertToParent">
            <summary>
            Disposes this visual table, and returns the original parent data table.
            </summary>
            <returns>The parent table.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.Dispose">
            <summary>
            Disposes this visual table.
            </summary>
        </member>
        <member name="M:Lava.Data.IVisualTable.Repaint(System.Int32,System.String)">
            <summary>
            Repaint its graphics element when the style changed
            
            This API update the assigned style to the look and call repaint
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="changedStyle">The style field name (column name.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.Repaint(System.Int32)">
            <summary>
            Repaint its graphics element anyway.
            This API update all styles to the look and call repaint.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.RepaintAll">
            <summary>
            Repaint all items in the table anyway.
            
            Update styles to the looks, and call repaint for every item
            </summary>
        </member>
        <member name="M:Lava.Data.IVisualTable.IsValidLook(System.Int32)">
            <summary>
            Tests if the visual item can be rendered.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>True if it can produce a valid look, false otherwise.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SupportStyle(System.String)">
            <summary>
            By default, if a style column has not been added, a global default value is used instead.
            So this function checks that if this visual table really supports a certain style, i.e., this style column exists.
            We check if this column exists and if the type in this column is compatible.
            </summary>
            <param name="styleName">A specific style name (listed in <see cref="!:Lava.Data.Styles"/>) that needs to be checked.</param>
            <returns>True if this visual table has added this style column, false if the column is missing or the type in the column does not match.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.EnsureStyles(System.String[])">
            <summary>
            Makes sure this visual table support the specific styles. Some special columns are pre-defined in LAVA
            (see <see cref="!:Lava.Data.Styles"/> to check them out). And they are added by users manually.
            So calling this function will make sure this visual table have the desired pre-defined columns (with correct names and types).
            </summary>
            <param name="styles">The style names this table must support.</param>
            <returns>
            True if the operation is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.EnsureStyle(System.String)">
            <summary>
            Makes sure this visual table support the specific style. Some special columns are pre-defined in LAVA
            (see <see cref="!:Lava.Data.Styles"/> to check them out). And they are added by users manually.
            So calling this function will make sure this visual table have the desired pre-defined column (with the correct name and type).
            </summary>
            <param name="style">The style name this table must support.</param>
            <returns>
            True if the operation is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.EnsureStyles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Makes sure this visual table support the specific styles. Some special columns are pre-defined in LAVA
            (see <see cref="!:Lava.Data.Styles"/> to check them out). And they are added by users manually.
            So calling this function will make sure this visual table have the desired pre-defined columns (with correct names and types).
            </summary>
            <param name="styles">The style names this table must support.</param>
            <returns>
            True if the operation is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetRender(System.Int32)">
            <summary>
            Gets/Sets the Render for the item at the given row, which takes charge of how to generate and change the look.
            If the column (Styles.Render) does not exist, the default value <c>null</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The render.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetRender(System.Int32,Lava.Visual.IRender)">
            <summary>
            Gets/Sets the Render for the item at the given row, which takes charge of how to generate and change the look.
            If the column (Styles.Render) does not exist, the default value <c>null</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="render">The render.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetLook(System.Int32)">
            <summary>
            Gets the Look for the item at the given row, which tell the Display how to draw the visual item.
            Every visual column is designed to have a local column of ILook whose name has to be Styles.Look.
            Generally you should not worry or care about this column, or get values from this column. This API
            is exposed for just-in-case.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The Look Style.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetZIndex(System.Int32)">
            <summary>
            Gets the Z-index style, which decides the z-depth of the item on the display. The item with bigger
            value will be placed on top of items with smaller values. This column is also a must-have column
            for visual table. You do not need to know anything about this column to make your visualization work.
            </summary>
            <param name="trow">The trow.</param>
            <returns>
            The Z-index style for the item at trow in the table.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetLayer(System.Int32)">
            <summary>
            Gets/Sets the Layer Style, which decides which layer for this item to be drawn on the display. It is a rough
            control about z-depth of items. If two items are drawn on the same layer, then we compare their z-index
            to decided which one draw first.
            If this column (Styles.Layer) does not exist, the default value <c>DefaultLayer</c>, which is 0 unless
            it is set on purpose, will be used, and the Set operation will be ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetLayer(System.Int32,System.Int32)">
            <summary>
            Gets/Sets the Layer Style, which decides which layer for this item to be drawn on the display. It is a rough
            control about z-depth of items. If two items are drawn on the same layer, then we compare their z-index
            to decided which one draw first.
            If this column (Styles.Layer) does not exist, the default value <c>DefaultLayer</c>, which is 0 unless
            it is set on purpose, will be used, and the Set operation will be ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="layer">The layer you want to set.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetupRender(Lava.Visual.IRender)">
            <summary>
            A continent function to set up a render for the whole table items.
            </summary>
            <param name="render">The render to set.</param>
            <returns>
            True if the operation finishes successfully, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.IsVisible(System.Int32)">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
              <c>True</c> if the specified row is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetVisible(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isVisible">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetVisible(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isVisible">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetVisible(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isVisible">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.IsListenMouse(System.Int32)">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetListenMouse(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isListenMouse">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetListenMouse(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isListenMouse">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetListenMouse(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isListenMouse">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.IsHover(System.Int32)">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetHover(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isHover">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetHover(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isHover">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetHover(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isHover">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.IsFixed(System.Int32)">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetFixed(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isFixed">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetFixed(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isFixed">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetFixed(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isFixed">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetX(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="x">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetY(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="y">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y">The y.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y">The y.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetX1(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX1(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="x1">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX1(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x1">The x1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX1(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x1">The x1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetY1(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY1(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="y1">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY1(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y1">The y1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY1(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y1">The y1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetY2(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY2(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="y2">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY2(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y2">The y2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetY2(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y2">The y2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetX2(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX2(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="x2">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX2(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x2">The x2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetX2(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x2">The x2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetText(System.Int32)">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetText(System.Int32,System.String)">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="text">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetText(System.String,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetText(System.Func{Lava.Data.IVisualItem,System.String},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetWidth(System.Int32)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetWidth(System.Int32,System.Double)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="width">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetWidth(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="width">The width.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetWidth(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="width">The width.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetHeight(System.Int32)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetHeight(System.Int32,System.Double)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="height">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetHeight(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="height">The height.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetHeight(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="height">The height.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetOpacity(System.Int32,System.Double)">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="opacity">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetOpacity(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="opacity">The opacity.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetOpacity(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="opacity">The opacity.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetOpacity(System.Int32)">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetStrokeBrush(System.Int32,System.Windows.Media.Brush)">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="color">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetStrokeBrush(System.Windows.Media.Brush,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetStrokeBrush(System.Func{Lava.Data.IVisualItem,System.Windows.Media.Brush},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetStrokeBrush(System.Int32)">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetStrokeWidth(System.Int32)">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetStrokeWidth(System.Int32,System.Double)">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="strokeWidth">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetStrokeWidth(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="strokeWidth">Width of the stroke.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetStrokeWidth(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="strokeWidth">Width of the stroke.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetFillBrush(System.Int32,System.Windows.Media.Brush)">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="color">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetFillBrush(System.Windows.Media.Brush,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetFillBrush(System.Func{Lava.Data.IVisualItem,System.Windows.Media.Brush},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetFillBrush(System.Int32)">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetPath(System.Int32,System.Windows.Media.Geometry)">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="path">The new style value.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetPath(System.Windows.Media.Geometry,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="path">The path.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetPath(System.Func{Lava.Data.IVisualItem,System.Windows.Media.Geometry},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="path">The path.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.GetPath(System.Int32)">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:Lava.Data.IVisualTable.ForEach(System.Action{Lava.Data.IVisualItem},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Makes an action to each valid item in this table. 
            </summary>
            <param name="action">The action to be performed.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetEach``1(System.String,``0,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The value.</param>        
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetEach``1(System.String,System.Func{Lava.Data.IVisualItem,``0},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetEach``1(System.Int32,``0,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The value.</param>        
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.IVisualTable.SetEach``1(System.Int32,System.Func{Lava.Data.IVisualItem,``0},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="P:Lava.Data.IVisualTable.Display">
            <summary>
            The display that all the items in this table will be displayed on.
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualTable.DefaultLayer">
            <summary>
            Default layer that all the items will use. If this table does not support Styles.Layer, this value
            will be used. 
            </summary>
        </member>
        <member name="P:Lava.Data.IVisualTable.AutoRepaint">
            <summary>
            Switch to turn on/off the auto repainting feature of visual table. In the render class, several style names
            are specified for it to work correctly. So the visual table can know when a look needs a repaint when its
            back-end item has a value updated. So if the switch is on, then a cell is updated in the visual table,
            the table will ask the corresponding render to check if a repaint is needed. If the render says the repaint
            is needed, then the table will ask the render to update the look. If the switch is off, then nothing is done, 
            and the look maybe out of date. This switch is useful at the beginning of creating a visual table. You want
            to fill the whole table, and paint everything only once. Otherwise, when a cell is filled, a repaint is trigged,
            which is very expensive considering that you have a lot of cells to fill.
            Read more: 
            </summary>
        </member>
        <member name="T:Lava.Data.VisualEdgeTable">
            <summary>
            Visual edge table for Graph in Visual mode
            
            </summary>
        </member>
        <member name="T:Lava.Data.VisualTable">
            <summary>
            We store the Visual Abstraction into Visual Table. 
            Visual Table is a child table of original data table
            
            
            The visual table should has always been created through visualization.
            Please do not call the internal function by yourself.
            
            </summary>
        </member>
        <member name="M:Lava.Data.VisualTable.BuildIndexCache(System.Int32,Lava.Data.DataEvent)">
            <summary>
            update column index cache when table structure changed
            </summary>
            <param name="toBeDeleted">The changed colum.</param>
            <param name="type">The data event typ.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.OnTableColumnChanged(System.Object,Lava.Data.TableColumnEventArgs)">
            <summary>
            update column index cache when table structure changed
            </summary>
            <param name="sender">This visual tabl.</param>
            <param name="e">The data event typ.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.#ctor(Lava.Data.ITable,System.Int32)">
            <summary>
            Create a VisualTable with its parent data table,
            and assign the default layer
            </summary>
            <param name="parent">The parent data tabl.</param>
            <param name="defaultLayer">The default laye.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.#ctor(Lava.Data.ITable,Lava.Data.ColumnGroup,System.Int32)">
            <summary>
            Create a visual table with its parent data table,
            and assign the default layer,
            and attach a group of visual columns
            </summary>
            <param name="parent">The parent data tabl.</param>
            <param name="visualColumns">a group of visual columns to ad.</param>
            <param name="defaultLayer">The default laye.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.Clear">
            <summary>
            Clear all items.
            Also erase their looks already been drawn
            </summary>
            <returns>is success.</returns>
        </member>
        <member name="M:Lava.Data.VisualTable.AddItem">
            <summary>
            add an item. (TableVisualItem)
            </summary>
            <returns>The newly added item.</returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetupRender(Lava.Visual.IRender)">
            <summary>
            Setup render for the table.
            Create and add a ConstantColumn contains the render for the table.
            
            If the render column is already setup, ignore this call.
            </summary>
            <param name="render">The rende.</param>
            <returns>is success.</returns>
        </member>
        <member name="M:Lava.Data.VisualTable.GetItem(System.Int32)">
            <summary>
            Get the item of the row. (IVisualItem)
            </summary>
            <param name="trow">The row inde.</param>
            <returns>The visual item.</returns>
        </member>
        <member name="M:Lava.Data.VisualTable.CheckValidLayer(System.Int32)">
            <summary>
            Check if the layer id is valid. (>=2)
            </summary>
            <param name="layer">The laye.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.OnTableChanged(Lava.Data.ITable,System.Int32,System.Int32,System.Int32,Lava.Data.DataEvent)">
            <summary>
            Run Visual pipeline when the data of the visual table changed.
            
            </summary>
            <param name="sender">The event sender, the changed tabl.</param>
            <param name="startRow">The event influenced rows' start inde.</param>
            <param name="endRow">The event influenced rows' end inde.</param>
            <param name="cidx">The event influenced column index. will be -1 if all columns are influence.</param>
            <param name="type">The event typ.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.OnLayerChanged(Lava.Data.IColumn{System.Int32},System.Int32,System.Int32)">
            <summary>
            When the layer changed, erase the look in the old position,
            and render the look in the new position.
            </summary>
            <param name="column">The layer colum.</param>
            <param name="trow">The row inde.</param>
            <param name="prev">The previous laye.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetAlias(System.String,System.String)">
            <summary>
            Set alias for a column.
            Set alias is always used to look a data column as style column.
            
            You can't set alias of a column which is already style column.
            </summary>
            <param name="cname">The column nam.</param>
            <param name="alias">The alia.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.ForEach(System.Action{Lava.Data.IVisualItem},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Makes an action to each valid item in this table.
            </summary>
            <param name="action">The action to be performed.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetEach``1(System.String,``0,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetEach``1(System.String,System.Func{Lava.Data.IVisualItem,``0},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cname">The column name.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetEach``1(System.Int32,``0,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items with the same value at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetEach``1(System.Int32,System.Func{Lava.Data.IVisualItem,``0},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Sets all valid items based on the given func at the given column.
            </summary>
            <typeparam name="T">The type that the given column supports.</typeparam>
            <param name="cidx">The column index.</param>
            <param name="value">The function allows you to get different values based on different items.</param>
            <param name="filter">The filter if you want to target a specific group of items, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.Repaint(System.Int32)">
            <summary>
            Repaint its graphics element when the style changed
            
            This API update the assigned style to the look and call repaint
            </summary>
            <param name="trow">The row inde.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.Repaint(System.Int32,System.String)">
            <summary>
            Repaint its graphics element anyway.
            This API update all styles to the look and call repaint.
            </summary>
            <param name="trow">The row inde.</param>
            <param name="changedStyle">The style field name (column name.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.RepaintAll">
            <summary>
            Repaint all items in the table anyway.
            
            Update styles to the looks, and call repaint for every item
            </summary>
        </member>
        <member name="M:Lava.Data.VisualTable.RepaintAll(System.String)">
            <summary>
            Repaint all items in the table anyway.
            
            Update the assign style to the looks, and call repaint for every item
            </summary>
            <param name="changedStyle">The changed style nam.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.InternalRepaint(System.Int32,System.String)">
            <summary>
            Let render repaint the item
            </summary>
            <param name="trow">The row inde.</param>
            <param name="changedStyle">The changed style name, null means update all style.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.RevertToParent">
            <summary>
            Dispose and return the original parent data table
            </summary>
            <returns>The parent table.</returns>
        </member>
        <member name="M:Lava.Data.VisualTable.Dispose">
            <summary>
            Dispose the table, remove event handlers, break the Visual pipeline
            </summary>
        </member>
        <member name="M:Lava.Data.VisualTable.SupportStyle(System.String)">
            <summary>
            By default, if a style column has not been added, a global default value is used instead.
            So this function checks that if this visual table really supports a certain style, i.e., this style column exists.
            We check if this column exists and if the type in this column is compatible.
            </summary>
            <param name="styleName">A specific style name (listed in <see cref="!:Lava.Data.Styles"/>) that needs to be checked.</param>
            <returns>
            True if this visual table has added this style column, false if the column is missing or the type in the column does not match.
            </returns>
            <exception cref="T:System.ArgumentException">The style name  + styleName +  is not pre-defined</exception>
        </member>
        <member name="M:Lava.Data.VisualTable.EnsureStyles(System.String[])">
            <summary>
            Makes sure this visual table support the specific styles. Some special columns are pre-defined in LAVA
            (see <see cref="!:Lava.Data.Styles"/> to check them out). And they are added by users manually.
            So calling this function will make sure this visual table have the desired pre-defined columns (with correct names and types).
            </summary>
            <param name="styles">The style names this table must support.</param>
            <returns>
            True if the operation is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.EnsureStyle(System.String)">
            <summary>
            Makes sure this visual table support the specific style. Some special columns are pre-defined in LAVA
            (see <see cref="!:Lava.Data.Styles"/> to check them out). And they are added by users manually.
            So calling this function will make sure this visual table have the desired pre-defined column (with the correct name and type).
            </summary>
            <param name="style"></param>
            <returns>
            True if the operation is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.EnsureStyles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Makes sure this visual table support the specific styles. Some special columns are pre-defined in LAVA
            (see <see cref="!:Lava.Data.Styles"/> to check them out). And they are added by users manually.
            So calling this function will make sure this visual table have the desired pre-defined columns (with correct names and types).
            </summary>
            <param name="styles">The style names this table must support.</param>
            <returns>
            True if the operation is successful, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.GetRender(System.Int32)">
            <summary>
            Gets/Sets the Render for the item at the given row, which takes charge of how to generate and change the look.
            If the column (Styles.Render) does not exist, the default value <c>null</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The render.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetRender(System.Int32,Lava.Visual.IRender)">
            <summary>
            Gets/Sets the Render for the item at the given row, which takes charge of how to generate and change the look.
            If the column (Styles.Render) does not exist, the default value <c>null</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="render">The render.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetLook(System.Int32,Lava.Visual.ILook)">
            <summary>
            Sets the Look for the item at the given row, which tell the Display how to draw the visual item.
            Every visual column is designed to have a local column of ILook whose name has to be Styles.Look.
            Generally you should not worry or care about this column, or get values from this column. This API
            is exposed for just-in-case.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="look">The look.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetLook(System.Int32)">
            <summary>
            Gets the Look for the item at the given row, which tell the Display how to draw the visual item.        
            Every visual column is designed to have a local column of ILook whose name has to be Styles.Look.
            Generally you should not worry or care about this column, or get values from this column. This API
            is exposed for just-in-case.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>The Look Style.</returns>
        </member>
        <member name="M:Lava.Data.VisualTable.ResetLook(System.Int32,System.Boolean)">
            <summary>
            Re-creates the look and updates it to the table.
            </summary>
            <param name="trow">The row of the item.</param>
            <param name="uncheck">True if want to skip the valid check for speed up.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.IsValidLook(System.Int32)">
            <summary>
            Tests if the visual item can be rendered.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            True if it can produce a valid look, false otherwise.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetZIndex(System.Int32,System.Int32)">
            <summary>
            Gets the Z-index style, which decides the z-depth of the item on the display. The item with bigger
            value will be placed on top of items with smaller values. This column is also a must-have column
            for visual table. You do not need to know anything about this column to make your visualization work.
            </summary>
            <param name="trow">The trow.</param>
            <param name="zindex">The zindex.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetZIndex(System.Int32)">
            <summary>
            Gets the Z-index style, which decides the z-depth of the item on the display. The item with bigger
            value will be placed on top of items with smaller values. This column is also a must-have column
            for visual table. You do not need to know anything about this column to make your visualization work.
            </summary>
            <param name="trow">The trow.</param>
            <returns>
            The Z-index style for the item at trow in the table.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.GetLayer(System.Int32)">
            <summary>
            Gets the Layer Style, which decides which layer for this item to be drawn on the display. It is a rough
            control about z-depth of items. If two items are drawn on the same layer, then we compare their z-index
            to decided which one draw first.
            If this column (Styles.Layer) does not exist, the default value <c>DefaultLayer</c>, which is 0 unless
            it is set on purpose, will be used, and the Set operation will be ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetLayer(System.Int32,System.Int32)">
            <summary>
            Gets/Sets the Layer Style, which decides which layer for this item to be drawn on the display. It is a rough
            control about z-depth of items. If two items are drawn on the same layer, then we compare their z-index
            to decided which one draw first.
            If this column (Styles.Layer) does not exist, the default value <c>DefaultLayer</c>, which is 0 unless
            it is set on purpose, will be used, and the Set operation will be ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="layer">The layer you want to set.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.IsVisible(System.Int32)">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
              <c>true</c> if the specified row is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetVisible(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>true</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isVisible">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetVisible(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isVisible">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetVisible(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Visible Style value, which tells the render to render this item or not.
            If the style column (Styles.Visible) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isVisible">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.IsListenMouse(System.Int32)">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetListenMouse(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isListenMouse">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetListenMouse(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="isListenMouse">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetListenMouse(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets ListenMouse Style value, which indicates if this item responds to mouse events, such as click and enter.
            If the style column (Styles.ListenMouse) does not exist, the default value <c>True</c> is used.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isListenMouse">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetX(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="x">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetY(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y">The y.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y">The y.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="y">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetOpacity(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="opacity">The opacity.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetOpacity(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="opacity">The opacity.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetOpacity(System.Int32,System.Double)">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="opacity">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetOpacity(System.Int32)">
            <summary>
            Gets/Sets the Opacity Style value, which indicates the item's opacity.
            If the style column (Styles.Opacity) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetStrokeBrush(System.Windows.Media.Brush,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetStrokeBrush(System.Func{Lava.Data.IVisualItem,System.Windows.Media.Brush},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetStrokeBrush(System.Int32,System.Windows.Media.Brush)">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="color">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetStrokeBrush(System.Int32)">
            <summary>
            Gets/Sets the StrokeBrush Style value, which indicates the color for the item's outline.
            If the style column (Styles.StrokeBrush) does not exist, the default value <c>#FFFF6347</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetFillBrush(System.Windows.Media.Brush,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetFillBrush(System.Func{Lava.Data.IVisualItem,System.Windows.Media.Brush},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="color">The color.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetFillBrush(System.Int32,System.Windows.Media.Brush)">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="color">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetFillBrush(System.Int32)">
            <summary>
            Gets/Sets the FillBrush Style value, which indicates the color for filling the item.
            If the style column (Styles.FillBrush) does not exist, the default value <c>#FF4682B4</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.GetStrokeWidth(System.Int32)">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetStrokeWidth(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="strokeWidth">Width of the stroke.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetStrokeWidth(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="strokeWidth">Width of the stroke.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetStrokeWidth(System.Int32,System.Double)">
            <summary>
            Gets/Sets the StrokeWidth Style value, which indicates the width for the item's outline.
            If the style column (Styles.StrokeWidth) does not exist, the default value <c>1.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="strokeWidth">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.IsHover(System.Int32)">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetHover(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isHover">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetHover(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isHover">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetHover(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets the Hover Style value, which indicates if this item is on top of every other item or not.
            If the style column (Styles.Hover) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isHover">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.IsFixed(System.Int32)">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetFixed(System.Boolean,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isFixed">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetFixed(System.Func{Lava.Data.IVisualItem,System.Boolean},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="isFixed">The new style value.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetFixed(System.Int32,System.Boolean)">
            <summary>
            Gets/Sets the Fixed Style value, which indicates if this item is fixed at his current location or not.
            If the style column (Styles.Fixed) does not exist, the default value <c>false</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="isFixed">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetWidth(System.Int32)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetWidth(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="width">The width.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetWidth(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="width">The width.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetWidth(System.Int32,System.Double)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="width">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetX1(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX1(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x1">The x1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX1(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x1">The x1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX1(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="x1">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetX2(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX2(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x2">The x2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX2(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="x2">The x2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetX2(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="x2">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetY1(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY1(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y1">The y1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY1(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y1">The y1.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY1(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="y1">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetY2(System.Int32)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY2(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y2">The y2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY2(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="y2">The y2.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetY2(System.Int32,System.Double)">
            <summary>
            Gets/Sets the X/Y/X1/X2/Y1/Y2 Style value, which indicates the item's X/Y/X1/X2/Y1/Y2 location.
            If the style column (Styles.X/Y/X1/X2/Y1/Y2) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="y2">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetText(System.Int32)">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetText(System.String,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetText(System.Func{Lava.Data.IVisualItem,System.String},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetText(System.Int32,System.String)">
            <summary>
            Gets/Sets the Text Style value, which indicates the label for this item, used by LabelRender.
            If the style column (Styles.Text) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="text">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetHeight(System.Int32)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.SetHeight(System.Double,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="height">The height.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetHeight(System.Func{Lava.Data.IVisualItem,System.Double},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="height">The height.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetHeight(System.Int32,System.Double)">
            <summary>
            Gets/Sets the Height/Width Style value, which indicates the item's height/width.
            If the style column (Styles.Height/Width) does not exist, the default value <c>0.0</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="height">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetPath(System.Windows.Media.Geometry,System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="path">The path.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetPath(System.Func{Lava.Data.IVisualItem,System.Windows.Media.Geometry},System.Func{Lava.Data.IVisualItem,System.Boolean})">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="path">The path.</param>
            <param name="filter">The filter, null means no filter.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.SetPath(System.Int32,System.Windows.Media.Geometry)">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <param name="path">The new style value.</param>
        </member>
        <member name="M:Lava.Data.VisualTable.GetPath(System.Int32)">
            <summary>
            Gets/Sets the Path Style value, which indicate a path object for this item, used by PathRender.
            If the style column (Styles.Path) does not exist, the default value <c>""</c> is used, and the Set function is ignored.
            </summary>
            <param name="trow">The row of item in the visual table.</param>
            <returns>
            The style value.
            </returns>
        </member>
        <member name="M:Lava.Data.VisualTable.PrintColumnNotExist(System.String)">
            <summary>
            If the column requested does not exist, print a warning message in debug mode.
            </summary>
            <param name="cname">The style nam.</param>
        </member>
        <member name="P:Lava.Data.VisualTable.Group">
            <summary>
            the group name of the visual item
            </summary>
        </member>
        <member name="P:Lava.Data.VisualTable.Visualization">
            <summary>
            the back-end Visualization manager
            </summary>
        </member>
        <member name="P:Lava.Data.VisualTable.Display">
            <summary>
            the back-end display
            </summary>
        </member>
        <member name="P:Lava.Data.VisualTable.DefaultLayer">
            <summary>
            Default layer of the items in the table.
            </summary>
        </member>
        <member name="P:Lava.Data.VisualTable.Items">
            <summary>
            Enumerate all valid visual items
            </summary>
            <returns>all valid visual items.</returns>
        </member>
        <member name="P:Lava.Data.VisualTable.AutoRepaint">
            <summary>
            Switch to turn on/off the auto repainting feature of visual table. In the render class, several style names
            are specified for it to work correctly. So the visual table can know when a look needs a repaint when its
            back-end item has a value updated. So if the switch is on, then a cell is updated in the visual table,
            the table will ask the corresponding render to check if a repaint is needed. If the render says the repaint
            is needed, then the table will ask the render to update the look. If the switch is off, then nothing is done,
            and the look maybe out of date. This switch is useful at the beginning of creating a visual table. You want
            to fill the whole table, and paint everything only once. Otherwise, when a cell is filled, a repaint is trigged,
            which is very expensive considering that you have a lot of cells to fill.
            </summary>
        </member>
        <member name="F:Lava.Data.VisualEdgeTable._visualGraph">
            <summary>
            back-end graph
            </summary>
        </member>
        <member name="F:Lava.Data.VisualEdgeTable._visualNodeTable">
            <summary>
            back-end visual node table
            </summary>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.#ctor(Lava.Data.ITable,Lava.Data.VisualGraph,Lava.Data.VisualTable,System.Int32)">
            <summary>
            Create a VisualEdgeTable with the back-end graph and the visual node table.
            And assign its default layer.
            </summary>
            <param name="parent">The parent.</param>
            <param name="graph">The back-end grap.</param>
            <param name="visualNodes">The visual node tabl.</param>
            <param name="defaultLayer">The default laye.</param>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.Dispose">
            <summary>
            Dispose the table, remove event handler
            </summary>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.SetChanged(System.String,Lava.Data.DataEvent)">
            <summary>
            When Graph mode changed, update event bind
            </summary>
            <param name="name">set nam.</param>
            <param name="type">data event typ.</param>
        </member>
        <member name="F:Lava.Data.VisualEdgeTable._srcItems">
            <summary>
            cache source node items
            </summary>
        </member>
        <member name="F:Lava.Data.VisualEdgeTable._tarItems">
            <summary>
            cache target node items
            </summary>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.SourceTargetChanged(Lava.Data.IColumn,System.Int32,System.Object)">
            <summary>
            When source/target changed in graph, clear cached source/target items
            </summary>
            <param name="col">The changed column.</param>
            <param name="idx">The row inde.</param>
            <param name="prev">The previous valu.</param>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.SourceItem(System.Int32)">
            <summary>
            Read the source node item of the edge
            </summary>
            <param name="erow">The edge row inde.</param>
            <returns>The source node item.</returns>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.IsValidLook(System.Int32)">
            <summary>
            Test if the edge if valid
            </summary>
            <param name="erow">The edge ro.</param>
            <returns>is it valid.</returns>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.TargetItem(System.Int32)">
            <summary>
            Read the target node item of the edge
            </summary>
            <param name="erow">The edge row inde.</param>
            <returns>The target node item.</returns>
        </member>
        <member name="M:Lava.Data.VisualEdgeTable.OnNodeXYChanged(Lava.Data.ITable,System.Int32,System.Int32,System.Int32,Lava.Data.DataEvent)">
            <summary>
            Update the edge look. When the x/y coordinate of source/target node changed.
            A part of Visual Pipeline
            </summary>
            <param name="sender">The node tabl.</param>
            <param name="startRow">The event influenced rows' start inde.</param>
            <param name="endRow">The event influenced rows' end inde.</param>
            <param name="colIdx">The event influenced column index. will be -1 if all columns are influence.</param>
            <param name="type">The event typ.</param>
        </member>
        <member name="P:Lava.Data.VisualGraph.EdgeTable">
            <summary>
            Gets or sets the edge table.
            </summary>
            <value>
            The edge table.
            </value>
        </member>
        <member name="P:Lava.Data.VisualGraph.NodeTable">
            <summary>
            Gets the node table.
            </summary>
            <value>
            The node table.
            </value>
        </member>
        <member name="P:Lava.Data.VisualGraph.Items">
            <summary>
            Gets all items in this instance.
            </summary>
            <returns>All items in this instance.</returns>
        </member>
        <member name="T:Lava.Data.VisualNodeTable">
            <summary>
            Visual node table for Graph in Visual mode
            
            </summary>
        </member>
        <member name="M:Lava.Data.VisualNodeTable.#ctor(Lava.Data.ITable,System.Int32)">
            <summary>
            Create Visual node table for the graph
            </summary>
            <param name="parent">The parent table.</param>
            <param name="defaultLayer">defautl layer for the tabl.</param>
        </member>
        <member name="T:Lava.Data.Manager.VisualEdgeManager">
            <summary>
            Manage visual edge items in visual graph
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.VisualEdgeManager.#ctor(Lava.Data.IGraph)">
            <summary>
            Create a VisualEdgeManager.
            Assign visual edge table, graph, visual node table
            </summary>
            <param name="graph">back-end grap.</param>
        </member>
        <member name="M:Lava.Data.Manager.VisualEdgeManager.BuildItem(System.Int32)">
            <summary>
            Create a VisualEdge
            </summary>
            <returns>The VisualEdge.</returns>
        </member>
        <member name="T:Lava.Data.Manager.VisualItemManager">
            <summary>
            Manage visual item in visual table
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.VisualItemManager.#ctor(Lava.Data.IVisualTable)">
            <summary>
            Create a VisualItemManager for the visual table
            </summary>
            <param name="table">The visual tabl.</param>
        </member>
        <member name="M:Lava.Data.Manager.VisualItemManager.BuildItem(System.Int32)">
            <summary>
            Create a visual item
            </summary>
            <returns>The visual item.</returns>
        </member>
        <member name="T:Lava.Data.Manager.VisualNodeManager">
            <summary>
            Manage visual node items in visual graph
            </summary>
        </member>
        <member name="M:Lava.Data.Manager.VisualNodeManager.#ctor(Lava.Data.IGraph)">
            <summary>
            Create a VisualNodeManager
            assign visual node table and back-end graph
            </summary>
            <param name="graph">back-end grap.</param>
        </member>
        <member name="M:Lava.Data.Manager.VisualNodeManager.BuildItem(System.Int32)">
            <summary>
            Create a VisualNode
            </summary>
            <returns>The VisualNode.</returns>
        </member>
        <member name="T:Lava.Util.BrushLib">
            <summary>
            A cached lib supporting solid color brushes. Please keep in mind that brushes are linked together. 
            The color inside a brush can actually be changed after it is created. It is totally up to you. 
            Here we merely make the caching system possible for LAVA.
            </summary>
        </member>
        <member name="M:Lava.Util.BrushLib.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new one to cache it.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The SolidColorBrush instance.</returns>
        </member>
        <member name="M:Lava.Util.BrushLib.FromArgb(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new one to cache it.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The SolidColorBrush instance.</returns>
        </member>
        <member name="M:Lava.Util.BrushLib.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new one to cache it.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The SolidColorBrush instance.</returns>
        </member>
        <member name="M:Lava.Util.BrushLib.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new one to cache it.
            </summary>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="l">The lightness, [0, 1].</param>
            <returns>
            The SolidColorBrush instance.
            </returns>
        </member>
        <member name="M:Lava.Util.BrushLib.FromAhsl(System.Byte,System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new one to cache it.
            </summary>
            <param name="a">The alpha value.</param>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="l">The lightness, [0, 1].</param>
            <returns>
            The SolidColorBrush instance.
            </returns>
        </member>
        <member name="M:Lava.Util.BrushLib.FromHsv(System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new one to cache it.
            </summary>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="v">The value, [0, 1].</param>
            <returns>
            The SolidColorBrush instance.
            </returns>
        </member>
        <member name="M:Lava.Util.BrushLib.FromAhsv(System.Byte,System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new one to cache it.
            </summary>
            <param name="a">The alpha value.</param>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="v">The value, [0, 1].</param>
            <returns>
            The SolidColorBrush instance.
            </returns>
        </member>
        <member name="M:Lava.Util.BrushLib.NewAlpha(System.Windows.Media.Brush,System.Int32)">
            <summary>
            Looks for the new SolidColorBrush that tweak the color with the same RGB but a new alpha value.
            </summary>
            <param name="brush">The brush that has to be a SolidColorBrush.</param>
            <param name="alpha">The new alpha value.</param>
            <returns>The new SolidColorBrush instance.</returns>
        </member>
        <member name="M:Lava.Util.BrushLib.RandomBrush(System.Object)">
            <summary>
            If the key is new, finds a solid brush for it from normal colors. 
            If the key has been accessed before, gets the cached brush for it.
            Please notice that the brush is not unique, we have only several candidates to choose from.
            </summary>
            <param name="key">The key for a color.</param>
            <returns>The brush associated to the key.</returns>
        </member>
        <member name="M:Lava.Util.BrushLib.FromColor(System.Windows.Media.Color)">
            <summary>
            Finds the correct color from the cache, if could not find, creates a new one and cache it.
            </summary>
            <param name="color">The color value.</param>
            <returns>
            The SolidColorBrush instance.
            </returns>
        </member>
        <member name="P:Lava.Util.BrushLib.Transparent">
            <summary>
            blank SolidColorBrush, which is #00000000
            </summary>
        </member>
        <member name="T:Lava.Util.ColorLib">
            <summary>
            none cache pool, just route FCL Color class and add some useful features
            
            </summary>
        </member>
        <member name="F:Lava.Util.ColorLib._BYTE_255">
            <summary>
            0xff
            </summary>
        </member>
        <member name="F:Lava.Util.ColorLib.HEX_PREFIX">
            <summary>
            char '#'
            </summary>
        </member>
        <member name="M:Lava.Util.ColorLib.NewAlpha(System.Windows.Media.Color,System.Int32)">
            <summary>
            Gets a new color instance with the same RGB, but different alpha.
            </summary>
            <param name="color">The color to get RGB from.</param>
            <param name="alpha">The new alpha value.</param>
            <returns>The new color instance.</returns>
        </member>
        <member name="M:Lava.Util.ColorLib.FromArgb(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new
            one and cache it. All the number should be 0.0 to 1.0, we do NOT test it though.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The color instance.</returns>
        </member>
        <member name="M:Lava.Util.ColorLib.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new
            one and cache it.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The color instance.</returns>
        </member>
        <member name="M:Lava.Util.ColorLib.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the correct color from the cache, if could not find it, creates a new
            one and cache it. All the number should be 0 to 255, we do NOT test it though.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The color instance.</returns>
        </member>
        <member name="M:Lava.Util.ColorLib.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache based on the HSL value, if not found, 
            creates a new one and cache it.
            </summary>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="l">The lightness, [0, 1].</param>
            <returns>The Color instance.</returns>
        </member>
        <member name="M:Lava.Util.ColorLib.FromAhsl(System.Byte,System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache based on the HSL value, if not found,
            creates a new one and cache it.
            </summary>
            <param name="a">The alpha value.</param>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="l">The lightness, [0, 1].</param>
            <returns>
            The Color instance.
            </returns>
        </member>
        <member name="M:Lava.Util.ColorLib.ToHsl(System.Windows.Media.Color,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the color instance into HSL components.
            </summary>
            <param name="color">The Color object (ARGB).</param>
            <param name="h">The hue, [0, 360`].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="l">The lightness, [0, 1].</param>
        </member>
        <member name="M:Lava.Util.ColorLib.FromHsv(System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache based on the HSV value, if not found,
            creates a new one and cache it.
            </summary>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="v">The value, [0, 1].</param>
            <returns>
            The Color instance.
            </returns>
        </member>
        <member name="M:Lava.Util.ColorLib.FromAhsv(System.Byte,System.Double,System.Double,System.Double)">
            <summary>
            Finds the correct color from the cache based on the HSV value, if not found,
            creates a new one and cache it.
            </summary>
            <param name="a">The alpha value.</param>
            <param name="h">The hue, [0, 360].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="v">The value, [0, 1].</param>
            <returns>
            The Color instance.
            </returns>
        </member>
        <member name="M:Lava.Util.ColorLib.ToHsv(System.Windows.Media.Color,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the color instance into HSL components.
            </summary>
            <param name="color">The Color object (ARGB).</param>
            <param name="h">The hue, [0, 360`].</param>
            <param name="s">The saturation, [0, 1].</param>
            <param name="v">The value, [0, 1].</param>
        </member>
        <member name="M:Lava.Util.ColorLib.FromHex(System.String)">
            <summary>
            Finds the color instance in the cache based on the hex presentation, which could
            be #RRGGBB or #AARRGGBB format. If not found, create one and cache it.
            </summary>
            <param name="hex">The hex color encoding.</param>
            <returns>The color instance.</returns>
        </member>
        <member name="M:Lava.Util.ColorLib.ToHex6(System.Windows.Media.Color)">
            <summary>
            Converts the color instance into #RRGGBB format string.
            </summary>
            <param name="color">The color instance.</param>
            <returns>The string encoding.</returns>
        </member>
        <member name="M:Lava.Util.ColorLib.ToHex8(System.Windows.Media.Color)">
            <summary>
            Converts the color instance into #AARRGGBB format string.
            </summary>
            <param name="color">The color instance.</param>
            <returns>The string encoding.</returns>
        </member>
        <member name="F:Lava.Util.ColorLib.Category10">
            <summary>
            Predefine 10 colors.
            </summary>
        </member>
        <member name="M:Lava.Util.ColorLib.RandomColor(System.Object)">
            <summary>
            If the key is new, finds a color for it from normal colors. If the key has been accessed before, gets the cached color for it.
            Please notice that the color is not unique, we have only several candidates to choose from.
            </summary>
            <param name="key">The key for a color.</param>
            <returns>The color associated to the key.</returns>
        </member>
        <member name="F:Lava.Util.ColorLib.BlankColor">
            <summary>
            #00000000
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
