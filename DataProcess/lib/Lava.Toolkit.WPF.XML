<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lava.Toolkit.WPF</name>
    </assembly>
    <members>
        <member name="P:Lava.Toolkit.Axis.AbstractScale.DomainStart">
            <summary>
            Get the start of data domain
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.AbstractScale.DomainEnd">
            <summary>
            Get the end of data domain
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.AbstractScale.RangeStart">
            <summary>
            Get the start of screen range
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.AbstractScale.RangeEnd">
            <summary>
            Get the end of screen range
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.AbstractScale.SpecificTicks">
            <summary>
            Get/Set a list of specific ticks, then the scale will only provide these ticks,
            but not to use builtin generating algorithm.
            * Notice * the array should be IComparable[]
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.AbstractScale.Formatter">
            <summary>
            Get/Set the formatter convert ticks to formatted text.
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.#ctor(System.Double,System.Double)">
            <summary>
            Construct a scale mapping domain to range.
            </summary>
            <param name="rStart"></param>
            <param name="rEnd"></param>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.GetTicksLabel(System.IComparable[])">
            <summary>
            generate nice ticks between DomainStart and DomainEnd, 
            the result ticks' number is closed to ticksCount.
            </summary>
            <param name="ticksCount">approximate number of ticks</param>
            <returns>an array contains all generated ticks</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.GetDomainValue(System.Double)">
            <summary>
            Get data domain value by its screen range position
            </summary>
            <param name="rangeValue">screen range value (not necessary in Range)</param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.GetRangeValue(System.IComparable)">
            <summary>
            get screen range position by its data
            </summary>
            <param name="domainValue">data domain value (not necessary in Domain)</param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.SetDomain(System.IComparable,System.IComparable)">
            <summary>
            set the new data domain and emit the domain change events
            </summary>
            <param name="start">new domain start</param>
            <param name="end">new domain end</param>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.SetRange(System.Double,System.Double)">
            <summary>
            set the new screen range and emit the range change events
            </summary>
            <param name="start">new range start</param>
            <param name="end">new range end</param>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.IsInDomain(System.IComparable)">
            <summary>
            check if the value is in current domain
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.IsInRange(System.Double)">
            <summary>
            check if the value is in current screen range
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.GetTicksAndPosition(System.Int32)">
            <summary>
            get ticks in current domain interval and their screen range position to display
            use (if exist) specific ticks or built-in generated ticks.
            </summary>
            <param name="ticksCount">approximate number of ticks</param>
            <returns>
            A 3-tuple of array, indicate the ticks, formatted labels of ticks and range positions
            If SpecificTicks exist, return a subset of them within the domain interval, and their position,
            otherwise, return a dictionary whose keys are generated by a built-in algorithm.
            </returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.IsEqualLength(System.Tuple{System.IComparable,System.IComparable},System.Tuple{System.IComparable,System.IComparable})">
            <summary>
            check if the origional domain has the same interval length with the new one.
            used to check if the domain has been scaled
            </summary>
            <param name="newDomain">2-tuple indicate the new domain</param>
            <param name="origionalDomain">2-tuple indicate the origional domain</param>
            <returns>if the two domain's size is equal, default method only return true when they are the same domain</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.IsValidDomain(System.IComparable,System.IComparable)">
            <summary>
            Check if the domain is valid when set domain
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.RangeFraction(System.Double)">
            <summary>
            Returns {rangeValue}'s progress in Range as double
            progress: the normalized data position [0, 1]
            </summary>
            <param name="domainValue">The value to judge.</param>
            <returns>The progress of {rangeValue}'s position.</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.RangeInterpolate(System.Double)">
            <summary>
            An Interpolator function for Range.
            </summary>
            <param name="progress">the normalized data position [0, 1]</param>
            <returns>the range value in the positiion {progress}.</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.DomainFraction(System.IComparable)">
            <summary>
            Returns {domainValue}'s progress in Domain as double
            progress: the normalized data position [0, 1]
            </summary>
            <param name="domainValue">The value to judge.</param>
            <returns>The progress of {domainValue}'s position.</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.DomainInterpolate(System.Double)">
            <summary>
            An Interpolator function for Domain.
            </summary>
            <param name="progress">the normalized data position [0, 1]</param>
            <returns>the domain value in the positiion {progress}.</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.AbstractScale.TicksGenerator(System.Int32)">
            <summary>
            main algorithm to generate ticks within domain
            </summary>
            <param name="ticksCount">approximate number of ticks</param>
            <returns></returns>
        </member>
        <member name="T:Lava.Toolkit.Axis.Axis.Orientation">
            <summary>
            OrigionalAxis's orientation relative to data display region.
            Left : vertical axis with left ticks
            Top : horizontal axis with above ticks
            Right : vertical axis with right ticks
            Bottom : horizontal axis with below ticks
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.Name">
            <summary>
            Get/Set the name of the axis,
            so the axis table will be group "Name(axis)"
            the tick table will be group "Name(tick)"
            the label table will be group "Name(label)"
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.WithScaleAnimation">
            <summary>
            Get/Set if animation should be invoked when scale the domain
            ** Notice ** : IsEqualLength should be override for a new type of AbstractScale to check if scaled
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.ScaleAnimationDuration">
            <summary>
            Get/Set the duration of scale animation
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.Ticks">
            <summary>
            Get/Set an approximate number of ticks
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.Position">
            <summary>
            Get/Set the screen origin of the axis
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.IsVisible">
            <summary>
            Get/Set if the whole axis is visible
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.IsAxisVisible">
            <summary>
            Get/Set if the axis line is visible
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.IsTickVisible">
            <summary>
            Get/Set if the tick lines are visible
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.IsLabelVisible">
            <summary>
            Get/Set if the tick labels are visible
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.AxisOrientation">
            <summary>
            Get/Set the orientation of the axis,
            Left, Right, Top, Bottom
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.Scale">
            <summary>
            Get/Set the main scale(mapper from domain to range)
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.AxisThickness">
            <summary>
            Get/Set the thickness of the axis line
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.AxisColor">
            <summary>
            Get/Set the color of the axis line
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.TickThickness">
            <summary>
            Get/Set the thickness of the tick lines
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.TickColor">
            <summary>
            Get/Set the color of the tick lines
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Lava.Toolkit.Axis.Axis.TickSize" -->
        <member name="P:Lava.Toolkit.Axis.Axis.InnerTickSize">
            <summary>
            Get/Set the length of the inner tick
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.OuterTickSize">
            <summary>
            Get/Set the length of the outer tick
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.Axis.LabelColor">
            <summary>
            Get/Set the color of the tick labels
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.#ctor(System.String,Lava.Visual.IDisplay,Lava.Toolkit.Axis.IScale,System.Windows.Point,Lava.Toolkit.Axis.Axis.Orientation)">
            <summary>
            create an Axis with
             WithScaleAnimation: false
             ScaleAnimationDuration: 350
             IsVisible(all visible option): true
             WithMask: true
             TickSize: Inner = 5.0, Outer = 5.0
             Ticks: 10
            </summary>
            <param name="name">the name of the axis</param>
            <param name="display">display to draw</param>
            <param name="scale">main scale data</param>
            <param name="position">screen position</param>
            <param name="orientation">axis's orientation, default Bottom</param>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.Clear">
            <summary>
            clear the axis line, ticks and labels
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.Layout">
            <summary>
            main algorithm to draw axis
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.GetPositionAndDomainValue(System.Windows.Point)">
            <summary>
            get current range value and its domain data by a physical screen position
            </summary>
            <param name="physicalPosition">physical position of the data, relative to the display which the axis belong to</param>
            <returns>a 2-tuple contains range value and domain value(IComparable)</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.ExtendTable(System.Int32)">
            <summary>
            Extend the visual table space to contain enough items.
            Regard the visual table as a memory pool
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.GetTickPosition(System.Double)">
            <summary>
            compute tick line's physical position by its range value
            </summary>
            <param name="pos">range value indicates its screen position</param>
            <returns>a 2-tuple contains start point and end point of tick line</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.GetLabelPosition(System.Double)">
            <summary>
            compute label's physical position by its range value
            </summary>
            <param name="pos">range value indicates its screen position</param>
            <returns>the center point of the label</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.RangeChangedEnd(System.Object,Lava.Toolkit.Axis.IntervalChangedEventArgs)">
            <summary>
            Redraw the axis when change its screen range.
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.DomainChangedStart(System.Object,Lava.Toolkit.Axis.IntervalChangedEventArgs)">
            <summary>
            If animation is invoked, skip the last animation to the final state
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.Axis.DomainChangedEnd(System.Object,Lava.Toolkit.Axis.IntervalChangedEventArgs)">
            <summary>
            main transition.
            </summary>
        </member>
        <member name="T:Lava.Toolkit.Axis.DateTimeScale">
            <summary>
            An implementation of scale of DateTime for axis
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.DateTimeScale.IsEqualLength(System.Tuple{System.IComparable,System.IComparable},System.Tuple{System.IComparable,System.IComparable})">
            <summary>
            Indicate if the span of the origional and the new domain is equal
            </summary>
            <param name="newDomain"></param>
            <param name="origionalDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.DateTimeScale.IsValidDomain(System.IComparable,System.IComparable)">
            <summary>
            Check if the domain is valid when set domain
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.DateTimeScale.DomainFraction(System.IComparable)">
            <summary>
            Returns {domainValue}'s progress in Domain as double
            progress: the normalized data position [0, 1]
            </summary>
            <param name="domainValue">The value to judge.</param>
            <returns>The progress of {domainValue}'s position.</returns>O
        </member>
        <member name="M:Lava.Toolkit.Axis.DateTimeScale.DomainInterpolate(System.Double)">
            <summary>
            An Interpolator function for Domain.
            </summary>
            <param name="progress">the normalized data position [0, 1]</param>
            <returns>the domain value in the positiion {progress}.</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.DateTimeScale.TicksGenerator(System.Int32)">
            <summary>
            Algorithm for get nice ticks between DomainStart and DomainEnd
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lava.Toolkit.Axis.IScale.DomainStart">
            <summary>
            Get the start of data domain
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.IScale.DomainEnd">
            <summary>
            Get the end of data domain
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.IScale.RangeStart">
            <summary>
            Get the start of screen range
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.IScale.RangeEnd">
            <summary>
            Get the end of screen range
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.IScale.SpecificTicks">
            <summary>
            Get/Set a list of specific ticks, then the scale will only provide these ticks,
            but not to use built-in generating algorithm
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Axis.IScale.Formatter">
            <summary>
            Get/Set the formatter convert ticks to formatted text.
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.IScale.GetDomainValue(System.Double)">
            <summary>
            Get data domain value by its screen range position
            </summary>
            <param name="rangeValue">screen range value (not necessary in Range)</param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.IScale.GetRangeValue(System.IComparable)">
            <summary>
            get screen range position by its data
            </summary>
            <param name="domainValue">data domain value (not necessary in Domain)</param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.IScale.GetTicks(System.Int32)">
            <summary>
            generate nice ticks between DomainStart and DomainEnd, 
            the result ticks' number is closed to ticksCount.
            use (if exist) specific ticks or built-in generated ticks.
            </summary>
            <param name="ticksCount">approximate number of ticks</param>
            <returns>an array contains all generated ticks</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.IScale.GetTicksLabel(System.IComparable[])">
            <summary>
            format all ticks to a readable string used to show
            </summary>
            <param name="ticks">ticks array</param>
            <returns>an array contains all label strings</returns>
        </member>
        <member name="E:Lava.Toolkit.Axis.IScale.DomainChangedStart">
            <summary>
            Occur when the SetDomain is just invoked.
            </summary>
        </member>
        <member name="E:Lava.Toolkit.Axis.IScale.DomainChangedEnd">
            <summary>
            Occur after the SetDomain finished.
            </summary>
        </member>
        <member name="E:Lava.Toolkit.Axis.IScale.RangeChangedStart">
            <summary>
            Occur when the SetRange is just invoked.
            </summary>
        </member>
        <member name="E:Lava.Toolkit.Axis.IScale.RangeChangedEnd">
            <summary>
            Occur after the SetRange finished.
            </summary>
        </member>
        <member name="T:Lava.Toolkit.Axis.LinearDoubleScale">
            <summary>
            An implementation of linear double scale for axis
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Axis.LinearDoubleScale.IsEqualLength(System.Tuple{System.IComparable,System.IComparable},System.Tuple{System.IComparable,System.IComparable})">
            <summary>
            Indicate if the span of the origional and the new domain is equal
            </summary>
            <param name="newDomain"></param>
            <param name="origionalDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.LinearDoubleScale.DomainFraction(System.IComparable)">
            <summary>
            Returns {domainValue}'s progress in Domain as double
            progress: the normalized data position [0, 1]
            </summary>
            <param name="domainValue">The value to judge.</param>
            <returns>The progress of {domainValue}'s position.</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.LinearDoubleScale.DomainInterpolate(System.Double)">
            <summary>
            An Interpolator function for Domain.
            </summary>
            <param name="progress">the normalized data position [0, 1]</param>
            <returns>the domain value in the positiion {progress}.</returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.LinearDoubleScale.TicksGenerator(System.Int32)">
            <summary>
            Algorithm for get nice ticks between DomainStart and DomainEnd
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.LinearDoubleScale.DefaultFormatter(System.Object)">
            <summary>
            Provide a default formatter
            </summary>
            <param name="domainValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.Axis.ScaleUtil.LinearTick(System.Double,System.Double,System.Int32)">
            <summary>
            Compute a nice tick linear tick list
            * Notice * the from should lower than to
            </summary>
            <param name="from">interval start</param>
            <param name="to">interval end</param>
            <param name="cnt">desired count of ticks</param>
            <returns>3-tuple: from, to, step</returns>
        </member>
        <member name="M:Lava.Toolkit.Force.AbstractForce.Init(Lava.Toolkit.Force.ForceSimulator)">
            Initialize this force function. This default implementation does nothing.
            Subclasses should override this method with any needed initialization.
            @param fsim the encompassing ForceSimulator
        </member>
        <member name="M:Lava.Toolkit.Force.AbstractForce.IsItemForce">
            Returns false.
        </member>
        <member name="M:Lava.Toolkit.Force.AbstractForce.IsSpringForce">
            Returns false.
        </member>
        <member name="M:Lava.Toolkit.Force.AbstractForce.GetForce(Lava.Toolkit.Force.ForceItem)">
            Throws an NotSupportedException.
        </member>
        <member name="M:Lava.Toolkit.Force.AbstractForce.GetForce(Lava.Toolkit.Force.Spring)">
            Throws an NotSupportedException.
        </member>
        <member name="M:Lava.Toolkit.Force.DragForce.#ctor(System.Single)">
            Create a new DragForce.
            @param dragCoeff the drag co-efficient
        </member>
        <member name="M:Lava.Toolkit.Force.DragForce.#ctor">
            Create a new DragForce with default drag co-efficient.
        </member>
        <member name="M:Lava.Toolkit.Force.DragForce.IsItemForce">
            Returns true.
        </member>
        <member name="M:Lava.Toolkit.Force.Force.Init(Lava.Toolkit.Force.ForceSimulator)">
            Initialize this force function.
            @param fsim the encompassing ForceSimulator
        </member>
        <member name="M:Lava.Toolkit.Force.Force.GetParameterCount">
            Returns the number of parameters (e.g., gravitational constant or
            spring force coefficient) affecting this force function. 
            @return the number of parameters
        </member>
        <member name="M:Lava.Toolkit.Force.Force.GetParameter(System.Int32)">
            Returns the specified, numbered parameter.
            @param i the index of the parameter to return
            @return the parameter value
        </member>
        <member name="M:Lava.Toolkit.Force.Force.GetMinValue(System.Int32)">
            Get the suggested minimum value for a parameter. This value is not
            strictly enforced, but is used by interface components that allow force
            parameters to be varied.
            @param param the parameter index
            @return the suggested minimum value.
        </member>
        <member name="M:Lava.Toolkit.Force.Force.GetMaxValue(System.Int32)">
            Get the suggested maximum value for a parameter. This value is not
            strictly enforced, but is used by interface components that allow force
            parameters to be varied.
            @param param the parameter index
            @return the suggested maximum value.
        </member>
        <member name="M:Lava.Toolkit.Force.Force.GetParameterName(System.Int32)">
            Gets the text name of the requested parameter.
            @param i the index of the parameter
            @return a String containing the name of this parameter
        </member>
        <member name="M:Lava.Toolkit.Force.Force.SetParameter(System.Int32,System.Single)">
            Sets the specified parameter value.
            @param i the index of the parameter
            @param val the new value of the parameter
        </member>
        <member name="M:Lava.Toolkit.Force.Force.SetMinValue(System.Int32,System.Single)">
            Set the suggested minimum value for a parameter. This value is not
            strictly enforced, but is used by interface components that allow force
            parameters to be varied.
            @param i the parameter index
            @param val the suggested minimum value to use
        </member>
        <member name="M:Lava.Toolkit.Force.Force.SetMaxValue(System.Int32,System.Single)">
            Set the suggested maximum value for a parameter. This value is not
            strictly enforced, but is used by interface components that allow force
            parameters to be varied.
            @param i the parameter index
            @return the suggested maximum value to use
        </member>
        <member name="M:Lava.Toolkit.Force.Force.IsSpringForce">
            Indicates if this force function will compute forces
            on Spring instances.
            @return true if this force function processes Spring instances 
        </member>
        <member name="M:Lava.Toolkit.Force.Force.IsItemForce">
            Indicates if this force function will compute forces
            on ForceItem instances
            @return true if this force function processes Force instances 
        </member>
        <member name="M:Lava.Toolkit.Force.Force.GetForce(Lava.Toolkit.Force.ForceItem)">
            Updates the force calculation on the given ForceItem
            @param item the ForceItem on which to compute updated forces
        </member>
        <member name="M:Lava.Toolkit.Force.Force.GetForce(Lava.Toolkit.Force.Spring)">
            Updates the force calculation on the given Spring. The ForceItems
            attached to Spring will have their force values updated appropriately.
            @param spring the Spring on which to compute updated forces
        </member>
        <member name="M:Lava.Toolkit.Force.ForceItem.#ctor">
            Create a new ForceItem.
        </member>
        <member name="M:Lava.Toolkit.Force.ForceItem.Clone">
            Clone a ForceItem.
        </member>
        <member name="F:Lava.Toolkit.Force.ForceItem.mass">
            The mass value of this ForceItem. 
        </member>
        <member name="F:Lava.Toolkit.Force.ForceItem.force">
            The values of the forces acting on this ForceItem. 
        </member>
        <member name="F:Lava.Toolkit.Force.ForceItem.velocity">
            The velocity values of this ForceItem. 
        </member>
        <member name="F:Lava.Toolkit.Force.ForceItem.location">
            The location values of this ForceItem. 
        </member>
        <member name="F:Lava.Toolkit.Force.ForceItem.plocation">
            The previous location values of this ForceItem. 
        </member>
        <member name="F:Lava.Toolkit.Force.ForceItem.k">
            Temporary variables for Runge-Kutta integration 
        </member>
        <member name="F:Lava.Toolkit.Force.ForceItem.l">
            Temporary variables for Runge-Kutta integration 
        </member>
        <member name="M:Lava.Toolkit.Force.ForceItem.IsValid(Lava.Toolkit.Force.ForceItem)">
            Checks a ForceItem to make sure its values are all valid numbers
            (i.e., not NaNs).
            @param item the item to check
            @return true if all the values are valid, false otherwise
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.#ctor">
            Create a new, empty ForceSimulator. A RungeKuttaIntegrator is used
            by default.
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.#ctor(Lava.Toolkit.Force.Integrator)">
            Create a new, empty ForceSimulator.
            @param integr the Integrator to use
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.GetSpeedLimit">
            Get the speed limit, or maximum velocity value allowed by this
            simulator.
            @return the "speed limit" maximum velocity value
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.SetSpeedLimit(System.Single)">
            Set the speed limit, or maximum velocity value allowed by this
            simulator.
            @param limit the "speed limit" maximum velocity value to use
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.GetIntegrator">
            Get the Integrator used by this simulator.
            @return the Integrator
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.SetIntegrator(Lava.Toolkit.Force.Integrator)">
            Set the Integrator used by this simulator.
            @param intgr the Integrator to use
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.Clear">
            Clear this simulator, removing all ForceItem and Spring instances
            for the simulator.
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.AddForce(Lava.Toolkit.Force.Force)">
            Add a new Force function to the simulator.
            @param f the Force function to add
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.GetForces">
            Get an array of all the Force functions used in this simulator.
            @return an array of Force functions
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.AddItem(Lava.Toolkit.Force.ForceItem)">
            Add a ForceItem to the simulation.
            @param item the ForceItem to add
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.RemoveItem(Lava.Toolkit.Force.ForceItem)">
            Remove a ForceItem to the simulation.
            @param item the ForceItem to remove
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.GetItems">
            Get an iterator over all registered ForceItems.
            @return an iterator over the ForceItems.
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.AddSpring(Lava.Toolkit.Force.ForceItem,Lava.Toolkit.Force.ForceItem)">
            Add a Spring to the simulation.
            @param item1 the first endpoint of the spring
            @param item2 the second endpoint of the spring
            @return the Spring added to the simulation
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.AddSpring(Lava.Toolkit.Force.ForceItem,Lava.Toolkit.Force.ForceItem,System.Single)">
            Add a Spring to the simulation.
            @param item1 the first endpoint of the spring
            @param item2 the second endpoint of the spring
            @param length the spring length
            @return the Spring added to the simulation
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.AddSpring(Lava.Toolkit.Force.ForceItem,Lava.Toolkit.Force.ForceItem,System.Single,System.Single)">
            Add a Spring to the simulation.
            @param item1 the first endpoint of the spring
            @param item2 the second endpoint of the spring
            @param coeff the spring coefficient
            @param length the spring length
            @return the Spring added to the simulation
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.getSprings">
            Get an iterator over all registered Springs.
            @return an iterator over the Springs.
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.RunSimulator(System.Int64)">
            Run the simulator for one timestep.
            @param timestep the span of the timestep for which to run the simulator
        </member>
        <member name="M:Lava.Toolkit.Force.ForceSimulator.Accumulate">
            Accumulate all forces acting on the items in this simulation
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.#ctor">
            Create a new NBodyForce with default parameters.
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.#ctor(System.Single,System.Single,System.Single)">
            Create a new NBodyForce.
            @param gravConstant the gravitational constant to use. Nodes will
            attract each other if this value is positive, and will repel each
            other if it is negative.
            @param minDistance the distance within which two particles will
            interact. If -1, the value is treated as infinite.
            @param theta the Barnes-Hut parameter theta, which controls when
            an aggregated mass is used rather than drilling down to individual
            item mass values.
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.IsItemForce">
            Returns true.
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.SetBounds(System.Single,System.Single,System.Single,System.Single)">
            Set the bounds of the region for which to compute the n-body simulation
            @param xMin the minimum x-coordinate
            @param yMin the minimum y-coordinate
            @param xMax the maximum x-coordinate
            @param yMax the maximum y-coordinate
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.Clear">
            Clears the quadtree of all entries.
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.Init(Lava.Toolkit.Force.ForceSimulator)">
            Initialize the simulation with the provided enclosing simulation. After
            this call has been made, the simulation can be queried for the 
            n-body force acting on a given item.
            @param fsim the enclosing ForceSimulator
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.Insert(Lava.Toolkit.Force.ForceItem)">
            Inserts an item into the quadtree.
            @param item the ForceItem to add.
            @throws IllegalStateException if the current location of the item is
             outside the bounds of the quadtree
        </member>
        <member name="M:Lava.Toolkit.Force.NBodyForce.GetForce(Lava.Toolkit.Force.ForceItem)">
            Calculates the force vector acting on the given item.
            @param item the ForceItem for which to compute the force
        </member>
        <member name="T:Lava.Toolkit.Force.NBodyForce.QuadTreeNode">
            Represents a node in the quadtree.
        </member>
        <member name="T:Lava.Toolkit.Force.NBodyForce.QuadTreeNodeFactory">
            Helper class to minimize number of object creations across multiple
            uses of the quadtree.
        </member>
        <member name="M:Lava.Toolkit.Force.Spring.GetFactory">
            Retrieve the SpringFactory instance, which serves as an object pool
            for Spring instances.
            @return the Spring Factory
        </member>
        <member name="M:Lava.Toolkit.Force.Spring.#ctor(Lava.Toolkit.Force.ForceItem,Lava.Toolkit.Force.ForceItem,System.Single,System.Single)">
            Create a new Spring instance
            @param fi1 the first ForceItem endpoint
            @param fi2 the second ForceItem endpoint
            @param k the spring tension co-efficient
            @param len the spring's resting length
        </member>
        <member name="F:Lava.Toolkit.Force.Spring.item1">
            The first ForceItem endpoint 
        </member>
        <member name="F:Lava.Toolkit.Force.Spring.item2">
            The second ForceItem endpoint 
        </member>
        <member name="F:Lava.Toolkit.Force.Spring.length">
            The spring's resting length 
        </member>
        <member name="F:Lava.Toolkit.Force.Spring.coeff">
            The spring tension co-efficient 
        </member>
        <member name="T:Lava.Toolkit.Force.Spring.SpringFactory">
            The SpringFactory is responsible for generating Spring instances
            and maintaining an object pool of Springs to reduce garbage collection
            overheads while force simulations are running.
        </member>
        <member name="M:Lava.Toolkit.Force.Spring.SpringFactory.getSpring(Lava.Toolkit.Force.ForceItem,Lava.Toolkit.Force.ForceItem,System.Single,System.Single)">
            Get a Spring instance and set it to the given parameters.
        </member>
        <member name="M:Lava.Toolkit.Force.Spring.SpringFactory.Reclaim(Lava.Toolkit.Force.Spring)">
            Reclaim a Spring into the object pool.
        </member>
        <member name="M:Lava.Toolkit.Force.SpringForce.#ctor(System.Single,System.Single)">
            Create a new SpringForce.
            @param springCoeff the default spring co-efficient to use. This will
            be used if the spring's own co-efficient is less than zero.
            @param defaultLength the default spring length to use. This will
            be used if the spring's own length is less than zero.
        </member>
        <member name="M:Lava.Toolkit.Force.SpringForce.#ctor">
            Constructs a new SpringForce instance with default parameters.
        </member>
        <member name="M:Lava.Toolkit.Force.SpringForce.IsSpringForce">
            Returns true.
        </member>
        <member name="M:Lava.Toolkit.Force.SpringForce.GetForce(Lava.Toolkit.Force.Spring)">
            Calculates the force vector acting on the items due to the given spring.
            @param s the Spring for which to compute the force
        </member>
        <member name="M:Lava.Toolkit.LineChart.LineChart.Resize(System.Windows.Rect)">
            <summary>
            resize the panel
            </summary>
            <param name="rect">reset the new siz.</param>
        </member>
        <member name="M:Lava.Toolkit.LineChart.LineChart.Setup(Lava.Data.VisualTable,System.String,System.String,System.String,System.String)">
            <summary>
            set the line chart data
            </summary>
            <param name="table">visual table contains data and rendere.</param>
            <param name="xKey">X axis ke.</param>
            <param name="yKey">Y axis ke.</param>
            <param name="LabelKey">Label ke.</param>
            <param name="colorKey">color ke.</param>
        </member>
        <member name="M:Lava.Toolkit.LineChart.LineChart.SetLabelVisibility(System.Int32,System.Boolean)">
            <summary>
            set label visibility
            </summary>
            <param name="row">row inde.</param>
            <param name="value">boolean valu.</param>
        </member>
        <member name="M:Lava.Toolkit.LineChart.LineChart.ResetPanel">
            <summary>
            reset scatter plot to show all nodes
            </summary>
        </member>
        <member name="M:Lava.Toolkit.LineChart.LineChart.ResetLayout">
            <summary>
            layout the labels
            </summary>
        </member>
        <member name="M:Lava.Toolkit.LineChart.LineChart.UpdateInCurrentAxis">
            <summary>
            Update talbe without label layout
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.Axis.#ctor(Lava.Visual.IDisplay,System.Windows.Rect)">
            <summary>
            Initialize axis
            </summary>
            <param name="display"> control panel for axis to display.</param>
            <param name="rect">rectangle space for drawing axis in displa.</param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.Axis.ResetSize(System.Windows.Rect)">
            <summary>
            resize the axis based on input
            </summary>
            <param name="width">width of the axi.</param>
            <param name="height">height of the axi.</param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.Axis.SetRange(Lava.Toolkit.ScatterPlot.AxisRange,Lava.Toolkit.ScatterPlot.AxisRange)">
            <summary>
            update the data range in axis
            </summary>
            <param name="rangeX"></param>
            <param name="rangeY"></param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.Axis.IsInAxisRange(System.Windows.Point)">
            <summary>
            check whether the point is in axis range
            </summary>
            <param name="pt">data point not the scree.</param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.Axis.GetScreenLocation(System.Windows.Point)">
            <summary>
            locate data value to screen position
            </summary>
            <param name="pt"></param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.Axis.GetDataLocation(System.Windows.Point)">
            <summary>
            locate screen position to data value
            </summary>
            <param name="pt"></param>
            <returns>.</returns>
        </member>
        <member name="T:Lava.Toolkit.ScatterPlot.AxisRange">
            <summary>
            Min max double range
            </summary>
        </member>
        <member name="T:Lava.Toolkit.ScatterPlot.AxisData">
            <summary>
            Axis can be horizental or vertical
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.Layout(Lava.Data.VisualTable,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.Double,System.Double},System.String})">
            <summary>
            set the scatter plot data
            </summary>
            <param name="table">visual table contains data and rendere.</param>
            <param name="xKey">X axis ke.</param>
            <param name="yKey">Y axis ke.</param>
            <param name="SizeKey">Size ke.</param>
            <param name="LabelKey">Label ke.</param>
            <param name="dicRangeShape">value range determins shap.</param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.SetLabelVisibility(System.Int32,System.Boolean)">
            <summary>
            set label visibility
            </summary>
            <param name="row">row inde.</param>
            <param name="value">boolean valu.</param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.ResetPanel">
            <summary>
            reset scatter plot to show all nodes
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.Resize(System.Windows.Rect)">
            <summary>
            resize the panel
            </summary>
            <param name="width">reset the widt.</param>
            <param name="height">reset the heigh.</param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.LayoutLabelInCurrentAxis">
            <summary>
            layout labels in current axis
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.UpdateInCurrentAxis">
            <summary>
            Update talbe without label layout
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.LayoutLabel">
            <summary>
            layout the labels
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ScatterPlotLayout.ScatterPlotMoving">
            <summary>
            update the visual table based on axis
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.LabelPlacer.PlaceLabels(System.Windows.Rect,Lava.Data.VisualTable,System.Boolean)">
            <summary>
            Layout scatter plot lables.
            </summary>
            <param name="boundaryRect"> Rectangle display area.</param>
            <param name="visualTable"> visible table contains data.</param>
        </member>
        <member name="T:Lava.Toolkit.ScatterPlot.BDEventGenerator">
            <summary>
            Generate the boundary events for sweeping line search.
            It required the sample points provided in circleclock direction.
            </summary>
        </member>
        <member name="F:Lava.Toolkit.ScatterPlot.BDEventGenerator.NUMBER_TOLERENCE">
            <summary>
            Tolerance for compare the double variable.
            </summary>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.BDEventGenerator.ConstructBDPoints(System.Windows.Point[],System.Collections.Generic.List{Lava.Toolkit.ScatterPlot.BoundaryEventPoint})">
            <summary>
            Construct the event trigger point from sample points on the boundary.
            </summary>
            <param name="points"></param>
            <param name="eventPoints"></param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.BDEventGenerator.BuildSegmentEvent(System.Windows.Point[])">
            <summary>
            Build the SegEvent from sample points from boundary.
            It required the point to be clockwise and started from the least x-coordinate point.
            </summary>
            <param name="points">sample points on boundar.</param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.SetSegmentEvents(Lava.Toolkit.ScatterPlot.SegEvent[])">
            <summary>
            Setting the segment event of boundary.
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.BlockInterval(System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Block the intervals with fixed range
            </summary>
            <param name="intervals"></param>
            <param name="sx"></param>
            <param name="tx"></param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.GeneratePreferSegEvent(System.Double)">
            <summary>
            Generate the new segment event in the line of <code>yLine</code>, and return the index of events.
            If the yline is aligned with existed event segment, use the exsited one.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.PlaceRectangles(System.Windows.Rect[],System.Boolean[],System.Windows.Point[])">
            <summary>
            Layout keyword according to the segment event.
            </summary>
            <param name="rects">The boundary of keywor.</param>
            <param name="displaced">whether the rectangle is place.</param>
            <param name="prefers">prefered location for each rectangl.</param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.SearchCenterLine(System.Double,System.Double,System.Int32,System.Windows.Point)">
            <summary>
            Searching the suitable position on the center line of prefered location.
            </summary>
            <param name="w"></param>
            <param name="hh"></param>
            <param name="centerEventIndex"></param>
            <param name="center"></param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.FillInterval(System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Find the position which is the best place to displace word in the intervals
            </summary>
            <param name="interval"></param>
            <param name="width"></param>
            <param name="cx"></param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.UpdateEvent(System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Update the interval array and marked the rectangle region as forbidden.
            </summary>
            <param name="rect"></param>
            <param name="x"></param>
            <param name="eIndex"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.UpdateInterval(System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Update Interval by filled with the rect at x
            </summary>
            <param name="interval"></param>
            <param name="w"></param>
            <param name="x"></param>
        </member>
        <member name="M:Lava.Toolkit.ScatterPlot.ConstrainedTagCloudAlg.IntersectInterval(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Intersect interval orig and other. deposite the result in orig interval.
            </summary>
            <param name="orig"></param>
            <param name="other"></param>
        </member>
        <member name="T:Lava.Toolkit.TreeMap.ITreeProxy`1">
            <summary>
            Data used by the algorithm.
            </summary>
            <typeparam name="T">The type of the tree nodes.</typeparam>
        </member>
        <member name="P:Lava.Toolkit.TreeMap.ITreeProxy`1.Root">
            <summary>
            Root of the tree model.
            </summary>
        </member>
        <member name="M:Lava.Toolkit.TreeMap.ITreeProxy`1.GetChildren(`0)">
            <summary>
            The children of a given node.
            </summary>
            <param name="node">The node to ask for children.</param>
            <returns>The children collection. Null or empty means leaf nodes.</returns>
        </member>
        <member name="M:Lava.Toolkit.TreeMap.ITreeProxy`1.GetWeight(`0)">
            <summary>
            Get the weight of a given node, which is mapped to the area of the representative rectangle.
            Notice: only the leaf nodes will be asked. For internal nodes, their weights are aggregated from their children automatically!
            </summary>
            <param name="node">The leaf node to ask for weight.</param>
            <returns>The weight.</returns>
        </member>
        <member name="M:Lava.Toolkit.TreeMap.TreeMapAlg`1.Layout(System.Windows.Rect,Lava.Toolkit.TreeMap.ITreeProxy{`0},System.Double,System.Double)">
            <summary>
            Build the data part of the TreeMap.
            </summary>
            <param name="boundingBox">The rectangle area that the treemap should be placed in.</param>
            <param name="proxy">The tree structure with the weight column to be visualized.</param>        
            <param name="edgeWidth">The initial gap width between the nodes of depth 1.</param>
            <param name="widthDecayFactor">The gap width shrink while nodes go deeper. The gap width between the nodes of depth i is edgeWidth * widthDecayFactor^i. </param>
            <returns>For each node in the tree, gets the location for the corresponding rectangle and the thickness of its boundary.</returns>
        </member>
        <member name="F:Lava.Toolkit.TreeMap.OldTreeMap.tree">
            <summary>
            All the data about the tree.
            </summary>
        </member>
        <member name="F:Lava.Toolkit.TreeMap.OldTreeMap.NodeRectangleColumn">
            <summary>
            The name of column that stores the rectangle for the node. (Type Rect)
            </summary>
        </member>
        <member name="F:Lava.Toolkit.TreeMap.OldTreeMap.Area">
            <summary>
            The name of column that stores the area of the rectangle for the node. (Type Double)
            </summary>
        </member>
        <member name="F:Lava.Toolkit.TreeMap.OldTreeMap.EdgeStroke">
            <summary>
            The name of column that stores the edge strokewidth of the rectangle for the node. (Type Double)
            </summary>
        </member>
        <member name="M:Lava.Toolkit.TreeMap.OldTreeMap.#ctor(System.Windows.Rect,Lava.Data.Tree,System.String,System.Double,System.Double)">
            <summary>
            Build the data part of the TreeMap.
            </summary>
            <param name="boundingBox">The rectangle area of the treemap should be placed in.</param>
            <param name="treeIn">The tree structure with the weight column to be visualized.</param>
            <param name="weightColumn">The Name of the column storing the weight of each node.</param>
            <param name="edgeWidthIn">The initial edge stroke width for the root node</param>
            <param name="edgeDecayIn">The ratio in which the of edge stroke width decrease. 
             <para>
               The nodes in deep i has the edge stroke width of edgeWidthIn*edgeDecayIn^i.
             </para>
            </param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.VNode.ProcessDataEvent(Lava.Toolkit.Voronoi.Helper.VDataEvent,Lava.Toolkit.Voronoi.Helper.VNode,Lava.Toolkit.Voronoi.Helper.FortuneVoronoiGraph,System.Double,Lava.Toolkit.Voronoi.Helper.VDataNode[]@)">
            <summary>
            Will return the new root (unchanged except in start-up)
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.BinaryPriorityQueue.Push(System.Object)">
            <summary>
            Push an object onto the PQ
            </summary>
            <param name="O">The new objec.</param>
            <returns>The index in the list where the object is _now_. This will change when objects are taken from or put onto the PQ.</returns>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.BinaryPriorityQueue.Pop">
            <summary>
            Get the smallest object and remove it.
            </summary>
            <returns>The smallest object.</returns>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.BinaryPriorityQueue.Update(System.Int32)">
            <summary>
            Notify the PQ that the object at position i has changed
            and the PQ needs to restore order.
            Since you dont have access to any indexes (except by using the
            explicit IList.this) you should not call this function without knowing exactly
            what you do.
            </summary>
            <param name="i">The index of the changed object.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.BinaryPriorityQueue.Peek">
            <summary>
            Get the smallest object without removing it.
            </summary>
            <returns>The smallest object.</returns>
        </member>
        <member name="T:Lava.Toolkit.Voronoi.Helper.FortuneVector">
            <summary>
            A vector class, implementing all interesting features of vectors
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Voronoi.Helper.FortuneVector.Precision">
            <summary>
            Global precision for any calculation
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.#ctor(System.Int32)">
            <summary>
            Build a new vector
            </summary>
            <param name="dim">The dimension.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.#ctor(System.Double[])">
            <summary>
            Build a new vector
            </summary>
            <param name="X">The elements of the vector.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.#ctor(Lava.Toolkit.Voronoi.Helper.FortuneVector)">
            <summary>
            Build a new vector as a copy of an existing one
            </summary>
            <param name="O">The existing vector.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.#ctor(System.String)">
            <summary>
            Build a new vector from a string
            </summary>
            <param name="S">A string, as produced by ToString.</param>
        </member>
        <member name="P:Lava.Toolkit.Voronoi.Helper.FortuneVector.Item(System.Int32)">
            <summary>
            Gets or sets the value of the vector at the given index
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Voronoi.Helper.FortuneVector.Dim">
            <summary>
            The dimension of the vector
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Voronoi.Helper.FortuneVector.SquaredLength">
            <summary>
            The squared length of the vector
            </summary>
        </member>
        <member name="P:Lava.Toolkit.Voronoi.Helper.FortuneVector.ElementSum">
            <summary>
            The sum of all elements in the vector
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Randomize(System.Double,System.Double)">
            <summary>
            Reset all elements with ransom values from the given range
            </summary>
            <param name="Min">Mi.</param>
            <param name="Max">Ma.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Randomize(Lava.Toolkit.Voronoi.Helper.FortuneVector[])">
            <summary>
            Reset all elements with ransom values from the given range
            </summary>
            <param name="MinMax">MinMax[0] - Min
            MinMax[1] - Ma.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Multiply(System.Double)">
            <summary>
            Scale all elements by r
            </summary>
            <param name="r">The scala.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Add(Lava.Toolkit.Voronoi.Helper.FortuneVector)">
            <summary>
            Add another vector
            </summary>
            <param name="V">.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Add(System.Double)">
            <summary>
            Add a constant to all elements
            </summary>
            <param name="d">The constant.</param>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.ToString">
            <summary>
            Convert the vector into a reconstructable string representation
            </summary>
            <returns>A string from which the vector can be rebuilt.</returns>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Equals(System.Object)">
            <summary>
            Compares this vector with another one
            </summary>
            <param name="obj"></param>
            <returns>.</returns>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.GetHashCode">
            <summary>
            Retrieves a hashcode that is dependent on the elements
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.op_Subtraction(Lava.Toolkit.Voronoi.Helper.FortuneVector,Lava.Toolkit.Voronoi.Helper.FortuneVector)">
            <summary>
            Subtract two vectors
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.op_Addition(Lava.Toolkit.Voronoi.Helper.FortuneVector,Lava.Toolkit.Voronoi.Helper.FortuneVector)">
            <summary>
            Add two vectors
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.op_Multiply(Lava.Toolkit.Voronoi.Helper.FortuneVector,Lava.Toolkit.Voronoi.Helper.FortuneVector)">
            <summary>
            Get the scalar product of two vectors
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.op_Multiply(Lava.Toolkit.Voronoi.Helper.FortuneVector,System.Double)">
            <summary>
            Scale one vector
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.op_Multiply(System.Double,Lava.Toolkit.Voronoi.Helper.FortuneVector)">
            <summary>
            Scale one vector
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.op_Explicit(Lava.Toolkit.Voronoi.Helper.FortuneVector)~System.Double[]">
            <summary>
            Interprete the vector as a double-array
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Dist(Lava.Toolkit.Voronoi.Helper.FortuneVector,Lava.Toolkit.Voronoi.Helper.FortuneVector)">
            <summary>
            Get the distance of two vectors
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.CompareTo(System.Object)">
            <summary>
            Compare two vectors
            </summary>
        </member>
        <member name="M:Lava.Toolkit.Voronoi.Helper.FortuneVector.Clone">
            <summary>
            Get a copy of one vector
            </summary>
            <returns>.</returns>
        </member>
        <member name="T:Lava.Toolkit.StackedGraph.StackedGraphLayout">
            <summary>
            Implements layout algorithms for stackedgraph
            
            1.User gives the 2-dimension array as input, which indicates (row,column,value)[(x,y,height)]
            2.The value(height) will be used to calculate the thickness of eache layer
            3.The Layout's result is a collection of geometry object which depicts the shapes of corresponding layer 
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._config">
            <summary>
            user configuration for layout
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._height">
            <summary>
            2-dimension data need to be visualized by stackedgraph
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._refineHeight">
            <summary>
            2-dimenion data after scaling on _height
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._baseline">
            <summary>
            the baseline of the stackedgraph generated by optimizing algorithm
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._layerGeometry">
            <summary>
            array of geometry object which depicts the shapes of corresponding layer 
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._layerTopPoints">
            <summary>
            list of top points array
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._layerBottomPoints">
            <summary>
            list of bottom points
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._maxY">
            <summary>
            the max y of all layer's bottom ponits
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphLayout._totalLayerHeight">
            <summary>
            the total height of stackedgraph
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.Config">
            <summary>
            user configuration for layout
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.Height">
            <summary>
            height value representated data
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.BaseLine">
            <summary>
            get baseline
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.LayerGeometry">
            <summary>
            get layer geometry
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.LayerTopPoints">
            <summary>
            get layer top ponits
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.LayerBottomPoints">
            <summary>
            get layer bottom ponits
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.MaxY">
            <summary>
            get the max y of all layer bottom points
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphLayout.TotalLayerHeight">
            <summary>
            get the stackedgraph height
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphLayout.#ctor(System.Double[0:,0:])">
            <summary>
            Construct a stackedgraph layout
            </summary>
            <param name="height">2-dimension value</param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphLayout.#ctor(System.Double[0:,0:],Lava.Toolkit.StackedGraph.Configure)">
            <summary>
            Construct a stackedgraph layout
            </summary>
            <param name="height">2-dimension value</param>
            <param name="config">config for stackedgraph</param>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.Stripe.maxX">
            <summary>
            the range of position of the random rectangle
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.Stripe.maxY">
            <summary>
            the range of position of the random rectangle
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.Stripe.minX">
            <summary>
            the range of position of the random rectangle
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.Stripe.minY">
            <summary>
            the range of position of the random rectangle
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.Stripe.#ctor(System.Windows.Point[],System.Windows.Point[])">
            <summary>
            the two PointArray must have the same size
            </summary>
            <param name="ttopPoints">topPoints</param>
            <param name="tbottomPoints">bottomPoints</param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.Stripe.RandomPut(System.Windows.Rect@,System.Int32)">
            <summary>
            Put a rectangle in the stripe.
            </summary>
            <param name="Rec">The rectangle.</param>
            <param name="tryCount">The time of trying to put a rectangle.</param>
            <returns></returns>
        </member>
        <member name="T:Lava.Toolkit.StackedGraph.StackedGraphData">
            <summary>
            A simply implementation of IStackedGraphData interface, use a lava.table to describe data
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphData.#ctor(Lava.Data.ITable)">
            <summary>
            Use ITable to build data model for StackedGraph.
            </summary>
            <param name="table">
            An ITable instance, The first column is the item's name as string type,
            The last cells should be double-convertable data that is the value for each item in specific column(time or sth.).
            There should be at least two data columns in the table(without the name column).
            </param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphData.#ctor(Lava.Data.ITable,System.String,System.String)">
            <summary>
            Use ITable and rowName, columnName to build data model for StackedGraph.
            </summary>
            <param name="table">
            An ITable instance, The first column is the item's name as string type,
            The last cells should be double-convertable data that is the value for each item in specific column(time or sth.).
            There should be at least two data columns in the table(without the name column).
            </param>
            <param name="rowName">
            The name of case set(e.g. component, unit...).
            </param>
            <param name="columnName">
            The name of time stamp(e.g. time, version...).
            </param>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.IStackedGraphData.XPropertyName">
            <summary>
            the name of the property show in vertical direction
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.IStackedGraphData.YPropertyName">
            <summary>
            the name of the property show in horizontal direction
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.IStackedGraphData.GetXEntity(System.Int32)">
            <summary>
            get the name of the index x entity
            </summary>
            <param name="index"></param>
            <returns>x name</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.IStackedGraphData.GetYEntity(System.Int32)">
            <summary>
            get the name of the index y entity
            </summary>
            <param name="index"></param>
            <returns>y name</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.IStackedGraphData.GetXEntityCount">
            <summary>
            get the number of X Entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.IStackedGraphData.GetYEntityCount">
            <summary>
            get the number of y Entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.IStackedGraphData.GetHeight">
            <summary>
            get the 2-dimension value
            </summary>
            <returns>2-dimenion array</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.IStackedGraphData.GetMin">
            <summary>
            get data's minimal value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.IStackedGraphData.GetMax">
            <summary>
            get data's maximal value
            </summary>
            <returns></returns>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.ActionHandler._layerLayout">
            <summary>
            the basic layer layout which all other layout base on 
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.ActionHandler._mainDisplay">
            <summary>
            display and visualization object from lava to create visualization of WordCloud and AnchorLine
            because they are instantiated dynamically
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.ActionHandler._moveStickLayout">
            <summary>
            move stick and tooltip layout
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.LayerLayout._layerTable">
            <summary>
            the visual table which holds all data needed to draw layers
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.LayerLayout.Max">
            <summary>
            min-max of data
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.LayerLayout._data">
            <summary>
            data model
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.LayerLayout._Entity2RowDic">
            <summary>
            key is the x entity's name, value is the item row number in visualtable
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.LayerLayout._Entity2BrushDic">
            <summary>
            key is the x entity's name, value is the brush used to draw that layer geometry 
            </summary>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.LayerLayout.normalizeHeight">
            <summary>
            the initial height, for calculating the normalization ratio when update
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.LayerLayout.#ctor(Lava.Data.VisualTable)">
            <summary>
            define the visual table schema without initial data
            </summary>
            <param name="layerTable">created by Visualization object in Lava</param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.LayerLayout.#ctor(Lava.Data.VisualTable,Lava.Toolkit.StackedGraph.IStackedGraphData)">
            <summary>
            define the visual table schema with initial data
            </summary>
            <param name="layerTable">created by Visualization object in Lava</param>
            <param name="data">the data object you want to show in stackedgraph</param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.LayerLayout.#ctor(Lava.Data.VisualTable,Lava.Toolkit.StackedGraph.IStackedGraphData,Lava.Toolkit.StackedGraph.Configure)">
            <summary>
            define the visual table schema with initial data
            </summary>
            <param name="layerTable">created by Visualization object in Lava</param>
            <param name="data">the data object you want to show in stackedgraph</param>
            <param name="userConfig">user's layout config</param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.LayerLayout.Initialize">
            <summary>
            define the schema of layertable
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.LayerLayout.Show">
            <summary>
            show the StackedGraph with current data
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.LayerLayout.Update(Lava.Toolkit.StackedGraph.IStackedGraphData)">
            <summary>
            update the layer using new data
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.LayerLayout.AddItem(System.Windows.Media.Geometry,System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Point[],System.Windows.Point[],System.Tuple{System.String,System.Double,System.Windows.Media.Brush},System.Int32)">
            <summary>
            add a new layer item to visual table
            </summary>
            <param name="geometry"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="topPoints"></param>
            <param name="bottomPoints"></param>
            <param name="text"></param>
            <param name="xEntityIndex"></param>
            <returns>the row index</returns>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StickLayout._layerLayout">
            <summary>
            the basic layer layout which all other layout base on 
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StickLayout._stickTable">
            <summary>
            visual table
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StickLayout.TimeSlot2Row">
            <summary>
            key is time stamp index, value is its row number in VisualTable
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StickLayout.moveRowIndex">
            <summary>
            the row number of moving ruler in VisualTable
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StickLayout.Clear">
            <summary>
            Clear to empty
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StickLayout.Show(System.Double)">
            <summary>
            Show stick 
            </summary>
            <param name="_X"></param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StickLayout.Duplicate(System.Double)">
            <summary>
            Copy stick when clicked
            </summary>
            <param name="_X"></param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StickLayout.Remove(System.Double)">
            <summary>
            Remove stick in position x
            </summary>
            <param name="X"></param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StickLayout.Leave">
            <summary>
            Clear moving stick when mouse leaves the layerlayout
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StickLayout.GetStickByX(System.Double,System.Windows.Media.Brush)">
            <summary>
            get all stick data by clicked x position
            </summary>
            <param name="_X"></param>
            <returns></returns>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.TimeLineLayout._layerLayout">
            <summary>
            The basic layer layout which all other layout base on 
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.TimeLineLayout._timestampTable">
            <summary>
            Visual Table
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.ToolTipLayout._layerLayout">
            <summary>
            The basic layer layout which all other layout base on 
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.ToolTipLayout._toolTipTable">
            <summary>
            Visual Table
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphVis._2D_Data2Show">
            <summary>
            @the 2-dimension data to show in stackedgraph
            @implements all the method and properties defined in IStackedGraph interface
            </summary>
        </member>
        <member name="F:Lava.Toolkit.StackedGraph.StackedGraphVis._layerLayout">
            <summary>
            the basic layer layout which all other layout base on 
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphVis.#ctor(Lava.Visual.Display,Lava.Visual.PanAndZoomViewer,Lava.Toolkit.StackedGraph.IStackedGraphData,Lava.Toolkit.StackedGraph.Configure)">
            <summary>
            Create a StackedGraphVis Object by Lava display, Lava panandzoomviewer, WPF controls and the very important: data object which implement the methods defined in IStackedGraphData
            </summary>
            <param name="mainDisplay">"display offered by lava"</param>
            <param name="mainViewer">panandzoomviewer offered by lava</param>
            <param name="_2D_DataSet">data object which implements all the methods defined in IStackedGraphData</param>
            <param name="config">user configuration, set to null or don't set to use default configure</param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphVis.PutWord(System.String,System.Double,System.Int32)">
            <summary>
            Put a word as the stuff of the layer
            </summary>
            <param name="word">The word</param>
            <param name="frontSize">The frontsize of the word.</param>
            <param name="LayerNumber">The layer</param>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphVis.ClearWords">
            <summary>
            Clear all the stuff words. 
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphVis.Update">
            <summary>
            redraw the layout,and the words are cleared
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphVis.Update(Lava.Toolkit.StackedGraph.IStackedGraphData)">
            <summary>
            update data and redraw the layout
            </summary>
            <param name="newData"></param>
        </member>
        <member name="P:Lava.Toolkit.StackedGraph.StackedGraphVis.Config">
            <summary>
            set and get user configuration, if the change will affect the layout of the graph, Update() should be invoked.
            </summary>
        </member>
        <member name="T:Lava.Toolkit.StackedGraph.Configure">
            <summary>
            user configuration class, almost all the fields are public
            </summary>
        </member>
        <member name="T:Lava.Toolkit.StackedGraph.StackedGraphUtil.Scale">
            <summary>
            scale method enum
            </summary>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.LinearScale(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            linear scaling
            </summary>
            <param name="newMin">new minimum</param>
            <param name="newMax">new maximum</param>
            <param name="value">original value</param>
            <param name="min">original minimum</param>
            <param name="max">original maximum</param>
            <returns>
            Value in new range.
            If the original value exceed the original range, will throw IndexOutOfRangeException.
            </returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.LinearScale(System.Double,System.Double,System.Double[0:,0:])">
            <summary>
            linear scale on a data set, map to a specific range
            </summary>
            <param name="lowerBound">minimum after scaling</param>
            <param name="upperBound">maximum after scaling</param>
            <param name="value">data set</param>
            <returns>New data set after scaling each data cell</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.LinearScale(System.Double,System.Double,System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            linear scale on a data set in a specific range, map to a specific range
            </summary>
            <param name="lowerBound">minimum after scaling</param>
            <param name="upperBound">maximum after scaling</param>
            <param name="value">data set</param>
            <param name="min">original lower bound</param>
            <param name="max">original upper bound</param>
            <returns>
            New data set after scaling each data cell.
            If at least one original value exceed the original range, will throw IndexOutOfRangeException.
            </returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.LogarithmScale(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            logarithm scaling
            </summary>
            <param name="newMin">new minimum</param>
            <param name="newMax">new maximum</param>
            <param name="value">original value</param>
            <param name="min">original minimum</param>
            <param name="max">original maximum</param>
            <returns>
            Value in new range.
            If the original value exceed the original range, will throw IndexOutOfRangeException.
            </returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.LogarithmScale(System.Double,System.Double,System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            logarithm scale on a data set in a specific range, map to a specific range
            </summary>
            <param name="lowerBound">minimum after scaling</param>
            <param name="upperBound">maximum after scaling</param>
            <param name="value">data set</param>
            <param name="min">original lower bound</param>
            <param name="max">original upper bound</param>
            <returns>
            New data set after scaling each data cell.
            If at least one original value exceed the original range, will throw IndexOutOfRangeException.
            </returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.GetLayerBrushOddEven(System.Int32,Lava.Toolkit.StackedGraph.Configure)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.GetLabelBrushOddEven(System.Int32,Lava.Toolkit.StackedGraph.Configure)">
            <summary>
            Get label color. To make neighbour labels clear, we use different colors determined to the index's odd/even.
            </summary>
            <param name="index">label's index</param>
            <returns>specific color</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.GetBrush(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.WiggleOptimize(System.Collections.Generic.List{System.Tuple{System.Double[],System.Double}})">
            <summary>
            minimizes the weighted wiggle squares.
            </summary>
            <param name="layers">a list of layers represented by tuples containing heights and weight</param>
            <returns>the baseline offsets</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.BaseLine(System.Double[0:,0:],System.Double)">
            <summary>
            get the baseline of the stacked graph
            </summary>
            <param name="value">2-dimension data after normalizing</param>
            <param name="gap">gap between two layers</param>
            <returns>the base line</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.GetCardinalSpline(System.Windows.Point[],System.Double,System.Boolean)">
            <summary>
            calculate control points
            </summary>
            <param name="points">orignal ponits array</param>
            <param name="tension">cardinal spline tension</param>
            <param name="isClosed">is closed or not</param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.GetLayerNatrualSplineGeometry(System.Windows.Point[],System.Windows.Point[],System.Double)">
            <summary>
            get the geometry surrounded by top-ponits and bottom-ponits using bezier curve
            </summary>
            <param name="topPoints">top points array</param>
            <param name="bottomPoints">bottom points array</param>
            <param name="tension">the tension</param>
            <returns>the geometry object depicts the shape surrounded by top-points and bottom-points</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.StackedGraphUtil.GetStripList(System.Double[],System.Double[0:,0:],System.Double,System.Double,System.Double)">
            <summary>
            Calculate out all strips of the StackedGraph.
            </summary>
            <param name="baseLine">The top base line</param>
            <param name="refineHeight">Normalized height indicate the data</param>
            <param name="XSpan">Span between neighbours in X-Axis</param>
            <param name="gapBtwLayer">Gap Between Layer</param>
            <param name="CardinalSplineTension">The tension for the spline</param>
            <returns>A 3-tuple contains the list of layer geometry, and the top/whole point list of the whole graph</returns>
        </member>
        <member name="M:Lava.Toolkit.StackedGraph.Utility.MinMax(System.Double[0:,0:])">
            <summary>
            get the minimum and maximum value from a 2D array
            </summary>
            <param name="value">2-dimension array(double[,])</param>
            <returns>a 2-tuple consists of min and max</returns>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.TitleMargin">
            <summary>
            The empty border (left and right) around the title box
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.Timeline">
            <summary>
            The geometry property fo the time line axis.
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.LayerGap">
            <summary>
            The distance between different neighboring layers, if
            multiple layers are chosen
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.TitleBoxCornerRadius">
            <summary>
            The radius of the title box
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.AnimationMilSecond">
            <summary>
            Time used to do the animation (in millisecond).
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.LayerNumber">
            <summary>
            The number of layer used to show the titles, the value
            has to be between 1 and 4.
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.TimelineColor">
            <summary>
            The color of the time line
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.ConnectionColor">
            <summary>
            The color of the line connecting the time and the event box
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.TimelineThickness">
            <summary>
            The thickness of the time line
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.TimelineDotGenerator">
            <summary>
            The shape of the dots on the time line
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.TimelineDotColor">
            <summary>
            The color of the dots on the time line
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.BoxFillColor">
            <summary>
            The color to fill the rectangle
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.BoxStrokeColor">
            <summary>
            The color to stroke the rectangle
            </summary>
        </member>
        <member name="F:Lava.Toolkit.Timeline.TimelineLayoutConfig.TextColor">
            <summary>
            The color to draw the text
            </summary>
        </member>
        <member name="T:Lava.Toolkit.WordCloud.BDEventGenerator">
            <summary>
            Generate the boundary events for sweeping line search.
            It required the sample points provided in circleclock direction.
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.BDEventGenerator.NUMBER_TOLERENCE">
            <summary>
            Tolerance for compare the double variable.
            </summary>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.BDEventGenerator.ConstructBDPoints(System.Windows.Point[],System.Collections.Generic.List{Lava.Toolkit.WordCloud.BoundaryEventPoint})">
            <summary>
            Construct the event trigger point from sample points on the boundary.
            </summary>
            <param name="points"></param>
            <param name="eventPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.BDEventGenerator.BuildSegmentEvent(System.Windows.Point[])">
            <summary>
            Build the SegEvent from sample points from boundary.
            It required the point to be clockwise and started from the least x-coordinate point.
            </summary>
            <param name="points">sample points on boundary</param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.SetSegmentEvents(Lava.Toolkit.WordCloud.SegEvent[])">
            <summary>
            Setting the segment event of boundary.
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.BlockInterval(System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Block the intervals with fixed range
            </summary>
            <param name="intervals"></param>
            <param name="sx"></param>
            <param name="tx"></param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.GeneratePreferSegEvent(System.Double)">
            <summary>
            Generate the new segment event in the line of <code>yLine</code>, and return the index of events.
            If the yline is aligned with existed event segment, use the exsited one.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.PlaceRectangles(System.Windows.Rect[],System.Boolean[],System.Windows.Point[])">
            <summary>
            Layout keyword according to the segment event.
            </summary>
            <param name="rects">the boundary of keyword</param>
            <param name="displaced">whether the rectangle is placed</param>
            <param name="prefers">prefered location for each rectangle</param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.SearchCenterLine(System.Double,System.Double,System.Int32,System.Windows.Point)">
            <summary>
            Searching the suitable position on the center line of prefered location.
            </summary>
            <param name="w"></param>
            <param name="hh"></param>
            <param name="centerEventIndex"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.FillInterval(System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Find the position which is the best place to displace word in the intervals
            </summary>
            <param name="interval"></param>
            <param name="width"></param>
            <param name="cx"></param>
            <returns></returns>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.UpdateEvent(System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Update the interval array and marked the rectangle region as forbidden.
            </summary>
            <param name="rect"></param>
            <param name="x"></param>
            <param name="eIndex"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.UpdateInterval(System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Update Interval by filled with the rect at x
            </summary>
            <param name="interval"></param>
            <param name="w"></param>
            <param name="x"></param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.ConstrainedTagCloudAlg.IntersectInterval(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Intersect interval orig and other. deposite the result in orig interval.
            </summary>
            <param name="orig"></param>
            <param name="other"></param>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.ScalingMethod">
            <summary>
            Linear scale or logarithm scale
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.EllipseCenter">
            <summary>
            all the words will be placed arround this center
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.BoundWidth">
            <summary>
            width and height of the bound(rectangle to limit the word cloud)
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.HorizontalGap">
            <summary>
            gap between words in horizontal and vertical direction
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.MinFontSize">
            <summary>
            minimum fontsize and maximum font size of words
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.DefaultHorizontalGap">
            <summary>
            default gap
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.DefaultMinFontSize">
            <summary>
            default font size limit
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout.DefaultScalingMethod">
            <summary>
            default scaling method for font size of word
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout._WordAndWeight">
            <summary>
            key is the word string, value is the word's weight algorithm will
            place word according its weight, the bigger ,the more important
            and it will appear near the center of the layout if all weight are
            the same, algorithm will place word according to their order in dictionary
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudLayout._WordAndPosition">
            <summary>
            the layout algorithm will output the placement infomation for 
            each word to this local data structure after running layout()
            </summary> 
        </member>
        <member name="M:Lava.Toolkit.WordCloud.WordCloudLayoutUtil.LinearScale(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            linear scaling
            </summary>
            <param name="min">orginal minimum</param>
            <param name="max">original maximum</param>
            <param name="value">original value</param>
            <param name="newMin">new minimum</param>
            <param name="newMax">new maximum</param>
            <returns>scaling result</returns>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.WordCloudLayoutUtil.LogarithmScale(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            logarithm scaling
            </summary>
            <param name="min">orginal minimum</param>
            <param name="max">original maximum</param>
            <param name="value">original value</param>
            <param name="newMin">new minimum</param>
            <param name="newMax">new maximum</param>
            <returns>scaling result</returns>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudVis._wordCloudTable">
            <summary>
            the visual table which holds all data needed to draw WordCloud
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudVis.PaddingLeft">
            <summary>
            pading to top and left
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudVis.ZoomFactorX">
            <summary>
            zoom factor
            </summary>
        </member>
        <member name="F:Lava.Toolkit.WordCloud.WordCloudVis.WordColor">
            <summary>
            The Color of the words.
            </summary>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.WordCloudVis.Show">
            <summary>
            draw word cloud
            </summary>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.WordCloudVis.Update(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Double}})">
            <summary>
            draw new data
            </summary>
            <param name="wordAndWeight"></param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.WordCloudVis.MoveBy(System.Double,System.Double)">
            <summary>
            move the wordcloud by x and y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Lava.Toolkit.WordCloud.WordCloudVis.AddWord(System.Collections.Generic.KeyValuePair{System.String,System.Double},System.Windows.Point)">
            <summary>
            add a new word item in visual table
            </summary>
            <param name="formattedText">the word with formatted info</param>
            <param name="position">where to place the word</param>
        </member>
        <member name="P:Lava.Visual.Layout.ForceDirectedLayout.NodeWidth">
            <summary>
            reserve space for every nodes. width
            </summary>
        </member>
        <member name="P:Lava.Visual.Layout.ForceDirectedLayout.NodeHeight">
            <summary>
            reserve space for every nodes. height
            </summary>
        </member>
        <member name="F:Lava.Visual.Layout.ForceDirectedLayout._graph">
            <summary>
            the graph to layout
            </summary>
        </member>
        <member name="F:Lava.Visual.Layout.ForceDirectedLayout._nodesLoc">
            <summary>
            the table store node location;
            the row index in location table is the SAME in tree.
            </summary>
        </member>
        <member name="F:Lava.Visual.Layout.ForceDirectedLayout._nodeXKey">
            <summary>
            node x column name in node location table
            </summary>
        </member>
        <member name="F:Lava.Visual.Layout.ForceDirectedLayout._nodeYKey">
            <summary>
            node y column name in node location table
            </summary>
        </member>
        <member name="F:Lava.Visual.Layout.ForceDirectedLayout.HasBoundary">
            <summary>
            whether the nodes need to be in boundary
            </summary>
        </member>
        <member name="F:Lava.Visual.Layout.ForceDirectedLayout.BoundWidth">
            <summary>
            boundary
            </summary>
        </member>
        <member name="F:Lava.Visual.Layout.ForceDirectedLayout.BoundHeight">
            <summary>
            boundary
            </summary>
        </member>
        <member name="M:Lava.Visual.Layout.ForceDirectedLayout.updateNodePositions">
            <summary>
            Calculate all items' new position according to the force
            </summary>
        </member>
    </members>
</doc>
